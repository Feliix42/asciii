var searchIndex = {};
searchIndex["asciii"] = {"doc":"Thank you for choosing `asciii`, the new and improved `ascii`.","items":[[3,"CONFIG","asciii","",null,null],[5,"version","","Returns library version",null,{"inputs":[],"output":{"name":"string"}}],[0,"util","","Utility functions that are needed all over the places.",null,null],[5,"freeze","asciii::util","Freezes the program until for inspection",null,{"inputs":[],"output":null}],[5,"ls","","Shells out to print directory structure",null,{"inputs":[{"name":"str"}],"output":null}],[5,"replace_home_tilde","","Replaces `~` with `$HOME`, rust stdlib doesn&#39;t do this yet.",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[5,"open_in_editor","","Opens the passed paths in the editor set int config.",null,null],[5,"get_storage_path","","Interprets storage path from config.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"exit","","Exits with the exit status of a child process.",null,{"inputs":[{"name":"exitstatus"}],"output":null}],[0,"yaml","","Yaml Utility functions.",null,null],[11,"as_bool","yaml_rust::yaml","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"yaml"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"yaml"}}],[11,"on_event","","",1,null],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"index","","",0,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"yaml"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"from","collections::string","",2,{"inputs":[{"name":"yaml"}],"output":{"name":"string"}}],[11,"to_string","yaml_rust::yaml","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"string"}}],[11,"fmt","yaml_rust::scanner","",3,{"inputs":[{"name":"tencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"tencoding"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"tencoding"}],"output":{"name":"tencoding"}}],[11,"fmt","","",4,{"inputs":[{"name":"tscalarstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"tscalarstyle"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"tscalarstyle"}],"output":{"name":"tscalarstyle"}}],[11,"fmt","","",5,{"inputs":[{"name":"marker"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"marker"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"marker"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"marker"}],"output":{"name":"marker"}}],[11,"fmt","","",6,{"inputs":[{"name":"scanerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"scanerror"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"scanerror"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"scanerror"}],"output":{"name":"scanerror"}}],[11,"new","","",6,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",6,{"inputs":[{"name":"scanerror"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"scanerror"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"scanerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"tokentype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"fmt","","",8,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"fmt","","",9,{"inputs":[{"name":"scanner"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"result"}}],[11,"next_token","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"result"}}],[11,"fmt","yaml_rust::parser","",10,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"fmt","","",11,{"inputs":[{"name":"parser"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",11,{"inputs":[{"name":"parser"},{"name":"r"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","yaml_rust::emitter","",12,{"inputs":[{"name":"emiterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"emiterror"}],"output":{"name":"emiterror"}}],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"emiterror"}}],[11,"new","","",13,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",13,{"inputs":[{"name":"yamlemitter"},{"name":"yaml"}],"output":{"name":"result"}}],[4,"Yaml","asciii::util::yaml","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to\naccess your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand.\nNote that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This\nsimplifies error handling in the calling code. Invalid type conversion also\nreturns `BadValue`.",0,null],[4,"YamlError","","Wrapper around `io::Error` and `yaml_rust::scanner::ScanError`.",null,null],[13,"Io","","",14,null],[13,"Scan","","",14,null],[5,"open","","Wrapper that opens and parses a `.yml` file.",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"parse","","Ruby like API to yaml-rust.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_dmy_date","","Interprets `&quot;25.12.2016&quot;` as date.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"parse_dmy_date_range","","Interprets `&quot;24-25.12.2016&quot;` as date.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"get_hash","","Gets `Some(Yaml::Hash)` or `None`.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_bool","","Gets a `Bool` value.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_f64","","Gets a `Float` value.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_int","","Gets an `Int` value.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_str","","Gets a `&amp;str` value.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_string","","same as `get_str()`, but owned.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_as_string","","Gets anything **as** `String`.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_dmy","","Gets a Date in `dd.mm.YYYY` format.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[5,"get","","Wrapper around `get_path()`.",null,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"yamlerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"yamlerror"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"yamlerror"}],"output":{"name":"option"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"yamlerror"}}],[11,"from","","",14,{"inputs":[{"name":"scanerror"}],"output":{"name":"yamlerror"}}],[11,"fmt","","",14,{"inputs":[{"name":"yamlerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"config","asciii","Handles config files and default config.",null,null],[3,"ConfigReader","asciii::config","Looks for a configuration yaml in your `HOME_DIR`",null,null],[12,"path","","Path of config file",15,null],[17,"DEFAULT_LOCATION","","Name of the configfile",null,null],[17,"DEFAULT_CONFIG","","Default configuration that will be used if a value is not set in yaml file at `DEFAULT_LOCATION`",null,null],[11,"fmt","","",15,{"inputs":[{"name":"configreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path_home","","The Path of the config file.",15,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"new","","Opens config from `self.path()` and parses Yaml right away.",15,{"inputs":[],"output":{"name":"result"}}],[11,"get","","Returns whatever it finds in that position",15,{"inputs":[{"name":"configreader"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_str","","Returns the string in the position or an empty string",15,{"inputs":[{"name":"configreader"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_as_string","","Returns the string in the position or an empty string",15,{"inputs":[{"name":"configreader"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_bool","","Returns the boolean in the position or `false`",15,{"inputs":[{"name":"configreader"},{"name":"str"}],"output":{"name":"bool"}}],[0,"manual","asciii","The **official asciii Handbook**.",null,null],[0,"project","","Project file parsing and evaluation.",null,null],[3,"Project","asciii::project","Represents a Project.",null,null],[0,"product","","",null,null],[3,"Product","asciii::project::product","",null,null],[12,"name","","",16,null],[12,"unit","","",16,null],[12,"tax","","",16,null],[12,"price","","",16,null],[3,"InvoiceItem","","",null,null],[12,"amount_offered","","",17,null],[12,"amount_sold","","",17,null],[12,"item","","",17,null],[4,"ProductUnit","","",null,null],[13,"Piece","","",18,null],[13,"Liter","","",18,null],[13,"Hour","","",18,null],[13,"Kilogramm","","",18,null],[13,"Gramm","","",18,null],[13,"None","","",18,null],[11,"fmt","","",16,{"inputs":[{"name":"product"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"product"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"invoiceitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cost_before_tax","","",17,{"inputs":[{"name":"invoiceitem"}],"output":{"name":"currency"}}],[11,"cost_after_tax","","",17,{"inputs":[{"name":"invoiceitem"}],"output":{"name":"currency"}}],[0,"spec","asciii::project","Implements the ascii invoicer project file specification.",null,null],[3,"VirtualFields","asciii::project::spec","",null,null],[3,"VirtualFieldNames","","",null,null],[4,"VirtualField","","",null,null],[13,"Responsible","","Usually `storage`, or in legacy part of `signature`",19,null],[13,"InvoiceNumber","","Pretty version of `invoice/number`: &quot;`R042`&quot;",19,null],[13,"InvoiceNumberLong","","Pretty version of `invoice/number` including year: &quot;`R2016-042`&quot;",19,null],[13,"Name","","Overall Cost Project, including taxes",19,null],[13,"Final","","",19,null],[13,"Age","","",19,null],[13,"Year","","",19,null],[13,"Caterers","","",19,null],[13,"ClientFullName","","",19,null],[13,"Invalid","","",19,null],[0,"project","","",null,null],[5,"name","asciii::project::spec::project","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"date","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"manager","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"format","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"canceled","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[5,"validate","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[0,"client","asciii::project::spec","",null,null],[5,"email","asciii::project::spec::client","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"address","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"title","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"first_name","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"last_name","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"full_name","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"addressing","","",null,{"inputs":[{"name":"yaml"},{"name":"configreader"}],"output":{"name":"option"}}],[5,"validate","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"specresult"}}],[0,"date","asciii::project::spec","",null,null],[5,"date","asciii::project::spec::date","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"payed","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"wages","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"offer","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"invoice","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"event","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"events","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[6,"DateRange","","",null,null],[6,"DateRanges","","",null,null],[0,"offer","asciii::project::spec","",null,null],[5,"number","asciii::project::spec::offer","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"appendix","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"validate","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"specresult"}}],[0,"invoice","asciii::project::spec","",null,null],[5,"number","asciii::project::spec::invoice","plain access to `invoice/number`",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"number_str","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"number_long_str","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"validate","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"specresult"}}],[0,"archive","asciii::project::spec","",null,null],[5,"validate","asciii::project::spec::archive","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"specresult"}}],[0,"hours","asciii::project::spec","",null,null],[5,"salary","asciii::project::spec::hours","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"total","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"caterers_string","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[5,"caterers","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[0,"products","asciii::project::spec","",null,null],[4,"ProductError","asciii::project::spec::products","",null,null],[13,"AmbiguousAmounts","","",20,null],[13,"MissingAmount","","",20,null],[13,"TooMuchReturned","","",20,null],[13,"UnknownFormat","","",20,null],[5,"all0","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"vec"}}],[5,"all","","",null,{"inputs":[{"name":"yaml"}],"output":{"name":"productresult"}}],[5,"sum_offered","","",null,null],[5,"sum_sold","","",null,null],[6,"ProductResult","","",null,null],[11,"eq","","",20,{"inputs":[{"name":"producterror"},{"name":"producterror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"producterror"},{"name":"producterror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"producterror"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"SpecResult","asciii::project::spec","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"virtualfield"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"virtualfields"}],"output":{"name":"option"}}],[11,"iter_variants","","",19,{"inputs":[],"output":{"name":"virtualfields"}}],[11,"next","","",22,{"inputs":[{"name":"virtualfieldnames"}],"output":{"name":"option"}}],[11,"iter_variant_names","","",19,{"inputs":[],"output":{"name":"virtualfieldnames"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"name":"str"}],"output":{"name":"virtualfield"}}],[11,"get","","",19,{"inputs":[{"name":"virtualfield"},{"name":"project"}],"output":{"name":"option"}}],[11,"file_extension","asciii::project","",23,{"inputs":[],"output":{"name":"str"}}],[11,"from_template","","",23,{"inputs":[{"name":"str"},{"name":"path"},{"name":"hashmap"}],"output":{"name":"result"}}],[11,"prefix","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"index","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"name","","",23,{"inputs":[{"name":"project"}],"output":{"name":"string"}}],[11,"date","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"file","","",23,{"inputs":[{"name":"project"}],"output":{"name":"pathbuf"}}],[11,"set_file","","",23,{"inputs":[{"name":"project"},{"name":"path"}],"output":null}],[11,"set_git_status","","",23,{"inputs":[{"name":"project"},{"name":"gitstatus"}],"output":null}],[11,"get_git_status","","Ask a project for its gitstatus",23,{"inputs":[{"name":"project"}],"output":{"name":"gitstatus"}}],[11,"open","","Opens a yaml and parses it.",23,{"inputs":[{"name":"path"}],"output":{"name":"storageresult"}}],[11,"open_file","","",23,{"inputs":[{"name":"path"}],"output":{"name":"storageresult"}}],[11,"matches_filter","","Checks against a certain key-val pair.",23,{"inputs":[{"name":"project"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches_search","","UNIMPLEMENTED: Checks against a certain search term.",23,{"inputs":[{"name":"project"},{"name":"str"}],"output":{"name":"bool"}}],[11,"yaml","","Access to inner data",23,{"inputs":[{"name":"project"}],"output":{"name":"yaml"}}],[11,"get","","wrapper around yaml::get() with replacement",23,{"inputs":[{"name":"project"},{"name":"str"}],"output":{"name":"option"}}],[11,"manager","","",23,{"inputs":[{"name":"project"}],"output":{"name":"string"}}],[11,"canceled","","",23,{"inputs":[{"name":"project"}],"output":{"name":"bool"}}],[11,"canceled_string","","",23,{"inputs":[{"name":"project"}],"output":{"name":"str"}}],[11,"invoice_num","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"valid_stage1","","Minimum correctness.",23,{"inputs":[{"name":"project"}],"output":{"name":"specresult"}}],[11,"valid_stage2","","Valid project",23,{"inputs":[{"name":"project"}],"output":{"name":"specresult"}}],[11,"valid_stage3","","Completely done and in the past.",23,{"inputs":[{"name":"project"}],"output":{"name":"specresult"}}],[11,"age","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"invoice_items","","",23,{"inputs":[{"name":"project"}],"output":{"name":"productresult"}}],[11,"wages","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"sum_offered","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"sum_sold","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"tax_offered","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"tax_sold","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"sum_sold_and_taxes","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[11,"sum_sold_and_wages","","",23,{"inputs":[{"name":"project"}],"output":{"name":"option"}}],[0,"storage","asciii","Manages file structure of templates, working directory and archives.",null,null],[3,"ProjectList","asciii::storage","Wrapper around `Vec&lt;Storable&gt;`",null,null],[12,"projects","","",24,null],[3,"Storage","","Manages project file storage.",null,null],[12,"repository","","",25,null],[4,"StorageDir","","Used to identify what directory you are talking about.",null,null],[13,"Working","","Describes exclusively the working directory.",26,null],[13,"Archive","","Describes exclusively one year&#39;s archive.",26,null],[13,"Year","","Describes archive of year and working directory,\nif this year is still current.",26,null],[13,"Root","","Parent of `Working`, `Archive` and `Templates`.",26,null],[13,"Templates","","Place to store templates.",26,null],[13,"All","","`Archive` and `Working` directory, not `Templates`.",26,null],[5,"list_path_content","","Basically `ls`, returns a list of paths.",null,{"inputs":[{"name":"path"}],"output":{"name":"storageresult"}}],[11,"filter_by_all","","",24,null],[11,"filter_by_key_val","","",24,{"inputs":[{"name":"projectlist"},{"name":"str"},{"name":"str"}],"output":null}],[11,"filter_by","","",24,{"inputs":[{"name":"projectlist"},{"name":"str"}],"output":null}],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",27,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",27,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",27,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",27,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",27,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",27,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",27,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",27,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",27,null],[11,"as_slice","","Extracts a slice containing the entire vector.",27,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",27,null],[11,"set_len","","Sets the length of a vector.",27,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",27,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",27,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",27,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",27,null],[11,"push","","Appends an element to the back of a collection.",27,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",27,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",27,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",27,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",27,null],[11,"len","","Returns the number of elements in the vector.",27,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",27,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",27,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",27,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",27,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",27,null],[11,"clone","collections::binary_heap","",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",28,null],[11,"default","","",28,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",28,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",28,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",28,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",28,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",28,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",28,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",28,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",28,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",28,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",28,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",28,null],[11,"clone","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",30,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",28,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",27,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",28,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",28,null],[11,"extend","","",28,null],[11,"drop","collections::btree::map","",32,null],[11,"clone","","",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",32,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",32,null],[11,"get","","Returns a reference to the value corresponding to the key.",32,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",32,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",32,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",32,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",32,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",32,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",32,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",32,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",32,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",33,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",34,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"next_back","","",34,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",34,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",35,null],[11,"next","","",35,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"next_back","","",35,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",37,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",37,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",37,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",38,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"len","","",39,{"inputs":[{"name":"valuesmut"}],"output":{"name":"usize"}}],[11,"next_back","","",38,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",40,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",40,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",32,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",32,null],[11,"extend","","",32,null],[11,"hash","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",32,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",32,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",32,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",32,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",32,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",41,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",41,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry&#39;s key.",41,{"inputs":[{"name":"entry"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",42,{"inputs":[{"name":"vacantentry"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",42,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",43,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",43,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",44,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",44,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",44,null],[11,"contains","","Returns `true` if the set contains a value.",44,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",44,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",44,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",44,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",44,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",44,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",44,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",44,null],[11,"from_iter","","",44,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",44,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",44,null],[11,"extend","","",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",44,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",46,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",46,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"clone","","",47,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",47,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",47,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",48,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",49,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",50,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",51,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"borrow","collections::borrow","",52,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",52,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",52,null],[11,"into_owned","","Extracts the owned data.",52,null],[11,"deref","","",52,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",52,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",52,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",52,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"as_ref","","",52,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",53,null],[11,"cmp","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",53,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",53,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",53,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",53,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",53,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",53,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",53,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",53,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",53,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",53,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",54,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",54,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"from_iter","","",53,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"clone","collections::linked_list","",55,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",57,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",57,null],[11,"iter","","Provides a forward iterator.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",57,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",57,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",57,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",57,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",57,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"drop","","",57,null],[11,"next","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",58,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",58,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",57,null],[11,"extend","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",57,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",57,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",57,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"make_place","","",59,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[11,"pointer","","",59,null],[11,"finalize","","",59,null],[11,"make_place","","",60,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[11,"pointer","","",60,null],[11,"finalize","","",60,null],[11,"start","core::ops","",61,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",62,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",63,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",63,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",27,null],[11,"borrow_mut","","",27,null],[11,"clone","collections::str","",64,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"next","","",64,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"borrow","collections::string","",2,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",65,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",66,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",67,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",68,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"cmp","collections::string","",2,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",2,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",2,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",2,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",2,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",2,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",2,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",2,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",2,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",2,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",2,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",2,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",2,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",2,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",2,null],[11,"push","","Appends the given `char` to the end of this `String`.",2,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",2,null],[11,"truncate","","Shortens this `String` to the specified length.",2,null],[11,"pop","","Removes the last character from the string buffer and returns it.",2,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",2,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",2,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",2,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",2,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",2,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",2,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",2,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",2,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",70,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",70,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",70,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",2,null],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",52,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",2,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"add","","",2,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",2,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",2,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",2,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",2,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",2,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",2,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",2,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",2,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",2,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",2,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",2,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",2,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",72,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",2,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",52,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",52,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",2,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"write_str","","",2,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",2,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",73,null],[11,"next","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",27,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",27,null],[11,"hash","","",27,null],[11,"index","","",27,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",27,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"index_mut","","",27,null],[11,"index_mut","","",27,null],[11,"index_mut","","",27,null],[11,"index_mut","","",27,null],[11,"index_mut","","",27,null],[11,"index_mut","","",27,null],[11,"deref","","",27,null],[11,"deref_mut","","",27,null],[11,"from_iter","","",27,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",27,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",27,null],[11,"extend","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","collections::borrow","",52,null],[11,"ne","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"eq","","",52,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"partial_cmp","","",27,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",27,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",27,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",27,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",27,null],[11,"as_mut","","",27,null],[11,"from","","",27,null],[11,"from","","",27,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",52,null],[11,"from","","",52,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",52,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"count","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"drop","","",74,null],[11,"next","","",75,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",75,null],[11,"clone","collections::vec_deque","",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",76,null],[11,"default","","",76,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",76,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",76,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",76,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",76,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",76,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",76,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",76,null],[11,"iter","","Returns a front-to-back iterator.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",76,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",76,null],[11,"len","","Returns the number of elements in the `VecDeque`.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",76,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",76,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",76,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",76,null],[11,"push_back","","Appends an element to the back of a buffer",76,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",76,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",76,null],[11,"retain","","Retains only the elements specified by the predicate.",76,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",76,null],[11,"clone","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",80,null],[11,"next","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",76,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",76,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",76,null],[11,"index","","",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",76,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",76,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",76,null],[11,"extend","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",76,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",27,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",81,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",82,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",83,null],[11,"make_place","","",83,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",83,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",84,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",82,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",83,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",84,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",84,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",84,null],[11,"default","","",84,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",84,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",84,null],[11,"clone","","",84,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",84,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",84,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",84,null],[11,"from","","",84,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",84,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",84,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",84,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",84,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",84,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",84,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",84,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",84,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",84,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",84,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",84,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",84,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","asciii::storage","",24,{"inputs":[{"name":"projectlist"}],"output":{"name":"vec"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"projectlist"}],"output":{"name":"vec"}}],[0,"repo","","",null,null],[3,"Repository","asciii::storage::repo","Convenience Wrapper for `git2::Repository`",null,null],[12,"repo","","Git Repository for StorageDir",85,null],[12,"workdir","","",85,null],[12,"statuses","","Maps GitStatus to each path",85,null],[4,"GitStatus","","More Rustacious way of representing a git status",null,null],[13,"IndexNew","","",86,null],[13,"IndexModified","","",86,null],[13,"IndexDeleted","","",86,null],[13,"IndexRenamed","","",86,null],[13,"IndexTypechange","","",86,null],[13,"WorkingNew","","",86,null],[13,"WorkingModified","","",86,null],[13,"WorkingDeleted","","",86,null],[13,"WorkingTypechange","","",86,null],[13,"WorkingRenamed","","",86,null],[13,"Ignored","","",86,null],[13,"Conflict","","",86,null],[13,"Current","","",86,null],[13,"Unknown","","",86,null],[11,"clone","","",86,{"inputs":[{"name":"gitstatus"}],"output":{"name":"gitstatus"}}],[11,"fmt","","",86,{"inputs":[{"name":"gitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_format","","",86,{"inputs":[{"name":"gitstatus"}],"output":{"name":"attr"}}],[11,"to_style","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"gitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",86,{"inputs":[{"name":"status"}],"output":{"name":"self"}}],[11,"new","","",85,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"get_status","","Returns the status to a given path",85,{"inputs":[{"name":"repository"},{"name":"path"}],"output":{"name":"gitstatus"}}],[11,"add","","",85,null],[11,"commit","","",85,{"inputs":[{"name":"repository"}],"output":{"name":"exitstatus"}}],[11,"status","","",85,{"inputs":[{"name":"repository"}],"output":{"name":"exitstatus"}}],[11,"push","","",85,{"inputs":[{"name":"repository"}],"output":{"name":"exitstatus"}}],[11,"diff","","",85,{"inputs":[{"name":"repository"}],"output":{"name":"exitstatus"}}],[11,"pull","","",85,{"inputs":[{"name":"repository"}],"output":{"name":"exitstatus"}}],[11,"remote","","",85,{"inputs":[{"name":"repository"}],"output":{"name":"exitstatus"}}],[11,"log","","",85,{"inputs":[{"name":"repository"}],"output":{"name":"exitstatus"}}],[0,"error","asciii::storage","Error that may occur in Storage",null,null],[4,"StorageError","asciii::storage::error","Error that may occur in Storage",null,null],[13,"BadChoice","","",87,null],[13,"NoWorkingDir","","",87,null],[13,"ProjectFileExists","","",87,null],[13,"ProjectDirExists","","",87,null],[13,"ProjectDoesNotExist","","",87,null],[13,"StoragePathNotAbsolute","","",87,null],[13,"InvalidDirStructure","","",87,null],[13,"ParseError","","",87,null],[13,"TemplateNotFound","","",87,null],[13,"Git","","",87,null],[13,"Io","","",87,null],[13,"Template","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"storageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"storageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",87,{"inputs":[{"name":"storageerror"}],"output":{"name":"str"}}],[11,"cause","","",87,{"inputs":[{"name":"storageerror"}],"output":{"name":"option"}}],[11,"from","","",87,{"inputs":[{"name":"error"}],"output":{"name":"storageerror"}}],[11,"from","","",87,{"inputs":[{"name":"giterror"}],"output":{"name":"storageerror"}}],[11,"from","","",87,{"inputs":[{"name":"templateerror"}],"output":{"name":"storageerror"}}],[0,"storable","asciii::storage","Contains the `Storable` trait that storable projects must implement.",null,null],[6,"FilePath","asciii::storage::storable","",null,null],[6,"FolderPath","","",null,null],[6,"FilePathBuf","","",null,null],[6,"FolderPathBuf","","",null,null],[8,"Storable","","",null,null],[10,"open","","opens a projectfolder",88,{"inputs":[{"name":"folderpath"}],"output":{"name":"storageresult"}}],[10,"open_file","","",88,{"inputs":[{"name":"filepath"}],"output":{"name":"storageresult"}}],[10,"from_template","","creates in tempfile",88,{"inputs":[{"name":"str"},{"name":"path"},{"name":"hashmap"}],"output":{"name":"storageresult"}}],[11,"ident","","For file names",88,{"inputs":[{"name":"storable"}],"output":{"name":"string"}}],[10,"name","","",88,{"inputs":[{"name":"storable"}],"output":{"name":"string"}}],[10,"date","","",88,{"inputs":[{"name":"storable"}],"output":{"name":"option"}}],[11,"year","","",88,{"inputs":[{"name":"storable"}],"output":{"name":"option"}}],[10,"index","","For sorting",88,{"inputs":[{"name":"storable"}],"output":{"name":"option"}}],[10,"prefix","","For archiving",88,{"inputs":[{"name":"storable"}],"output":{"name":"option"}}],[10,"set_file","","Sets the project File",88,{"inputs":[{"name":"storable"},{"name":"path"}],"output":null}],[11,"set_git_status","","Tell a project its own git status after opening",88,{"inputs":[{"name":"storable"},{"name":"gitstatus"}],"output":null}],[11,"get_git_status","","Ask a project for its gitstatus",88,{"inputs":[{"name":"storable"}],"output":{"name":"gitstatus"}}],[11,"file_extension","","Main Projectfile extension",88,{"inputs":[],"output":{"name":"str"}}],[10,"file","","Path to project file",88,{"inputs":[{"name":"storable"}],"output":{"name":"filepathbuf"}}],[11,"dir","","Path to project folder",88,{"inputs":[{"name":"storable"}],"output":{"name":"folderpathbuf"}}],[10,"matches_filter","","",88,{"inputs":[{"name":"storable"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[10,"matches_search","","",88,{"inputs":[{"name":"storable"},{"name":"str"}],"output":{"name":"bool"}}],[11,"new","asciii::storage","Inits storage, does not check existence, yet. TODO",25,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"storageresult"}}],[11,"new_with_git","","Inits storage with git capabilities.",25,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"storageresult"}}],[11,"root_dir","","Getter for Storage::storage.",25,{"inputs":[{"name":"storage"}],"output":{"name":"path"}}],[11,"working_dir","","Getter for Storage::working.",25,{"inputs":[{"name":"storage"}],"output":{"name":"path"}}],[11,"archive_dir","","Getter for Storage::archive.",25,{"inputs":[{"name":"storage"}],"output":{"name":"path"}}],[11,"templates_dir","","Getter for Storage::templates.",25,{"inputs":[{"name":"storage"}],"output":{"name":"path"}}],[11,"create_dirs","","Creates the basic dir structure inside the storage directory.",25,{"inputs":[{"name":"storage"}],"output":{"name":"storageresult"}}],[11,"create_archive","","Creates an archive for a certain year.\n This is a subdirectory under the archive directory.\n&lt;pre&gt;\n└── root\n    ├── archive\n        ├── 2001\n    ...\n&lt;/pre&gt;",25,{"inputs":[{"name":"storage"},{"name":"year"}],"output":{"name":"storageresult"}}],[11,"list_template_files","","Produces a list of files in the `template_dir()`",25,{"inputs":[{"name":"storage"}],"output":{"name":"storageresult"}}],[11,"list_template_names","","Produces a list of names of all template filess in the `templates_dir()`",25,{"inputs":[{"name":"storage"}],"output":{"name":"storageresult"}}],[11,"get_template_file","","Returns the Path to the template file by the given name, maybe.",25,{"inputs":[{"name":"storage"},{"name":"str"}],"output":{"name":"storageresult"}}],[11,"list_archives","","Produces a list of paths to all archives in the `archive_dir`.\nAn archive itself is a folder that contains project dirs,\ntherefore it essentially has the same structure as the `working_dir`,\nwith the difference, that the project folders may be prefixed with the projects index, e.g.\nan invoice number etc.",25,{"inputs":[{"name":"storage"}],"output":{"name":"storageresult"}}],[11,"list_years","","Produces a list of years for which there is an archive.",25,{"inputs":[{"name":"storage"}],"output":{"name":"storageresult"}}],[11,"create_project","","Takes a template file and stores it in the working directory,\nin a new project directory according to it&#39;s name.",25,{"inputs":[{"name":"storage"},{"name":"str"},{"name":"str"},{"name":"hashmap"}],"output":{"name":"storageresult"}}],[11,"archive_project_by_name","","Moves a project folder from `/working` dir to `/archive/$year`.",25,{"inputs":[{"name":"storage"},{"name":"str"},{"name":"year"},{"name":"option"}],"output":{"name":"storageresult"}}],[11,"archive_project","","Moves a project folder from `/working` dir to `/archive/$year`.\n Also adds the project.prefix() to the folder name.\n&lt;pre&gt;\n└── root\n    ├── archive\n        ├── 2001\n            ├── R0815_Birthdayparty\n    ...\n&lt;/pre&gt;",25,{"inputs":[{"name":"storage"},{"name":"l"},{"name":"year"}],"output":{"name":"storageresult"}}],[11,"unarchive_project","","Moves a project folder from `/working` dir to `/archive/$year`.",25,{"inputs":[{"name":"storage"},{"name":"l"}],"output":{"name":"storageresult"}}],[11,"unarchive_project_dir","","Moves a project folder from `/working` dir to `/archive/$year`.",25,{"inputs":[{"name":"storage"},{"name":"path"}],"output":{"name":"storageresult"}}],[11,"search_projects","","Matches StorageDir&#39;s content against a term and returns matching project files.",25,{"inputs":[{"name":"storage"},{"name":"storagedir"},{"name":"str"}],"output":{"name":"storageresult"}}],[11,"search_multiple_projects","","Matches StorageDir&#39;s content against multiple terms and returns matching project files.\nTODO add search_multiple_projects_deep",25,null],[11,"get_project_dir","","Tries to find a concrete Project.",25,{"inputs":[{"name":"storage"},{"name":"str"},{"name":"storagedir"}],"output":{"name":"storageresult"}}],[11,"get_project_file","","Locates the project file inside a folder.",25,{"inputs":[{"name":"storage"},{"name":"path"}],"output":{"name":"storageresult"}}],[11,"list_project_folders","","Produces a list of project folders.",25,{"inputs":[{"name":"storage"},{"name":"storagedir"}],"output":{"name":"storageresult"}}],[11,"list_empty_project_dirs","","Produces a list of empty project folders.",25,{"inputs":[{"name":"storage"},{"name":"storagedir"}],"output":{"name":"storageresult"}}],[11,"list_project_files","","Produces a list of project files.",25,{"inputs":[{"name":"storage"},{"name":"storagedir"}],"output":{"name":"storageresult"}}],[11,"filter_project_files","","",25,{"inputs":[{"name":"storage"},{"name":"storagedir"},{"name":"f"}],"output":{"name":"storageresult"}}],[11,"open_projects","","Behaves like `list_project_files()` but also opens projects directly.",25,{"inputs":[{"name":"storage"},{"name":"storagedir"}],"output":{"name":"storageresult"}}],[11,"fmt","","",25,{"inputs":[{"name":"storage"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Year","","Year = `i32`",null,null],[6,"StorageResult","","Result returned by Storage",null,null],[11,"clone","","",26,{"inputs":[{"name":"storagedir"}],"output":{"name":"storagedir"}}],[11,"fmt","","",26,{"inputs":[{"name":"storagedir"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"print","asciii","All the printing code lives here.",null,null],[3,"ListConfig","asciii::print","Configuration for this list output.",null,null],[12,"mode","","",89,null],[12,"show_errors","","",89,null],[12,"git_status","","",89,null],[12,"sort_by","","",89,null],[12,"filter_by","","",89,null],[12,"use_colors","","",89,null],[12,"details","","",89,null],[4,"ListMode","","",null,null],[13,"Simple","","",90,null],[13,"Verbose","","",90,null],[13,"Nothing","","",90,null],[13,"Paths","","",90,null],[13,"Csv","","",90,null],[5,"print_project","","",null,{"inputs":[{"name":"project"}],"output":null}],[5,"path_rows","","produces the rows used in `print_projects()`",null,null],[5,"simple_rows","","Triggered by `list --simple`, usually you set this in your config under `list/verbose: false`.",null,null],[5,"verbose_rows","","Triggered by `list --verbose`, usually you set this in your config under `list/verbose`.",null,null],[5,"dynamic_rows","","Triggered by `list --nothing`",null,null],[5,"print_projects","","Prints Projects Rows",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"print_csv","","Prints Projects as CSV",null,null],[5,"show_items","","",null,{"inputs":[{"name":"project"}],"output":null}],[11,"fmt","","",89,{"inputs":[{"name":"listconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"listmode"},{"name":"listmode"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"listmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"listconfig"}}],[0,"templater","asciii","Simple templating functionality through keyword replacement.",null,null],[3,"Templater","asciii::templater","Simple templating module",null,null],[12,"original","","content of template file after reading",91,null],[12,"filled","","content of filled template",91,null],[4,"TemplateError","","",null,null],[13,"Incomplete","","",92,null],[6,"TemplateResult","","",null,null],[8,"IsKeyword","","Simple template style keyword replacement.",null,null],[10,"is_keyword","","Checks if the whole string is a keyword",93,{"inputs":[{"name":"iskeyword"}],"output":{"name":"bool"}}],[10,"get_keyword","","Captures keywords from string.",93,{"inputs":[{"name":"iskeyword"}],"output":{"name":"option"}}],[10,"list_keywords","","Well, it lists the keywords in a string, duh!",93,{"inputs":[{"name":"iskeyword"}],"output":{"name":"vec"}}],[10,"map_keywords","","This one is usefull.",93,{"inputs":[{"name":"iskeyword"},{"name":"f"}],"output":{"name":"string"}}],[11,"fmt","","",91,{"inputs":[{"name":"templater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",91,{"inputs":[{"name":"str"}],"output":{"name":"templater"}}],[11,"from_file","","",91,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"finalize","","",91,{"inputs":[{"name":"templater"}],"output":{"name":"templater"}}],[11,"complete","","Creates a finished version of the output.",91,{"inputs":[{"name":"templater"}],"output":{"name":"templateresult"}}],[11,"fix","","",91,{"inputs":[{"name":"templater"}],"output":{"name":"self"}}],[11,"fill_in_data","","",91,{"inputs":[{"name":"templater"},{"name":"hashmap"}],"output":{"name":"templater"}}],[11,"list_keywords","","",91,{"inputs":[{"name":"templater"}],"output":{"name":"vec"}}],[11,"fill_template","","",91,{"inputs":[{"name":"templater"},{"name":"f"}],"output":{"name":"templater"}}],[11,"eq","","",92,{"inputs":[{"name":"templateerror"},{"name":"templateerror"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"templateerror"},{"name":"templateerror"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"templateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"templateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",92,{"inputs":[{"name":"templateerror"}],"output":{"name":"str"}}],[11,"cause","","",92,{"inputs":[{"name":"templateerror"}],"output":{"name":"option"}}],[11,"to_owned","","",91,{"inputs":[{"name":"templater"}],"output":{"name":"templater"}}],[11,"deref","asciii","",94,{"inputs":[{"name":"config"}],"output":{"name":"configreader"}}],[11,"from","asciii::storage::error","",87,{"inputs":[{"name":"yamlerror"}],"output":{"name":"storageerror"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"String"],[4,"TEncoding"],[4,"TScalarStyle"],[3,"Marker"],[3,"ScanError"],[4,"TokenType"],[3,"Token"],[3,"Scanner"],[4,"Event"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"],[4,"YamlError"],[3,"ConfigReader"],[3,"Product"],[3,"InvoiceItem"],[4,"ProductUnit"],[4,"VirtualField"],[4,"ProductError"],[3,"VirtualFields"],[3,"VirtualFieldNames"],[3,"Project"],[3,"ProjectList"],[3,"Storage"],[4,"StorageDir"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Repository"],[4,"GitStatus"],[4,"StorageError"],[8,"Storable"],[3,"ListConfig"],[4,"ListMode"],[3,"Templater"],[4,"TemplateError"],[8,"IsKeyword"],[3,"CONFIG"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"LogBuilder","env_logger","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"logbuilder"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"logbuilder"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,{"inputs":[{"name":"logbuilder"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"logbuilder"}],"output":{"name":"result"}}]],"paths":[[3,"LogBuilder"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"replacer"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"regexbuilder"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"regexbuilder"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"regexbuilder"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"regexbuilder"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"regexbuilder"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"regexbuilder"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"regexbuilder"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"no_expansion","regex::re_bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"clone","regex::bytes","",6,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",6,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",6,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"splits"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"splitsn"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"noexpand"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"clone","regex","",16,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",16,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",17,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",17,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",17,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",17,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",17,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",18,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",19,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",20,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",21,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",21,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",21,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",21,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",21,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",22,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",23,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",24,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",24,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",24,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",24,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",24,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",0,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",28,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"captures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",28,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",28,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["prettytable"] = {"doc":"&lt;a href=&quot;https://github.com/phsym/prettytable-rs&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/121cd7cbdc3e4855075ea8b558508b91ac463ac2/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f677265656e5f3030373230302e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_left_green_007200.png&quot;&gt;&lt;/a&gt;\n&lt;style&gt;.sidebar { margin-top: 53px }&lt;/style&gt;\nA formatted and aligned table printer written in rust","items":[[3,"Table","prettytable","An owned printable table",null,null],[3,"TableSlice","","A borrowed immutable `Table` slice\nA `TableSlice` is obtained by slicing a `Table` with the `Slice::slice` method.",null,null],[3,"ColumnIter","","Iterator over immutable cells in a column",null,null],[3,"ColumnIterMut","","Iterator over mutable cells in a column",null,null],[0,"cell","","This module contains definition of table/row cells stuff",null,null],[3,"Cell","prettytable::cell","Represent a table cell containing a string.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"new_align","","Create a new `Cell` initialized with content from `string`.\nText alignment in cell is configurable with the `align` argument",0,{"inputs":[{"name":"str"},{"name":"alignment"}],"output":{"name":"cell"}}],[11,"new","","Create a new `Cell` initialized with content from `string`.\nBy default, content is align to `LEFT`",0,{"inputs":[{"name":"str"}],"output":{"name":"cell"}}],[11,"align","","Set text alignment in the cell",0,{"inputs":[{"name":"cell"},{"name":"alignment"}],"output":null}],[11,"style","","Add a style attribute to the cell",0,{"inputs":[{"name":"cell"},{"name":"attr"}],"output":null}],[11,"with_style","","Add a style attribute to the cell. Can be chained",0,{"inputs":[{"name":"cell"},{"name":"attr"}],"output":{"name":"cell"}}],[11,"reset_style","","Remove all style attributes and reset alignment to default (LEFT)",0,{"inputs":[{"name":"cell"}],"output":null}],[11,"style_spec","","Set the cell&#39;s style by applying the given specifier string",0,{"inputs":[{"name":"cell"},{"name":"str"}],"output":{"name":"cell"}}],[11,"get_height","","Return the height of the cell",0,{"inputs":[{"name":"cell"}],"output":{"name":"usize"}}],[11,"get_width","","Return the width of the cell",0,{"inputs":[{"name":"cell"}],"output":{"name":"usize"}}],[11,"get_content","","Return a copy of the full string contained in the cell",0,{"inputs":[{"name":"cell"}],"output":{"name":"string"}}],[11,"print","","Print a partial cell to `out`. Since the cell may be multi-lined,\n`idx` is the line index to print. `col_width` is the column width used to\nfill the cells with blanks so it fits in the table.\nIf `ìdx` is higher than this cell&#39;s height, it will print empty content",0,{"inputs":[{"name":"cell"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_term","","Apply style then call `print` to print the cell into a terminal",0,{"inputs":[{"name":"cell"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"to_string","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"string"}}],[11,"default","","Return a cell initialized with a single empty `String`, with LEFT alignment",0,{"inputs":[],"output":{"name":"cell"}}],[0,"row","prettytable","This module contains definition of table rows stuff",null,null],[3,"Row","prettytable::row","Represent a table row made of cells",null,null],[11,"fmt","","",1,{"inputs":[{"name":"row"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"row"}],"output":{"name":"row"}}],[11,"new","","Create a new `Row` backed with `cells` vector",1,{"inputs":[{"name":"vec"}],"output":{"name":"row"}}],[11,"empty","","Create an row of length `size`, with empty strings stored",1,{"inputs":[],"output":{"name":"row"}}],[11,"len","","Get the number of cells in this row",1,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[11,"get_height","","Get the height of this row",1,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[11,"get_cell_width","","Get the minimum width required by the cell in the column `column`.\nReturn 0 if the cell does not exist in this row",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_cell","","Get the cell at index `idx`",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut_cell","","Get the mutable cell at index `idx`",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set_cell","","Set the `cell` in the row at the given `column`",1,{"inputs":[{"name":"row"},{"name":"cell"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_cell","","Append a `cell` at the end of the row",1,{"inputs":[{"name":"row"},{"name":"cell"}],"output":null}],[11,"insert_cell","","Insert `cell` at position `index`. If `index` is higher than the row lenght,\nthe cell will be appended at the end",1,{"inputs":[{"name":"row"},{"name":"usize"},{"name":"cell"}],"output":null}],[11,"remove_cell","","Remove the cell at position `index`. Silently skip if this cell does not exist",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":null}],[11,"iter","","Returns an immutable iterator over cells",1,{"inputs":[{"name":"row"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an mutable iterator over cells",1,{"inputs":[{"name":"row"}],"output":{"name":"itermut"}}],[11,"print","","Print the row to `out`, with `separator` as column separator, and `col_width`\nspecifying the width of each columns",1,null],[11,"print_term","","Print the row to terminal `out`, with `separator` as column separator, and `col_width`\nspecifying the width of each columns. Apply style when needed",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"row"}}],[11,"index","","",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"output"}}],[11,"index_mut","","",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"output"}}],[11,"from_iter","","",1,{"inputs":[{"name":"t"}],"output":{"name":"row"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"row"}}],[0,"format","prettytable","Define table formatting utilities",null,null],[3,"LineSeparator","prettytable::format","Contains the character used for printing a line separator",null,null],[3,"TableFormat","","Contains the table formatting rules",null,null],[3,"FormatBuilder","","A builder to create a `TableFormat`",null,null],[4,"Alignment","","Alignment for cell&#39;s content",null,null],[13,"LEFT","","",2,null],[13,"CENTER","","",2,null],[13,"RIGHT","","",2,null],[4,"LinePosition","","Position of a line separator in a table",null,null],[13,"Top","","",3,null],[13,"Title","","",3,null],[13,"Intern","","",3,null],[13,"Bottom","","",3,null],[4,"ColumnPosition","","Position of a column separator in a row",null,null],[13,"Left","","",4,null],[13,"Intern","","",4,null],[13,"Right","","",4,null],[0,"consts","","Predifined formats. Those constants are lazily evaluated when\nthe corresponding struct is dereferenced",null,null],[3,"FORMAT_DEFAULT","prettytable::format::consts","Default table format",null,null],[3,"FORMAT_NO_TITLE","","Similar to `FORMAT_DEFAULT` but without special separator after title line",null,null],[3,"FORMAT_NO_LINESEP_WITH_TITLE","","With no line separator, but with title separator",null,null],[3,"FORMAT_NO_LINESEP","","With no line or title separator",null,null],[3,"FORMAT_NO_COLSEP","","No column separator",null,null],[3,"FORMAT_CLEAN","","Format for printing a table without any separators (only alignment)",null,null],[3,"FORMAT_BORDERS_ONLY","","Format for a table with only external borders and title separator",null,null],[3,"FORMAT_NO_BORDER","","A table with no external border",null,null],[3,"FORMAT_NO_BORDER_LINE_SEPARATOR","","A table with no external border and no line separation",null,null],[11,"deref","","",5,{"inputs":[{"name":"format_default"}],"output":{"name":"tableformat"}}],[11,"deref","","",6,{"inputs":[{"name":"format_no_title"}],"output":{"name":"tableformat"}}],[11,"deref","","",7,{"inputs":[{"name":"format_no_linesep_with_title"}],"output":{"name":"tableformat"}}],[11,"deref","","",8,{"inputs":[{"name":"format_no_linesep"}],"output":{"name":"tableformat"}}],[11,"deref","","",9,{"inputs":[{"name":"format_no_colsep"}],"output":{"name":"tableformat"}}],[11,"deref","","",10,{"inputs":[{"name":"format_clean"}],"output":{"name":"tableformat"}}],[11,"deref","","",11,{"inputs":[{"name":"format_borders_only"}],"output":{"name":"tableformat"}}],[11,"deref","","",12,{"inputs":[{"name":"format_no_border"}],"output":{"name":"tableformat"}}],[11,"deref","","",13,{"inputs":[{"name":"format_no_border_line_separator"}],"output":{"name":"tableformat"}}],[11,"eq","prettytable::format","",2,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"eq","","",3,{"inputs":[{"name":"lineposition"},{"name":"lineposition"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"lineposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"lineposition"}],"output":{"name":"lineposition"}}],[11,"eq","","",4,{"inputs":[{"name":"columnposition"},{"name":"columnposition"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"columnposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"columnposition"}],"output":{"name":"columnposition"}}],[11,"fmt","","",14,{"inputs":[{"name":"lineseparator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"lineseparator"}],"output":{"name":"lineseparator"}}],[11,"new","","Create a new line separator instance where `line` is the character used to separate 2 lines\nand `junc` is the one used for junctions between columns and lines",14,{"inputs":[{"name":"char"},{"name":"char"},{"name":"char"},{"name":"char"}],"output":{"name":"lineseparator"}}],[11,"print","","Print a full line separator to `out`. `col_width` is a slice containing the width of each column",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"tableformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"tableformat"}],"output":{"name":"tableformat"}}],[11,"new","","Create a new empty TableFormat.",15,{"inputs":[],"output":{"name":"tableformat"}}],[11,"get_padding","","Return a tuple with left and right padding",15,null],[11,"padding","","Set left and right padding",15,{"inputs":[{"name":"tableformat"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"column_separator","","Set the character used for internal column separation",15,{"inputs":[{"name":"tableformat"},{"name":"char"}],"output":null}],[11,"borders","","Set the character used for table borders",15,{"inputs":[{"name":"tableformat"},{"name":"char"}],"output":null}],[11,"separator","","Set a line separator",15,{"inputs":[{"name":"tableformat"},{"name":"lineposition"},{"name":"lineseparator"}],"output":null}],[11,"separators","","Set format for multiple kind of line separator",15,null],[11,"print_line_separator","","Print a full line separator to `out`. `col_width` is a slice containing the width of each column",15,null],[11,"get_column_separator","","",15,{"inputs":[{"name":"tableformat"},{"name":"columnposition"}],"output":{"name":"option"}}],[11,"print_column_separator","","Print a column separator or a table border",15,{"inputs":[{"name":"tableformat"},{"name":"t"},{"name":"columnposition"}],"output":{"name":"result"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"formatbuilder"}}],[11,"padding","","Set left and right padding",16,{"inputs":[{"name":"formatbuilder"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"column_separator","","Set the character used for internal column separation",16,{"inputs":[{"name":"formatbuilder"},{"name":"char"}],"output":{"name":"self"}}],[11,"borders","","Set the character used for table borders",16,{"inputs":[{"name":"formatbuilder"},{"name":"char"}],"output":{"name":"self"}}],[11,"separator","","Set a line separator format",16,{"inputs":[{"name":"formatbuilder"},{"name":"lineposition"},{"name":"lineseparator"}],"output":{"name":"self"}}],[11,"separators","","Set separator format for multiple kind of line separators",16,null],[11,"build","","Consume this builder and return the generated `TableFormat`",16,{"inputs":[{"name":"formatbuilder"}],"output":{"name":"tableformat"}}],[8,"Slice","prettytable","Trait implemented by types which can be sliced",null,null],[16,"Output","","Type output after slicing",17,null],[10,"slice","","Get a slice from self",17,{"inputs":[{"name":"slice"},{"name":"e"}],"output":{"name":"output"}}],[11,"fmt","","",18,{"inputs":[{"name":"table"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"table"}],"output":{"name":"table"}}],[11,"fmt","","",19,{"inputs":[{"name":"tableslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"tableslice"}}],[11,"get_column_num","","Compute and return the number of column",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"usize"}}],[11,"len","","Get the number of rows",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"usize"}}],[11,"get_row","","Get an immutable reference to a row",19,{"inputs":[{"name":"tableslice"},{"name":"usize"}],"output":{"name":"option"}}],[11,"column_iter","","Returns an iterator over the immutable cells of the column specified by `column`",19,{"inputs":[{"name":"tableslice"},{"name":"usize"}],"output":{"name":"columniter"}}],[11,"row_iter","","Returns an iterator over immutable rows",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"iter"}}],[11,"print","","Print the table to `out`",19,{"inputs":[{"name":"tableslice"},{"name":"t"}],"output":{"name":"result"}}],[11,"print_term","","Print the table to terminal `out`, applying styles when needed",19,{"inputs":[{"name":"tableslice"},{"name":"t"}],"output":{"name":"result"}}],[11,"print_tty","","Print the table to standard output. Colors won&#39;t be displayed unless\nstdout is a tty terminal, or `force_colorize` is set to `true`.\nIn ANSI terminals, colors are displayed using ANSI escape characters. When for example the\noutput is redirected to a file, or piped to another program, the output is considered\nas not beeing tty, and ANSI escape characters won&#39;t be displayed unless `force colorize`\nis set to `true`.\n# Panic\nPanic if writing to standard output fails",19,{"inputs":[{"name":"tableslice"},{"name":"bool"}],"output":null}],[11,"printstd","","Print the table to standard output. Colors won&#39;t be displayed unless\nstdout is a tty terminal. This means that if stdout is redirected to a file, or piped\nto another program, no color will be displayed.\nTo force colors rendering, use `print_tty()` method.\nCalling `printstd()` is equivalent to calling `print_tty(false)`\n# Panic\nPanic if writing to standard output fails",19,{"inputs":[{"name":"tableslice"}],"output":null}],[11,"new","","Create an empty table",18,{"inputs":[],"output":{"name":"table"}}],[11,"init","","Create a table initialized with `rows`",18,{"inputs":[{"name":"vec"}],"output":{"name":"table"}}],[11,"set_format","","Change the table format. Eg : Separators",18,{"inputs":[{"name":"table"},{"name":"tableformat"}],"output":null}],[11,"get_column_num","","Compute and return the number of column",18,{"inputs":[{"name":"table"}],"output":{"name":"usize"}}],[11,"len","","Get the number of rows",18,{"inputs":[{"name":"table"}],"output":{"name":"usize"}}],[11,"set_titles","","Set the optional title lines",18,{"inputs":[{"name":"table"},{"name":"row"}],"output":null}],[11,"unset_titles","","Unset the title line",18,{"inputs":[{"name":"table"}],"output":null}],[11,"get_mut_row","","Get a mutable reference to a row",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_row","","Get an immutable reference to a row",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add_row","","Append a row in the table, transferring ownership of this row to the table\nand returning a mutable reference to the row",18,{"inputs":[{"name":"table"},{"name":"row"}],"output":{"name":"row"}}],[11,"add_empty_row","","Append an empty row in the table. Return a mutable reference to this new row.",18,{"inputs":[{"name":"table"}],"output":{"name":"row"}}],[11,"insert_row","","Insert `row` at the position `index`, and return a mutable reference to this row.\nIf index is higher than current numbers of rows, `row` is appended at the end of the table",18,{"inputs":[{"name":"table"},{"name":"usize"},{"name":"row"}],"output":{"name":"row"}}],[11,"set_element","","Modify a single element in the table",18,{"inputs":[{"name":"table"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"remove_row","","Remove the row at position `index`. Silently skip if the row does not exist",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":null}],[11,"column_iter","","Return an iterator over the immutable cells of the column specified by `column`",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"columniter"}}],[11,"column_iter_mut","","Return an iterator over the mutable cells of the column specified by `column`",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"columnitermut"}}],[11,"row_iter","","Returns an iterator over immutable rows",18,{"inputs":[{"name":"table"}],"output":{"name":"iter"}}],[11,"row_iter_mut","","Returns an iterator over mutable rows",18,{"inputs":[{"name":"table"}],"output":{"name":"itermut"}}],[11,"print","","Print the table to `out`",18,{"inputs":[{"name":"table"},{"name":"t"}],"output":{"name":"result"}}],[11,"print_term","","Print the table to terminal `out`, applying styles when needed",18,{"inputs":[{"name":"table"},{"name":"t"}],"output":{"name":"result"}}],[11,"print_tty","","Print the table to standard output. Colors won&#39;t be displayed unless\nstdout is a tty terminal, or `force_colorize` is set to `true`.\nIn ANSI terminals, colors are displayed using ANSI escape characters. When for example the\noutput is redirected to a file, or piped to another program, the output is considered\nas not beeing tty, and ANSI escape characters won&#39;t be displayed unless `force colorize`\nis set to `true`.\n# Panic\nPanic if writing to standard output fails",18,{"inputs":[{"name":"table"},{"name":"bool"}],"output":null}],[11,"printstd","","Print the table to standard output. Colors won&#39;t be displayed unless\nstdout is a tty terminal. This means that if stdout is redirected to a file, or piped\nto another program, no color will be displayed.\nTo force colors rendering, use `print_tty()` method.\nCalling `printstd()` is equivalent to calling `print_tty(false)`\n# Panic\nPanic if writing to standard output fails",18,{"inputs":[{"name":"table"}],"output":null}],[11,"index","","",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"output"}}],[11,"index","","",19,{"inputs":[{"name":"tableslice"},{"name":"usize"}],"output":{"name":"output"}}],[11,"index_mut","","",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"output"}}],[11,"fmt","","",18,{"inputs":[{"name":"table"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"tableslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"table"}}],[11,"from","","",18,{"inputs":[{"name":"t"}],"output":{"name":"table"}}],[11,"next","","",20,{"inputs":[{"name":"columniter"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"columnitermut"}],"output":{"name":"option"}}],[11,"as_ref","","",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"tableslice"}}],[11,"as_ref","","",18,{"inputs":[{"name":"table"}],"output":{"name":"tableslice"}}],[14,"cell!","","This macro simplifies `Cell` creation",null,null],[14,"row!","","This macro simplifies `Row` creation",null,null],[14,"table!","","Create a table filled with some values",null,null],[14,"ptable!","","Create a table with `table!` macro, print it to standard output, then return this table for future usage.",null,null]],"paths":[[3,"Cell"],[3,"Row"],[4,"Alignment"],[4,"LinePosition"],[4,"ColumnPosition"],[3,"FORMAT_DEFAULT"],[3,"FORMAT_NO_TITLE"],[3,"FORMAT_NO_LINESEP_WITH_TITLE"],[3,"FORMAT_NO_LINESEP"],[3,"FORMAT_NO_COLSEP"],[3,"FORMAT_CLEAN"],[3,"FORMAT_BORDERS_ONLY"],[3,"FORMAT_NO_BORDER"],[3,"FORMAT_NO_BORDER_LINE_SEPARATOR"],[3,"LineSeparator"],[3,"TableFormat"],[3,"FormatBuilder"],[8,"Slice"],[3,"Table"],[3,"TableSlice"],[3,"ColumnIter"],[3,"ColumnIterMut"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"threadlocal"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"threadlocal"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,{"inputs":[{"name":"threadlocal"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,{"inputs":[{"name":"threadlocal"}],"output":{"name":"t"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",1,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",1,{"inputs":[{"name":"cachedthreadlocal"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",1,{"inputs":[{"name":"cachedthreadlocal"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",1,{"inputs":[{"name":"cachedthreadlocal"}],"output":{"name":"t"}}]],"paths":[[3,"ThreadLocal"],[3,"CachedThreadLocal"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect\nwhich terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The &quot;magic&quot; number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not &gt;= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",4,null],[13,"Number","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn&#39;t have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator\nwanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,{"inputs":[{"name":"param"}],"output":{"name":"param"}}],[11,"eq","","",5,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,{"inputs":[{"name":"terminfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_env","","Create a TermInfo based on current environment.",2,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",2,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fg","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"supports_reset","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"bool"}}],[11,"supports_color","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"bool"}}],[11,"cursor_up","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"delete_line","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"carriage_return","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"get_ref","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"get_mut","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"into_inner","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate&#39;s Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal&#39;s output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",8,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is\nsupported and was sent to the terminal, or `Err(e)` if there was an error or the attribute\nwasn&#39;t supported.",8,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"supports_reset","","Returns true if reset is supported.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"bool"}}],[10,"supports_color","","Returns true if color is fully supported.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"bool"}}],[10,"cursor_up","","Moves the cursor up one line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"get_mut","","Gets a mutable reference to the stream inside",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[11,"clone","","",0,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"eq","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","std::io::error","",9,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","term","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"],[3,"Error"]]};
searchIndex["chrono"] = {"doc":"# Chrono 0.2.22","items":[[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",0,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","time","",1,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","time::duration","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","time","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",3,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",3,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",3,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",4,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",4,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",5,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",5,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",5,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",5,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",6,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",6,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",6,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",6,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",7,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week (DOW).",null,null],[13,"Mon","","Monday.",8,null],[13,"Tue","","Tuesday.",8,null],[13,"Wed","","Wednesday.",8,null],[13,"Thu","","Thursday.",8,null],[13,"Fri","","Friday.",8,null],[13,"Sat","","Saturday.",8,null],[13,"Sun","","Sunday.",8,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",9,null],[13,"Single","","Given local time representation has a single unique result.",9,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",9,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don&#39;t need the local time.\nIt is also used as an offset (which is also a dummy type).",null,null],[11,"eq","","",10,{"inputs":[{"name":"utc"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",10,{"inputs":[{"name":"utc"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",10,{"inputs":[{"name":"utc"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",10,{"inputs":[{"name":"utc"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",10,{"inputs":[{"name":"utc"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"local_minus_utc","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"duration"}}],[11,"fmt","","",10,{"inputs":[{"name":"utc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"utc"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"eq","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"local_minus_utc","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"duration"}}],[11,"fmt","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",12,{"inputs":[{"name":"local"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",12,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",12,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",12,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",12,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",12,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",12,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",12,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",12,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",12,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",13,{"inputs":[{"name":"offset"}],"output":{"name":"duration"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.",14,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,{"inputs":[{"name":"timezone"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,{"inputs":[{"name":"timezone"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and\nreturns a `DateTime` with the current offset.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",14,{"inputs":[{"name":"timezone"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",14,{"inputs":[{"name":"offset"}],"output":{"name":"self"}}],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",14,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",14,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",14,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",14,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",14,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"offset"}}],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",14,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"offset"}}],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"fmt","","",9,{"inputs":[{"name":"localresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"localresult"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"localresult"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"localresult"}],"output":{"name":"localresult"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",9,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",9,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",9,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult&lt;T&gt;` into `LocalResult&lt;U&gt;` with given function.",9,{"inputs":[{"name":"localresult"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",9,{"inputs":[{"name":"localresult"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate`.",null,null],[17,"MAX","","The maximum possible `NaiveDate`.",null,null],[11,"clone","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"cmp","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"from_ymd","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",15,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next date.",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next date.",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the prior date.",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the prior date.",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"option"}}],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",15,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",15,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the date with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",15,{"inputs":[{"name":"naivedate"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,{"inputs":[{"name":"naivedate"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"i32"}}],[11,"month","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"month0","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"day","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"day0","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"ordinal","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"ordinal0","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"weekday","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",15,null],[11,"with_year","","",15,{"inputs":[{"name":"naivedate"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",15,{"inputs":[{"name":"naivedate"},{"name":"h"}],"output":null}],[11,"add","","",15,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"sub","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"duration"}}],[11,"sub","","",15,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",15,{"inputs":[{"name":"naivedate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"naivedate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.",null,null],[11,"clone","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"naivetime"}}],[11,"cmp","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",16,{"inputs":[{"name":"naivetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"naivetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"minute","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"second","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",16,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",16,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",16,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",16,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"hash","","",16,{"inputs":[{"name":"naivetime"},{"name":"h"}],"output":null}],[11,"add","","",16,{"inputs":[{"name":"naivetime"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"sub","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"duration"}}],[11,"sub","","",16,{"inputs":[{"name":"naivetime"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",16,{"inputs":[{"name":"naivetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"naivetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"clone","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivedatetime"}}],[11,"cmp","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",17,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).\nNote that this does *not* account for the timezone!",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i64"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i64"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",17,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",17,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",17,{"inputs":[{"name":"naivedatetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"naivedatetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i32"}}],[11,"month","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"month0","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"day","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"day0","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"ordinal","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"ordinal0","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"weekday","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",17,null],[11,"with_year","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"minute","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"second","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"h"}],"output":null}],[11,"add","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"duration"}}],[11,"sub","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",18,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.",18,{"inputs":[{"name":"naivedate"},{"name":"offset"}],"output":{"name":"date"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",18,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",18,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",18,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",18,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",18,{"inputs":[{"name":"date"}],"output":{"name":"offset"}}],[11,"timezone","","Retrieves an associated time zone.",18,{"inputs":[{"name":"date"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).",18,{"inputs":[{"name":"date"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add","","Adds given `Duration` to the current date.",18,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date.",18,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",18,{"inputs":[{"name":"date"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",18,{"inputs":[{"name":"date"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",18,{"inputs":[{"name":"date"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",18,{"inputs":[{"name":"date"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",18,{"inputs":[{"name":"date"}],"output":{"name":"i32"}}],[11,"month","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"month0","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"day","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"day0","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"ordinal","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"ordinal0","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"weekday","","",18,{"inputs":[{"name":"date"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",18,null],[11,"with_year","","",18,{"inputs":[{"name":"date"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",18,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",18,{"inputs":[{"name":"date"},{"name":"h"}],"output":null}],[11,"add","","",18,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"date"}}],[11,"sub","","",18,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"duration"}}],[11,"sub","","",18,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"date"}}],[11,"fmt","","",18,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `TimeZone` trait.",19,{"inputs":[{"name":"naivedatetime"},{"name":"offset"}],"output":{"name":"datetime"}}],[11,"date","","Retrieves a date component.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component.\nUnlike `date`, this is not associated to the time zone.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).",19,{"inputs":[{"name":"datetime"}],"output":{"name":"i64"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"i64"}}],[11,"offset","","Retrieves an associated offset from UTC.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"offset"}}],[11,"timezone","","Retrieves an associated time zone.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `DateTime` (but will change the string representation).",19,{"inputs":[{"name":"datetime"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",19,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",19,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and\nreturns a new `DateTime` with a parsed `FixedOffset`.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",19,{"inputs":[{"name":"datetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"i32"}}],[11,"month","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"month0","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"day","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"day0","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"ordinal","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"ordinal0","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"weekday","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",19,null],[11,"with_year","","",19,{"inputs":[{"name":"datetime"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"minute","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"second","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",19,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",19,{"inputs":[{"name":"datetime"},{"name":"h"}],"output":null}],[11,"add","","",19,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",19,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"sub","","",19,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"fmt","","",19,{"inputs":[{"name":"datetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"datetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",20,null],[13,"Zero","","Zero (`0`) padding.",20,null],[13,"Space","","Space padding.",20,null],[4,"Numeric","","Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",21,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",21,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"Month","","Month (FW=PW=2).",21,null],[13,"Day","","Day of the month (FW=PW=2).",21,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",21,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",21,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",21,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",21,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",21,null],[13,"Ordinal","","Day of the year (FW=PW=3).",21,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",21,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",21,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",21,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",21,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned; see also `Fixed::Nanosecond`.",21,null],[13,"Timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC (FW=1, PW=infinity).\nFor formatting, it assumes UTC upon the absence of time zone offset.",21,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",22,null],[13,"LongMonthName","","Full month names.",22,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",22,null],[13,"LongWeekdayName","","Full day of the week names.",22,null],[13,"LowerAmPm","","AM/PM.",22,null],[13,"UpperAmPm","","AM/PM.",22,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also `Numeric::Nanosecond`.",22,null],[13,"Nanosecond3","","Fixed prescision at Nanosecond3 where 3 is the left aligned accuracy.",22,null],[13,"Nanosecond6","","Fixed prescision at Nanosecond6 where 6 is the left aligned accuracy.",22,null],[13,"Nanosecond9","","Fixed prescision at Nanosecond9 where 9 is the left aligned accuracy.",22,null],[13,"TimezoneName","","Timezone name.",22,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",22,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",22,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",22,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",22,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",22,null],[13,"RFC3339","","RFC 3339 &amp; ISO 8601 date and time syntax.",22,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",23,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",23,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.",23,null],[13,"Fixed","","Fixed-format item.",23,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",23,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items.\nThey can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year. This can be negative unlike `year_{div,mod}_100` fields.",24,null],[12,"year_div_100","","Year divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear","","Year in the ISO week date. This can be negative unlike `isoyear_{div,mod}_100` fields.",24,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"month","","Month (1--12).",24,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",24,null],[12,"weekday","","Day of the week.",24,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",24,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",24,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",24,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",24,null],[12,"minute","","Minute number (0--59).",24,null],[12,"second","","Second number (0--60, accounting for leap seconds).",24,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",24,null],[12,"timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC.",24,null],[12,"offset","","Offset from the local time to UTC, in seconds.",24,null],[11,"fmt","","",24,{"inputs":[{"name":"parsed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"parsed"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"parsed"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",24,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",24,{"inputs":[{"name":"parsed"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields,\nexcept for the `offset` field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.",24,{"inputs":[{"name":"parsed"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.",24,{"inputs":[{"name":"parsed"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",25,{"inputs":[{"name":"strftimeitems"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",25,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",25,{"inputs":[{"name":"strftimeitems"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result&lt;T, ParseError&gt;`.",null,null],[11,"fmt","","",20,{"inputs":[{"name":"pad"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"pad"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"pad"}],"output":{"name":"pad"}}],[11,"fmt","","",21,{"inputs":[{"name":"numeric"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"numeric"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"numeric"}],"output":{"name":"numeric"}}],[11,"fmt","","",22,{"inputs":[{"name":"fixed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"fixed"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"fixed"}],"output":{"name":"fixed"}}],[11,"fmt","","",23,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"eq","","",26,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",26,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",26,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",27,{"inputs":[{"name":"delayedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",27,{"inputs":[{"name":"delayedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",28,null],[10,"month","","Returns the month number starting from 1.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",28,null],[10,"with_year","","Makes a new value with the year number changed.",28,{"inputs":[{"name":"datelike"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",29,null],[10,"minute","","Returns the minute number from 0 to 59.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents the leap second.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",29,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",29,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",29,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",29,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[11,"fmt","","",8,{"inputs":[{"name":"weekday"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"eq","","",8,{"inputs":[{"name":"weekday"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"succ","","The next day in the week.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a DOW number starting from Monday = 1. (ISO 8601 weekday number)",8,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a DOW number starting from Sunday = 1.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a DOW number starting from Monday = 0.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a DOW number starting from Sunday = 0.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"from_i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[3,"Duration"],[3,"TmFmt"],[3,"OutOfRangeError"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["terminal_size"] = {"doc":"A simple utility for getting the size of a terminal.","items":[[3,"Width","terminal_size","",null,null],[12,"0","","",0,null],[3,"Height","","",null,null],[12,"0","","",1,null],[5,"terminal_size","","Returns the size of the terminal, if available.",null,{"inputs":[],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"width"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"height"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Width"],[3,"Height"]]};
searchIndex["clap"] = {"doc":"A simple to use, efficient, and full featured library for parsing command line arguments and subcommands when writing console, or terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and\nrelationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related arguments and way for you to express, &quot;Any of these\narguments&quot;. By placing arguments in a logical group, you can create easier requirement and\nexclusion rules instead of having to list each argument individually, or when you want a rule\nto apply &quot;any but not all&quot; arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by\nthe user. New instances of this struct are obtained by using the `App::get_matches` family of\nmethods.",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line\narguments. Application settings are set using the &quot;builder pattern&quot; with the\n`.get_matches()` family of methods being the terminal methods that starts the runtime-parsing\nprocess. These methods then return information about the user supplied arguments (or lack there\nof).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"AppSettings","","Application level settings, which affect how `App` operates",null,null],[13,"SubcommandsNegateReqs","","Allows subcommands to override all requirements of the parent command. For example\nif you had a subcommand or top level application which had a required argument that\nare only required as long as there is no subcommand present, using this setting would allow\nyou set those arguments to `required(true)` and yet receive no error so long as the user\nuses a valid subcommand instead.",1,null],[13,"SubcommandRequired","","Allows specifying that if no subcommand is present at runtime, error and exit gracefully",1,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no\narguments are present at runtime (i.e. an empty run such as, `$ myprog`.",1,null],[13,"GlobalVersion","","Specifies to version of the current command for all child subcommands. (Defaults to false;\nsubcommands have independant version strings from their parents)",1,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all subcommands (Defaults to false; subcommands have\nversion flags)",1,null],[13,"UnifiedHelpMessage","","Groups flags and options together presenting a more unified help message (a la `getopts` or\n`docopt` style). The default is the auto-generated help message groups flags, options\nseparately.",1,null],[13,"WaitOnError","","Will display a message &quot;Press [ENTER]/[RETURN] to continue...&quot; and wait user before\nexiting",1,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no\nsubcommands are present at runtime (i.e. an empty run such as, `$ myprog`.",1,null],[13,"Hidden","","Specifies that this subcommand should be hidden from help messages",1,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a &quot;VarArg&quot; and that `clap` should not\nattempt to parse any further args.",1,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name.\nThis is normally the case when using a &quot;daemon&quot; style mode, or an interactive CLI where one\none would not normally type the binary or program name for each command.",1,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected argument positional arguments which would otherwise cause a\n`ErrorKind::UnknownArgument` error, should instead be treated as a subcommand in the\n`ArgMatches` struct.",1,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail\nwith a `ErrorKind::InvalidUtf8` error.",1,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should *not* be treated as an error. This is\nthe default behavior of `clap`",1,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument *values*, such as negative numbers\n`-10`",1,null],[13,"HidePossibleValuesInHelp","","Tells `clap` *not* to print possible values when displaying help information. This can be\nuseful if there are many values, or they are explained elsewhere.",1,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument",1,null],[13,"DeriveDisplayOrder","","Displays the arguments and subcommands in the help message in the order that they were\ndeclared in, vice alphabetically which is the default.",1,null],[13,"ColoredHelp","","Uses colorized help messages.",1,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an `Arg` has a set of possible values, and the user provides a value which\nisn&#39;t in that set.",2,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, or argument which wasn&#39;t defined.",2,null],[13,"InvalidSubcommand","","Occurs when the user provids an unrecognized subcommand which meets the threshold for being\nsimilar enough to an existing subcommand so as to not cause the more general\n`UnknownArgument` error.",2,null],[13,"UnrecognizedSubcommand","","Occurs when the user provids an unrecognized subcommand which does not meet the threshold\nfor being similar enough to an existing subcommand so as to not cause the more detailed\n`InvalidSubcommand` error.",2,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty\nvalues.",2,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the\nvalue fails that validation.",2,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting\n`Arg::max_values`.",2,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting\n`Arg::min_values`.",2,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what&#39;s\nbeen defined by setting `Arg::number_of_values` or than was implicitly set by\n`Arg::value_names`.",2,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can&#39;t be used\ntogether.",2,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",2,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by `AppSettings::SubcommandRequired`), but\nthe user does not provide one.",2,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or subcommand is required, as defined by\n`AppSettings::ArgRequiredElseHelp` but the user did not provide one.",2,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides an argument multiple times which has not been set to allow\nmultiple uses.",2,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and\n`AppSettings::StrictUtf8` is set.",2,null],[13,"HelpDisplayed","","Not a true &quot;error&quot; as it means `--help` or similar was used. The help message will be sent\nto `stdout`.",2,null],[13,"VersionDisplayed","","Not a true &quot;error&quot; as it means `--version` or similar was used. The message will be sent\nto `stdout`.",2,null],[13,"ArgumentNotFound","","Occurs when using the `value_t!` and `values_t!` macros to convert an argument value into\ntype `T`, but the argument you requested wasn&#39;t used. I.e. you asked for an argument with\nname `config` to be converted, but `config` wasn&#39;t used by the user.",2,null],[13,"Io","","Represents an I/O error, typically while writing to `stderr` or `stdout`.",2,null],[13,"Format","","Represents an Rust Display Format error, typically white writing to `stderr` or `stdout`.",2,null],[11,"clone","","",1,{"inputs":[{"name":"appsettings"}],"output":{"name":"appsettings"}}],[11,"eq","","",1,{"inputs":[{"name":"appsettings"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"appsettings"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn&#39;t\nhave to be same as the binary. The name will be displayed to the user when they request to\nprint version or help and usage information.",3,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they\nrequest the help information with `--help` or `-h`.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely\nneccessary, such as when the binary name for your application is misleading, or perhaps\n*not* how the user should invoke your program.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help\ninformation.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This\ninformation is displayed **after** the auto-generated help information. This is often used\nto describe how to use the arguments, or caveats to be noted.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This\ninformation is displayed **before** the auto-generated help information. This is often used\nfor header information.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help\ninformation.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used\nwhen the auto-generated message does not suffice.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the short version of the `help` argument without the preceding `-`.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the short version of the `version` argument without the preceding `-`.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",3,{"inputs":[{"name":"app"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single Application level settings.",3,{"inputs":[{"name":"app"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple Application level settings",3,null],[11,"arg","","Adds an argument to the list of valid possibilties.",3,{"inputs":[{"name":"app"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple arguments to the list of valid possibilties",3,null],[11,"arg_from_usage","","A convienience method for adding a single argument from a usage type string. The string\nused follows the same rules and syntax as `Arg::from_usage()`",3,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple arguments at once from a usage string, one per line. See `Arg::from_usage()`\nfor details on the syntax and rules supported.",3,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"group","","Adds an `ArgGroup` to the application. `ArgGroup`s are a family of related arguments. By\nplacing them in a logical group, you can build easier requirement and exclusion rules. For\ninstance, you can make an entire `ArgGroup` required, meaning that one (and *only* one)\nargument from that group must be present at runtime.",3,{"inputs":[{"name":"app"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple `ArgGroup`s to the application at once.",3,null],[11,"subcommand","","Adds a subcommand to the list of valid possibilties. Subcommands are effectively sub-apps,\nbecause they can contain their own arguments, subcommands, version, usage, etc. They also\nfunction just like apps, in that they get their own auto generated help, version, and\nusage.",3,{"inputs":[{"name":"app"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilties by iterating over a Vec of\n`SubCommand`s",3,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of subcommands within the help message. Subcommands with a lower\nvalue will be displayed first in the help message. This is helpful when one would like to\nemphasise frequently used subcommands, or prioritize those towards the top of the list.\nDuplicate values **are** allowed. Subcommands with duplicate display orders will be\ndisplayed in alphabetical order.",3,{"inputs":[{"name":"app"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to `io::stdout()` using a `BufWriter`",3,{"inputs":[{"name":"app"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a `io::Write` object",3,{"inputs":[{"name":"app"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and\nthe process with exit with the appropriate error code. By default this method gets matches\nfrom `env::args_os`",3,{"inputs":[{"name":"app"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a `Result` type instead of exiting the\nthe process on failed parse. By default this method gets matches\nfrom `env::args_os`",3,{"inputs":[{"name":"app"}],"output":{"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like `App::get_matches` this method does not return a `Result`\nand will automatically exit with an error message. This method, however, lets you specify\nwhat iterator to use when performing matches, such as a `Vec` of your making.",3,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of `App::get_matches_from`, and\n`App::get_matches_safe`",3,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the `App` struct `self`. This is normally not\nthe desired functionality, instead prefer `App::get_matches_from_safe` which *does*\nconsume `self`.",3,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"clone","","",3,{"inputs":[{"name":"app"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"app"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"with_name","","Creates a new instance of `Arg` using a unique string name. The name will be used to get\ninformation about whether or not the argument was used at runtime, get values, set\nrelationships with other args, etc..",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of `Arg` from a usage string. Allows creation of basic settings for\nthe `Arg`. The syntax is flexible, but there are some rules to follow.",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",4,{"inputs":[{"name":"arg"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","Sets the help text of the argument that will be displayed to the user when they print the\nusage/help information.",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is\nrequired, when no other conflicting rules have been evaluated. Conflicting rules take\nprecedence over being required. **Default:** `false`",4,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg&#39;s required setting. (i.e. this arg will be required\nunless this other argument is present).",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg&#39;s required setting. (i.e. this arg will be required unless\nall these other argument are present).",4,null],[11,"required_unless_one","","Sets args that override this arg&#39;s required setting. (i.e. this arg will be required unless\n*at least one of* these other argument are present).",4,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument,\nthe following argument can&#39;t be present and vice versa.",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as `Arg::conflicts_with` but allows specifying multiple two-way conlicts per\nargument.",4,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument\nwill override each other in POSIX style (whichever argument was specified at runtime\n**last** &quot;wins&quot;)",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following\nargument will override each other in POSIX style (whichever argument was specified at\nruntime **last** &quot;wins&quot;)",4,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when\nusing this argument, the following argument *must* be present.",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when\nusing this argument, the following arguments *must* be present.",4,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",4,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument **starting at** 1.",4,{"inputs":[{"name":"arg"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results\nin the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d`\nwould count as three occurrences. For options there is a distinct difference in multiple\noccurrences vs multiple values.",4,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child subcommands.",4,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at\nthe command line with an explicit `&quot;&quot;`, or `&#39;&#39;`",4,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",4,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only\none of the specified values was used, or fails with an error message.",4,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies\nthat only one of the specified values was used, or fails with error message.",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the group the argument belongs to.",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted exactly 3 &#39;files&#39; you would set\n`.number_of_values(3)`, and this argument wouldn&#39;t be satisfied unless the user provided\n3 and only 3 values.",4,{"inputs":[{"name":"arg"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which\naccepts a `String` value, a `Result` where the `Err(String)` is a message displayed to the\nuser.",4,{"inputs":[{"name":"arg"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the *maximum* number of values are for this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted up to 3 &#39;files&#39; you would set\n`.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3\nvalues.",4,{"inputs":[{"name":"arg"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the *minimum* number of values are for this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted at least 2 &#39;files&#39; you would set\n`.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\nvalues.",4,{"inputs":[{"name":"arg"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an arugment should allow grouping of multiple values via a\ndelimter. I.e. shoulde `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\nand `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\nvalue delimiter for all arguments that accept values (options and positional arguments)",4,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used\nfor help and usage strings only. The names are **not** used to access arguments. The values\nof the arguments are accessed in numeric order (i.e. if you specify two names `one` and\n`two` `one` will be the first matched value, `two` will be the second).",4,null],[11,"value_name","","Specifies the name for value of option or positional arguments inside of help documenation.\nThis name is cosmetic only, the name is **not** used to access arguments. This setting can\nbe very helpful when describing the type of input the user should be using, such as `FILE`,\n`INTERFACE`, etc. Although not required, it&#39;s somewhat convention to use all capital\nletters for the value name.",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when *not* specified at runtime.",4,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and\nindented once. This can be helpful for arguments with very long or complex help messages.\nThis can also be helpful for arguments with very long flag names, or many/long value names.",4,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be\ndisplayed first in the help message. This is helpful when one would like to emphasise\nfrequently used args, or prioritize those towards the top of the list. Duplicate values\n**are** allowed. Args with duplicate display orders will be displayed in alphabetical\norder.",4,{"inputs":[{"name":"arg"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the `ArgSettings` settings is set for the argument",4,{"inputs":[{"name":"arg"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the `ArgSettings` settings for the argument",4,{"inputs":[{"name":"arg"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the `ArgSettings` settings for the argument",4,{"inputs":[{"name":"arg"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"argmatches"}],"output":{"name":"argmatches"}}],[11,"fmt","","",5,{"inputs":[{"name":"argmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific option or positional argument (i.e. an argument that takes\nan additional value at runtime). If the option wasn&#39;t present at runtime\nit returns `None`.",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn&#39;t present at runtime\nit returns `None`. A lossy value is one which contains invalid UTF-8 code points, those\ninvalid points will be replaced with `\\u{FFFD}`",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn&#39;t present\nat runtime it returns `None`. An OS value on Unix-like systems is any series of bytes,\nregardless of whether or not they contain valid UTF-8 code points. Since `String`s in Rust\nare guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may\ncontain invalid UTF-8 code points.",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of","","Gets an Iterator of values of a specific argument (i.e. an argument that takes multiple\nvalues at runtime). If the option wasn&#39;t present at runtime it returns `None`",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument If the option wasn&#39;t present at runtime\nit returns `None`. A lossy value is one which contains invalid UTF-8 code points, those\ninvalid points will be replaced with `\\u{FFFD}`",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of_os","","Gets the OS version of a string value of a specific argument If the option wasn&#39;t present\nat runtime it returns `None`. An OS value on Unix-like systems is any series of bytes,\nregardless of whether or not they contain valid UTF-8 code points. Since `String`s in Rust\nare guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for\nexample) may contain invalid UTF-8 code points.",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn&#39;t present\nit will return `0`.",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"u64"}}],[11,"subcommand_matches","","Because subcommands are essentially &quot;sub-apps&quot; they have their own `ArgMatches` as well.\nThis method returns the `ArgMatches` for a particular subcommand or None if the subcommand\nwasn&#39;t present at runtime.",5,{"inputs":[{"name":"argmatches"},{"name":"s"}],"output":{"name":"option"}}],[11,"subcommand_name","","Because subcommands are essentially &quot;sub-apps&quot; they have their own `ArgMatches` as well.\nBut simply getting the sub-`ArgMatches` doesn&#39;t help much if we don&#39;t also know which\nsubcommand was actually used. This method returns the name of the subcommand that was used\nat runtime, or `None` if one wasn&#39;t.",5,{"inputs":[{"name":"argmatches"}],"output":{"name":"option"}}],[11,"subcommand","","This brings together `ArgMatches::subcommand_matches` and `ArgMatches::subcommand_name` by\nreturning a tuple with both pieces of information.",5,null],[11,"usage","","Returns a string slice of the usage statement for the `App` (or `SubCommand`)",5,{"inputs":[{"name":"argmatches"}],"output":{"name":"str"}}],[11,"clone","","",6,{"inputs":[{"name":"subcommand"}],"output":{"name":"subcommand"}}],[11,"fmt","","",6,{"inputs":[{"name":"subcommand"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed\nto the user when they print version or help and usage information.",6,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to\nget values from the group or refer to the group inside of conflict and requirement rules.",7,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an argument to this group by name",7,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple arguments to this group by name",7,null],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string\nof the application in the format `[arg|arg2|arg3]`. A required `ArgGroup` simply states\nthat one, and only one argument from this group *must* be present at runtime (unless\nconflicting with another argument).",7,{"inputs":[{"name":"arggroup"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a required group.\nRequirement rules function just like argument requirement rules, you can name other\narguments or groups that must be present when one of the arguments from this group is used.",7,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a required group.\nRequirement rules function just like argument requirement rules, you can name other\narguments or groups that must be present when one of the arguments from this group is used.",7,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like\nargument exclusion rules, you can name other arguments or groups that must not be present\nwhen one of the arguments from this group are used.",7,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like argument\nexclusion rules, you can name other arguments or groups that must not be present when one\nof the arguments from this group are used.",7,null],[11,"fmt","","",7,{"inputs":[{"name":"arggroup"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"eq","","",2,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"fmt","","",2,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,{"inputs":[{"name":"error"}],"output":null}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[6,"Result","","Short hand for result type",null,null],[14,"value_t!","","Convenience macro getting a typed value `T` where `T` implements `std::str::FromStr` from an\nargument value. This macro returns a `Result&lt;T,String&gt;` which allows you as the developer to\ndecide what you&#39;d like to do on a failed parse. There are two types of errors, parse failures\nand those where the argument wasn&#39;t present (such as a non-required argument). You can use\nit to get a single value, or a iterator as with the `ArgMatches::values_of`",null,null],[14,"value_t_or_exit!","","Convenience macro getting a typed value `T` where `T` implements `std::str::FromStr` or\nexiting upon error instead of returning a `Result`",null,null],[14,"values_t!","","Convenience macro getting a typed value `Vec&lt;T&gt;` where `T` implements `std::str::FromStr` This\nmacro returns a `clap::Result&lt;Vec&lt;T&gt;&gt;` (`Result&lt;Vec&lt;T&gt;, clap::Error&gt;`) which allows you as the\ndeveloper to decide what you&#39;d like to do on a failed parse.",null,null],[14,"values_t_or_exit!","","Convenience macro getting a typed value `Vec&lt;T&gt;` where `T` implements `std::str::FromStr` or\nexiting upon error.",null,null],[14,"_clap_count_exprs!","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time\nevaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum!","","Convenience macro to generate more complete enums with variants to be used as a type when\nparsing arguments. This enum also provides a `variants()` function which can be used to\nretrieve a `Vec&lt;&amp;&#39;static str&gt;` of the variant names, as well as implementing `FromStr` and\n`Display` automatically.",null,null],[14,"crate_version!","","Allows you to pull the version from your Cargo.toml at compile time as\nMAJOR.MINOR.PATCH_PKGVERSION_PRE",null,null]],"paths":[[3,"Error"],[4,"AppSettings"],[4,"ErrorKind"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question\n&gt; is this a tty?","items":[[5,"is","atty","returns true if this is a tty",null,{"inputs":[],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is _not_ a tty",null,{"inputs":[],"output":{"name":"bool"}}]],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["maplit"] = {"doc":"Macros for container literals with specific type.","items":[[14,"hashmap!","maplit","Create a **HashMap** from a list of key-value pairs",null,null],[14,"hashset!","","Create a **HashSet** from a list of elements.",null,null],[14,"btreemap!","","Create a **BTreeMap** from a list of key-value pairs",null,null],[14,"btreeset!","","Create a **BTreeSet** from a list of elements.",null,null]],"paths":[]};
searchIndex["currency"] = {"doc":"A `Currency` is a combination of an optional character (`Option&lt;char&gt;``) and a big integer\n(`BigInt`).","items":[[3,"Currency","currency","Represents currency through an optional symbol and amount of coin.",null,null],[3,"ParseCurrencyError","","",null,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"currency"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"currency"}],"output":{"name":"currency"}}],[11,"fmt","","",0,{"inputs":[{"name":"currency"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a blank Currency with no symbol and 0 coin.",0,{"inputs":[],"output":{"name":"self"}}],[11,"symbol","","Builder pattern initialization of symbol.",0,{"inputs":[{"name":"currency"},{"name":"char"}],"output":{"name":"self"}}],[11,"coin","","Builder pattern initialization of valu.",0,{"inputs":[{"name":"currency"},{"name":"i"}],"output":{"name":"option"}}],[11,"from_str","","Parses a string literal (&amp;str) and attempts to convert it into a currency. Returns\n`Ok(Currency)` on a successful conversion, otherwise `Err(ParseCurrencyError)`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"sign","","Returns the `Sign` of the `BigInt` holding the coins.",0,{"inputs":[{"name":"currency"}],"output":{"name":"sign"}}],[11,"value","","Returns the number of coins held in the `Currency` as `&amp;BigInt`.",0,{"inputs":[{"name":"currency"}],"output":{"name":"bigint"}}],[11,"convert","","Returns a new `Currency` by multiplying the coin by the conversion rate and changing the\nsymbol.",0,{"inputs":[{"name":"currency"},{"name":"f64"},{"name":"char"}],"output":{"name":"currency"}}],[11,"fmt","","",0,{"inputs":[{"name":"currency"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"parsecurrencyerror"},{"name":"parsecurrencyerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsecurrencyerror"},{"name":"parsecurrencyerror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"parsecurrencyerror"}],"output":{"name":"parsecurrencyerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsecurrencyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsecurrencyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsecurrencyerror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"currency"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"currency"}}],[11,"add","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"currency"}}],[11,"sub","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"currency"}}],[11,"sub","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"biguint"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"biguint"}],"output":{"name":"currency"}}],[11,"mul","num_bigint","",2,{"inputs":[{"name":"biguint"},{"name":"currency"}],"output":{"name":"currency"}}],[11,"mul","","",2,{"inputs":[{"name":"biguint"},{"name":"currency"}],"output":{"name":"currency"}}],[11,"mul","currency","",0,{"inputs":[{"name":"currency"},{"name":"u8"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"u8"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"u16"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"u16"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"u32"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"u32"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"u64"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"u64"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"usize"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"usize"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"i8"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"i8"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"i16"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"i16"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"i32"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"i32"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"i64"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"i64"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"isize"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"isize"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"biguint"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"biguint"}],"output":{"name":"currency"}}],[11,"div","num_bigint","",2,{"inputs":[{"name":"biguint"},{"name":"currency"}],"output":{"name":"currency"}}],[11,"div","","",2,{"inputs":[{"name":"biguint"},{"name":"currency"}],"output":{"name":"currency"}}],[11,"div","currency","",0,{"inputs":[{"name":"currency"},{"name":"u8"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"u8"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"u16"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"u16"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"u32"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"u32"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"u64"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"u64"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"usize"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"usize"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"i8"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"i8"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"i16"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"i16"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"i32"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"i32"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"i64"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"i64"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"isize"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"isize"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"f32"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"f32"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"f64"}],"output":{"name":"currency"}}],[11,"mul","","",0,{"inputs":[{"name":"currency"},{"name":"f64"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"f32"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"f32"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"f64"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"f64"}],"output":{"name":"currency"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"currency"},{"name":"currency"}],"output":{"name":"bigint"}}],[11,"neg","","",0,{"inputs":[{"name":"currency"}],"output":{"name":"currency"}}]],"paths":[[3,"Currency"],[3,"ParseCurrencyError"],[3,"BigUint"]]};
searchIndex["git2"] = {"doc":"# libgit2 bindings for Rust","items":[[3,"Blame","git2","Opaque structure to hold blame results.",null,null],[3,"BlameHunk","","Structure that represents a blame hunk.",null,null],[3,"BlameIter","","An iterator over the hunks in a blame.",null,null],[3,"BlameOptions","","Blame options",null,null],[3,"Blob","","A structure to represent a git [blob][1]",null,null],[3,"Branch","","A structure to represent a git [branch][1]",null,null],[3,"Branches","","An iterator over the branches inside of a repository.",null,null],[3,"Buf","","A structure to wrap an intermediate buffer used by libgit2.",null,null],[3,"Commit","","A structure to represent a git [commit][1]",null,null],[3,"Parents","","An iterator over the parent commits of a commit.",null,null],[3,"Config","","A structure representing a git configuration key/value store",null,null],[3,"ConfigEntry","","A struct representing a certain entry owned by a `Config` instance.",null,null],[3,"ConfigEntries","","An iterator over the `ConfigEntry` values of a `Config` structure.",null,null],[3,"Cred","","A structure to represent git credentials in libgit2.",null,null],[3,"CredentialHelper","","Management of the gitcredentials(7) interface.",null,null],[12,"username","","A public field representing the currently discovered username from\nconfiguration.",0,null],[3,"Describe","","The result of a `describe` operation on either an `Describe` or a\n`Repository`.",null,null],[3,"DescribeFormatOptions","","Options which can be used to customize how a description is formatted.",null,null],[3,"DescribeOptions","","Options which indicate how a `Describe` is created.",null,null],[3,"Diff","","The diff object that contains all individual file deltas.",null,null],[3,"DiffDelta","","Description of changes to one entry.",null,null],[3,"DiffFile","","Description of one side of a delta.",null,null],[3,"DiffOptions","","Structure describing options about how the diff should be executed.",null,null],[3,"Deltas","","An iterator over the diffs in a delta",null,null],[3,"DiffLine","","Structure describing a line (or data span) of a diff.",null,null],[3,"DiffHunk","","Structure describing a hunk of a diff.",null,null],[3,"DiffStats","","Structure describing a hunk of a diff.",null,null],[3,"DiffFindOptions","","Control behavior of rename and copy detection",null,null],[3,"DiffBinary","","Structure describing the binary contents of a diff.",null,null],[3,"DiffBinaryFile","","The contents of one of the files in a binary diff.",null,null],[3,"AnnotatedCommit","","A structure to represent an annotated commit, the input to merge and rebase.",null,null],[3,"MergeOptions","","Options to specify when merging.",null,null],[3,"Error","","A structure to represent errors coming out of libgit2.",null,null],[3,"Index","","A structure to represent a git [index][1]",null,null],[3,"IndexEntry","","A structure to represent an entry or a file inside of an index.",null,null],[12,"ctime","","",1,null],[12,"mtime","","",1,null],[12,"dev","","",1,null],[12,"ino","","",1,null],[12,"mode","","",1,null],[12,"uid","","",1,null],[12,"gid","","",1,null],[12,"file_size","","",1,null],[12,"id","","",1,null],[12,"flags","","",1,null],[12,"flags_extended","","",1,null],[12,"path","","",1,null],[3,"IndexEntries","","An iterator over the entries in an index",null,null],[3,"Note","","A structure representing a [note][note] in git.",null,null],[3,"Notes","","An iterator over all of the notes within a repository.",null,null],[3,"Object","","A structure to represent a git [object][1]",null,null],[3,"Oid","","Unique identity of any object (commit, tree, blob, tag).",null,null],[3,"Pathspec","","Structure representing a compiled pathspec used for matching against various\nstructures.",null,null],[3,"PathspecMatchList","","List of filenames matching a pathspec.",null,null],[3,"PathspecFailedEntries","","Iterator over the failed list of pathspec items that did not match.",null,null],[3,"PathspecDiffEntries","","Iterator over the matching diff deltas.",null,null],[3,"PathspecEntries","","Iterator over the matched paths in a pathspec.",null,null],[3,"Reference","","A structure to represent a git [reference][1].",null,null],[3,"References","","An iterator over the references in a repository.",null,null],[3,"ReferenceNames","","An iterator over the names of references in a repository.",null,null],[3,"Reflog","","A reference log of a git repository.",null,null],[3,"ReflogEntry","","An entry inside the reflog of a repository",null,null],[3,"ReflogIter","","An iterator over the entries inside of a reflog.",null,null],[3,"Refspec","","A structure to represent a git [refspec][1].",null,null],[3,"Remote","","A structure representing a [remote][1] of a git repository.",null,null],[3,"Refspecs","","An iterator over the refspecs that a remote contains.",null,null],[3,"RemoteHead","","Description of a reference advertised bya remote server, given out on calls\nto `list`.",null,null],[3,"FetchOptions","","Options which can be specified to various fetch operations.",null,null],[3,"PushOptions","","Options to control the behavior of a git push.",null,null],[3,"RemoteCallbacks","","A structure to contain the callbacks which are invoked when a repository is\nbeing updated or downloaded.",null,null],[3,"Progress","","Struct representing the progress by an in-flight transfer.",null,null],[3,"Repository","","An owned git repository, representing all state associated with the\nunderlying filesystem.",null,null],[3,"RepositoryInitOptions","","Options which can be used to configure how a repository is initialized",null,null],[3,"Revspec","","A revspec represents a range of revisions within a repository.",null,null],[3,"Revwalk","","A revwalk allows traversal of the commit graph defined by including one or\nmore leaves and excluding one or more roots.",null,null],[3,"Signature","","A Signature is used to indicate authorship of various actions throughout the\nlibrary.",null,null],[3,"StatusOptions","","Options that can be provided to `repo.statuses()` to control how the status\ninformation is gathered.",null,null],[3,"Statuses","","A container for a list of status information about a repository.",null,null],[3,"StatusIter","","An iterator over the statuses in a `Statuses` instance.",null,null],[3,"StatusEntry","","A structure representing an entry in the `Statuses` structure.",null,null],[3,"Submodule","","A structure to represent a git [submodule][1]",null,null],[3,"Tag","","A structure to represent a git [tag][1]",null,null],[3,"Time","","Time in a signature",null,null],[3,"IndexTime","","Time structure used in a git index entry.",null,null],[3,"Tree","","A structure to represent a git [tree][1]",null,null],[3,"TreeEntry","","A structure representing an entry inside of a tree. An entry is borrowed\nfrom a tree.",null,null],[3,"TreeIter","","An iterator over the entries in a tree.",null,null],[3,"TreeBuilder","","Constructor for in-memory trees",null,null],[3,"Sort","","",null,null],[3,"CredentialType","","",null,null],[3,"IndexAddOption","","",null,null],[3,"RepositoryOpenFlags","","",null,null],[3,"RevparseMode","","",null,null],[3,"Status","","Status flags for a single file",null,null],[3,"RepositoryInitMode","","",null,null],[3,"SubmoduleStatus","","",null,null],[3,"PathspecFlags","","...",null,null],[3,"DiffStatsFormat","","Formatting options for diff stats",null,null],[4,"DiffBinaryKind","","When producing a binary diff, the binary data returned will be\neither the deflated full (&quot;literal&quot;) contents of the file, or\nthe deflated binary delta between the two sides (whichever is\nsmaller).",null,null],[13,"None","","There is no binary delta",2,null],[13,"Literal","","The binary data is the literal contents of the file",2,null],[13,"Delta","","The binary data is the delta from one side to the other",2,null],[4,"StatusShow","","Enumeration of possible methods of what can be shown through a status\noperation.",null,null],[13,"Index","","Only gives status based on HEAD to index comparison, not looking at\nworking directory changes.",3,null],[13,"Workdir","","Only gives status based on index to working directory comparison, not\ncomparing the index to the HEAD.",3,null],[13,"IndexAndWorkdir","","The default, this roughly matches `git status --porcelain` regarding\nwhich files are included and in what order.",3,null],[4,"ErrorCode","","An enumeration of possible errors that can happen when working with a git\nrepository.",null,null],[13,"GenericError","","Generic error",4,null],[13,"NotFound","","Requested object could not be found",4,null],[13,"Exists","","Object exists preventing operation",4,null],[13,"Ambiguous","","More than one object matches",4,null],[13,"BufSize","","Output buffer too short to hold data",4,null],[13,"User","","User-generated error",4,null],[13,"BareRepo","","Operation not allowed on bare repository",4,null],[13,"UnbornBranch","","HEAD refers to branch with no commits",4,null],[13,"Unmerged","","Merge in progress prevented operation",4,null],[13,"NotFastForward","","Reference was not fast-forwardable",4,null],[13,"InvalidSpec","","Name/ref spec was not in a valid format",4,null],[13,"Conflict","","Checkout conflicts prevented operation",4,null],[13,"Locked","","Lock file prevented operation",4,null],[13,"Modified","","Reference value does not match expected",4,null],[13,"Auth","","Authentication error",4,null],[13,"Certificate","","Server certificate is invalid",4,null],[13,"Applied","","Patch/merge has already been applied",4,null],[13,"Peel","","The requested peel operation is not possible",4,null],[13,"Eof","","Unexpected EOF",4,null],[13,"Invalid","","Invalid operation or input",4,null],[13,"Uncommitted","","Uncommitted changes in index prevented operation",4,null],[13,"Directory","","Operation was not valid for a directory,",4,null],[4,"ErrorClass","","An enumeration of possible categories of things that can have\nerrors when working with a git repository.",null,null],[13,"None","","Uncategorized",5,null],[13,"NoMemory","","Out of memory or insufficient allocated space",5,null],[13,"Os","","Syscall or standard system library error",5,null],[13,"Invalid","","Invalid input",5,null],[13,"Reference","","Error resolving or manipulating a reference",5,null],[13,"Zlib","","ZLib failure",5,null],[13,"Repository","","Bad repository state",5,null],[13,"Config","","Bad configuration",5,null],[13,"Regex","","Regex failure",5,null],[13,"Odb","","Bad object",5,null],[13,"Index","","Invalid index data",5,null],[13,"Object","","Error creating or obtaining an object",5,null],[13,"Net","","Network error",5,null],[13,"Tag","","Error manpulating a tag",5,null],[13,"Tree","","Invalid value in tree",5,null],[13,"Indexer","","Hashing or packing error",5,null],[13,"Ssl","","Error from SSL",5,null],[13,"Submodule","","Error involing submodules",5,null],[13,"Thread","","Threading error",5,null],[13,"Stash","","Error manipulating a stash",5,null],[13,"Checkout","","Checkout failure",5,null],[13,"FetchHead","","Invalid FETCH_HEAD",5,null],[13,"Merge","","Merge failure",5,null],[13,"Ssh","","SSH failure",5,null],[13,"Filter","","Error manipulating filters",5,null],[13,"Revert","","Error reverting commit",5,null],[13,"Callback","","Error from a user callback",5,null],[13,"CherryPick","","Error cherry-picking commit",5,null],[13,"Describe","","Can&#39;t describe object",5,null],[13,"Rebase","","Error during rebase",5,null],[13,"Filesystem","","Filesystem-related error",5,null],[4,"RepositoryState","","A listing of the possible states that a repository can be in.",null,null],[13,"Clean","","",6,null],[13,"Merge","","",6,null],[13,"Revert","","",6,null],[13,"RevertSequence","","",6,null],[13,"CherryPick","","",6,null],[13,"CherryPickSequence","","",6,null],[13,"Bisect","","",6,null],[13,"Rebase","","",6,null],[13,"RebaseInteractive","","",6,null],[13,"RebaseMerge","","",6,null],[13,"ApplyMailbox","","",6,null],[13,"ApplyMailboxOrRebase","","",6,null],[4,"Direction","","An enumeration of the possible directions for a remote.",null,null],[13,"Fetch","","Data will be fetched (read) from this remote.",7,null],[13,"Push","","Data will be pushed (written) to this remote.",7,null],[4,"ResetType","","An enumeration of the operations that can be performed for the `reset`\nmethod on a `Repository`.",null,null],[13,"Soft","","Move the head to the given commit.",8,null],[13,"Mixed","","Soft plus reset the index to the commit.",8,null],[13,"Hard","","Mixed plus changes in the working tree are discarded.",8,null],[4,"ObjectType","","An enumeration all possible kinds objects may have.",null,null],[13,"Any","","Any kind of git object",9,null],[13,"Commit","","An object which corresponds to a git commit",9,null],[13,"Tree","","An object which corresponds to a git tree",9,null],[13,"Blob","","An object which corresponds to a git blob",9,null],[13,"Tag","","An object which corresponds to a git tag",9,null],[4,"BranchType","","An enumeration for the possible types of branches",null,null],[13,"Local","","A local branch not on a remote.",10,null],[13,"Remote","","A branch for a remote.",10,null],[4,"ConfigLevel","","An enumeration of the possible priority levels of a config file.",null,null],[13,"ProgramData","","System-wide on Windows, for compatibility with portable git",11,null],[13,"System","","System-wide configuration file, e.g. /etc/gitconfig",11,null],[13,"XDG","","XDG-compatible configuration file, e.g. ~/.config/git/config",11,null],[13,"Global","","User-specific configuration, e.g. ~/.gitconfig",11,null],[13,"Local","","Repository specific config, e.g. $PWD/.git/config",11,null],[13,"App","","Application specific configuration file",11,null],[13,"Highest","","Highest level available",11,null],[4,"FileFavor","","Merge file favor options for `MergeOptions` instruct the file-level\nmerging functionality how to deal with conflicting regions of the files.",null,null],[13,"Normal","","When a region of a file is changed in both branches, a conflict will be\nrecorded in the index so that git_checkout can produce a merge file with\nconflict markers in the working directory. This is the default.",12,null],[13,"Ours","","When a region of a file is changed in both branches, the file created\nin the index will contain the &quot;ours&quot; side of any conflicting region.\nThe index will not record a conflict.",12,null],[13,"Theirs","","When a region of a file is changed in both branches, the file created\nin the index will contain the &quot;theirs&quot; side of any conflicting region.\nThe index will not record a conflict.",12,null],[13,"Union","","When a region of a file is changed in both branches, the file created\nin the index will contain each unique line from each side, which has\nthe result of combining both files. The index will not record a conflict.",12,null],[4,"Delta","","What type of change is described by a `DiffDelta`?",null,null],[13,"Unmodified","","No changes",13,null],[13,"Added","","Entry does not exist in old version",13,null],[13,"Deleted","","Entry does not exist in new version",13,null],[13,"Modified","","Entry content changed between old and new",13,null],[13,"Renamed","","Entry was renamed wbetween old and new",13,null],[13,"Copied","","Entry was copied from another old entry",13,null],[13,"Ignored","","Entry is ignored item in workdir",13,null],[13,"Untracked","","Entry is untracked item in workdir",13,null],[13,"Typechange","","Type of entry changed between old and new",13,null],[13,"Unreadable","","Entry is unreadable",13,null],[13,"Conflicted","","Entry in the index is conflicted",13,null],[4,"SubmoduleIgnore","","Submodule ignore values",null,null],[13,"Unspecified","","Use the submodule&#39;s configuration",14,null],[13,"None","","Any change or untracked file is considered dirty",14,null],[13,"Untracked","","Only dirty if tracked files have changed",14,null],[13,"Dirty","","Only dirty if HEAD has moved",14,null],[13,"All","","Never dirty",14,null],[4,"DiffFormat","","Possible output formats for diff data",null,null],[13,"Patch","","full git diff",15,null],[13,"PatchHeader","","just the headers of the patch",15,null],[13,"Raw","","like git diff --raw",15,null],[13,"NameOnly","","like git diff --name-only",15,null],[13,"NameStatus","","like git diff --name-status",15,null],[4,"AutotagOption","","Automatic tag following options.",null,null],[13,"Unspecified","","Use the setting from the remote&#39;s configuration",16,null],[13,"Auto","","Ask the server for tags pointing to objects we&#39;re already downloading",16,null],[13,"None","","Don&#39;t ask for any tags beyond the refspecs",16,null],[13,"All","","Ask for all the tags",16,null],[4,"FetchPrune","","Configuration for how pruning is done on a fetch",null,null],[13,"Unspecified","","Use the setting from the configuration",17,null],[13,"On","","Force pruning on",17,null],[13,"Off","","Force pruning off",17,null],[5,"message_prettify","","Clean up a message, removing extraneous whitespace, and ensure that the\nmessage ends with a newline. If comment_char is Some, also remove comment\nlines starting with that character.",null,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"result"}}],[11,"into_c_string","collections::string","",18,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[11,"into_c_string","std::ffi::c_str","",19,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_c_string","std::path","",20,{"inputs":[{"name":"pathbuf"}],"output":{"name":"result"}}],[11,"into_c_string","std::ffi::os_str","",21,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"into_c_string","collections::vec","",22,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"build","git2","Builder-pattern objects for configuration various git operations.",null,null],[3,"RepoBuilder","git2::build","A builder struct which is used to build configuration for cloning a new git\nrepository.",null,null],[3,"CheckoutBuilder","","A builder struct for configuring checkouts of a repository.",null,null],[6,"Progress","","Checkout progress notification callback.",null,null],[11,"new","","Creates a new repository builder with all of the default configuration.",23,{"inputs":[],"output":{"name":"repobuilder"}}],[11,"bare","","Indicate whether the repository will be cloned as a bare repository or\nnot.",23,{"inputs":[{"name":"repobuilder"},{"name":"bool"}],"output":{"name":"repobuilder"}}],[11,"branch","","Specify the name of the branch to check out after the clone.",23,{"inputs":[{"name":"repobuilder"},{"name":"str"}],"output":{"name":"repobuilder"}}],[11,"local","","Set the flag for bypassing the git aware transport mechanism for local\npaths.",23,{"inputs":[{"name":"repobuilder"},{"name":"bool"}],"output":{"name":"repobuilder"}}],[11,"hardlinks","","Set the flag for whether hardlinks are used when using a local git-aware\ntransport mechanism.",23,{"inputs":[{"name":"repobuilder"},{"name":"bool"}],"output":{"name":"repobuilder"}}],[11,"with_checkout","","Configure the checkout which will be performed by consuming a checkout\nbuilder.",23,{"inputs":[{"name":"repobuilder"},{"name":"checkoutbuilder"}],"output":{"name":"repobuilder"}}],[11,"fetch_options","","Options which control the fetch, including callbacks.",23,{"inputs":[{"name":"repobuilder"},{"name":"fetchoptions"}],"output":{"name":"repobuilder"}}],[11,"clone","","Clone a remote repository.",23,{"inputs":[{"name":"repobuilder"},{"name":"str"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","Creates a new builder for checkouts with all of its default\nconfiguration.",24,{"inputs":[],"output":{"name":"checkoutbuilder"}}],[11,"dry_run","","Indicate that this checkout should perform a dry run by checking for\nconflicts but not make any actual changes.",24,{"inputs":[{"name":"checkoutbuilder"}],"output":{"name":"checkoutbuilder"}}],[11,"force","","Take any action necessary to get the working directory to match the\ntarget including potentially discarding modified files.",24,{"inputs":[{"name":"checkoutbuilder"}],"output":{"name":"checkoutbuilder"}}],[11,"safe","","Indicate that the checkout should be performed safely, allowing new\nfiles to be created but not overwriting extisting files or changes.",24,{"inputs":[{"name":"checkoutbuilder"}],"output":{"name":"checkoutbuilder"}}],[11,"allow_conflicts","","In safe mode, apply safe file updates even when there are conflicts\ninstead of canceling the checkout.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"remove_untracked","","Remove untracked files from the working dir.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"remove_ignored","","Remove ignored files from the working dir.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"update_only","","Only update the contents of files that already exist.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"update_index","","Prevents checkout from writing the updated files&#39; information to the\nindex.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"refresh","","Indicate whether the index and git attributes should be refreshed from\ndisk before any operations.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"skip_unmerged","","Skip files with unmerged index entries.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"use_ours","","Indicate whether the checkout should proceed on conflicts by using the\nstage 2 version of the file (&quot;ours&quot;).",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"use_theirs","","Indicate whether the checkout should proceed on conflicts by using the\nstage 3 version of the file (&quot;theirs&quot;).",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"overwrite_ignored","","Indicate whether ignored files should be overwritten during the checkout.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"conflict_style_merge","","Indicate whether a normal merge file should be written for conflicts.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"conflict_style_diff3","","Indicates whether to include common ancestor data in diff3 format files\nfor conflicts.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"disable_filters","","Indicate whether to apply filters like CRLF conversion.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"dir_perm","","Set the mode with which new directories are created.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"i32"}],"output":{"name":"checkoutbuilder"}}],[11,"file_perm","","Set the mode with which new files are created.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"i32"}],"output":{"name":"checkoutbuilder"}}],[11,"path","","Add a path to be checked out.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"t"}],"output":{"name":"checkoutbuilder"}}],[11,"target_dir","","Set the directory to check out to",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"path"}],"output":{"name":"checkoutbuilder"}}],[11,"ancestor_label","","The name of the common ancestor side of conflicts",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"our_label","","The name of the common our side of conflicts",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"their_label","","The name of the common their side of conflicts",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"progress","","Set a callback to receive notifications of checkout progress.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"f"}],"output":{"name":"checkoutbuilder"}}],[11,"configure","","Configure a raw checkout options based on this configuration.",24,{"inputs":[{"name":"checkoutbuilder"},{"name":"git_checkout_options"}],"output":null}],[0,"cert","git2","Certificate types which are passed to `CertificateCheck` in\n`RemoteCallbacks`.",null,null],[3,"Cert","git2::cert","A certificate for a remote connection, viewable as one of `CertHostkey` or\n`CertX509` currently.",null,null],[3,"CertHostkey","","Hostkey information taken from libssh2",null,null],[3,"CertX509","","X.509 certificate information",null,null],[11,"as_hostkey","","Attempt to view this certificate as an SSH hostkey.",25,{"inputs":[{"name":"cert"}],"output":{"name":"option"}}],[11,"as_x509","","Attempt to view this certificate as an X.509 certificate.",25,{"inputs":[{"name":"cert"}],"output":{"name":"option"}}],[11,"hash_md5","","Returns the md5 hash of the hostkey, if available.",26,{"inputs":[{"name":"certhostkey"}],"output":{"name":"option"}}],[11,"hash_sha1","","Returns the SHA-1 hash of the hostkey, if available.",26,{"inputs":[{"name":"certhostkey"}],"output":{"name":"option"}}],[11,"data","","Return the X.509 certificate data as a byte slice",27,null],[0,"string_array","git2","Bindings to libgit2&#39;s raw git_strarray type",null,null],[3,"StringArray","git2::string_array","A string array structure used by libgit2",null,null],[3,"Iter","","A forward iterator over the strings of an array, casted to `&amp;str`.",null,null],[3,"IterBytes","","A forward iterator over the strings of an array, casted to `&amp;[u8]`.",null,null],[11,"get","","Returns None if the i&#39;th string is not utf8 or if i is out of bounds.",28,{"inputs":[{"name":"stringarray"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_bytes","","Returns None if `i` is out of bounds.",28,{"inputs":[{"name":"stringarray"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the strings contained within this array.",28,{"inputs":[{"name":"stringarray"}],"output":{"name":"iter"}}],[11,"iter_bytes","","Returns an iterator over the strings contained within this array,\nyielding byte slices.",28,{"inputs":[{"name":"stringarray"}],"output":{"name":"iterbytes"}}],[11,"len","","Returns the number of strings in this array.",28,{"inputs":[{"name":"stringarray"}],"output":{"name":"usize"}}],[11,"next","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"iterbytes"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"iterbytes"}],"output":{"name":"option"}}],[11,"drop","","",28,{"inputs":[{"name":"stringarray"}],"output":null}],[0,"oid_array","git2","Bindings to libgit2&#39;s raw git_strarray type",null,null],[3,"OidArray","git2::oid_array","An oid array structure used by libgit2",null,null],[11,"deref","","",31,null],[11,"drop","","",31,{"inputs":[{"name":"oidarray"}],"output":null}],[0,"transport","git2","Interfaces for adding custom transports to libgit2",null,null],[3,"Transport","git2::transport","A transport is a structure which knows how to transfer data to and from a\nremote.",null,null],[4,"Service","","Actions that a smart transport can ask a subtransport to perform",null,null],[13,"UploadPackLs","","",32,null],[13,"UploadPack","","",32,null],[13,"ReceivePackLs","","",32,null],[13,"ReceivePack","","",32,null],[5,"register","","Add a custom transport definition, to be used in addition to the built-in\nset of transports that come with libgit2.",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[8,"SmartSubtransport","","Interfaced used by smart transports.",null,null],[10,"action","","Indicates that this subtransport will be performing the specified action\non the specified URL.",33,{"inputs":[{"name":"smartsubtransport"},{"name":"str"},{"name":"service"}],"output":{"name":"result"}}],[10,"close","","Terminates a connection with the remote.",33,{"inputs":[{"name":"smartsubtransport"}],"output":{"name":"result"}}],[8,"SmartSubtransportStream","","An instance of a stream over which a smart transport will communicate with a\nremote.",null,null],[11,"clone","","",32,{"inputs":[{"name":"service"}],"output":{"name":"service"}}],[11,"smart","","Creates a new transport which will use the &quot;smart&quot; transport protocol\nfor transferring data.",34,{"inputs":[{"name":"remote"},{"name":"bool"},{"name":"s"}],"output":{"name":"result"}}],[11,"drop","","",34,{"inputs":[{"name":"transport"}],"output":null}],[11,"len","git2","Gets the number of hunks that exist in the blame structure.",35,{"inputs":[{"name":"blame"}],"output":{"name":"usize"}}],[11,"get_index","","Gets the blame hunk at the given index.",35,{"inputs":[{"name":"blame"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_line","","Gets the hunk that relates to the given line number in the newest\ncommit.",35,{"inputs":[{"name":"blame"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the hunks in this blame.",35,{"inputs":[{"name":"blame"}],"output":{"name":"blameiter"}}],[11,"final_commit_id","","Returns OID of the commit where this line was last changed",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"oid"}}],[11,"final_signature","","Returns signature of the commit.",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"signature"}}],[11,"final_start_line","","Returns line number where this hunk begins.",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"usize"}}],[11,"orig_commit_id","","Returns the OID of the commit where this hunk was found.",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"oid"}}],[11,"orig_signature","","Returns signature of the commit.",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"signature"}}],[11,"orig_start_line","","Returns line number where this hunk begins.",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"usize"}}],[11,"path","","Returns path to the file where this hunk originated.",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"option"}}],[11,"is_boundary","","Tests whether this hunk has been tracked to a boundary commit\n(the root, or the commit specified in git_blame_options.oldest_commit).",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"bool"}}],[11,"lines_in_hunk","","Returns number of lines in this hunk.",36,{"inputs":[{"name":"blamehunk"}],"output":{"name":"usize"}}],[11,"new","","Initialize options",37,{"inputs":[],"output":{"name":"blameoptions"}}],[11,"track_copies_same_file","","Track lines that have moved within a file.",37,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_same_commit_moves","","Track lines that have moved across files in the same commit.",37,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_same_commit_copies","","Track lines that have been copied from another file that exists\nin the same commit.",37,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_any_commit_copies","","Track lines that have been copied from another file that exists\nin any commit.",37,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"first_parent","","Restrict the search of commits to those reachable following only\nthe first parents.",37,{"inputs":[{"name":"blameoptions"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"newest_commit","","Setter for the id of the newest commit to consider.",37,{"inputs":[{"name":"blameoptions"},{"name":"oid"}],"output":{"name":"blameoptions"}}],[11,"oldest_commit","","Setter for the id of the oldest commit to consider.",37,{"inputs":[{"name":"blameoptions"},{"name":"oid"}],"output":{"name":"blameoptions"}}],[11,"drop","","",35,{"inputs":[{"name":"blame"}],"output":null}],[11,"next","","",38,{"inputs":[{"name":"blameiter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"blameiter"}],"output":{"name":"option"}}],[11,"id","","Get the id (SHA1) of a repository blob",39,{"inputs":[{"name":"blob"}],"output":{"name":"oid"}}],[11,"is_binary","","Determine if the blob content is most certainly binary or not.",39,{"inputs":[{"name":"blob"}],"output":{"name":"bool"}}],[11,"content","","Get the content of this blob.",39,null],[11,"as_object","","Casts this Blob to be usable as an `Object`",39,{"inputs":[{"name":"blob"}],"output":{"name":"object"}}],[11,"into_object","","Consumes Blob to be returned as an `Object`",39,{"inputs":[{"name":"blob"}],"output":{"name":"object"}}],[11,"drop","","",39,{"inputs":[{"name":"blob"}],"output":null}],[11,"wrap","","Creates a new branch from a reference",40,{"inputs":[{"name":"reference"}],"output":{"name":"branch"}}],[11,"get","","Gain access to the reference that is this branch",40,{"inputs":[{"name":"branch"}],"output":{"name":"reference"}}],[11,"into_reference","","Take ownership of the underlying reference.",40,{"inputs":[{"name":"branch"}],"output":{"name":"reference"}}],[11,"delete","","Delete an existing branch reference.",40,{"inputs":[{"name":"branch"}],"output":{"name":"result"}}],[11,"is_head","","Determine if the current local branch is pointed at by HEAD.",40,{"inputs":[{"name":"branch"}],"output":{"name":"bool"}}],[11,"rename","","Move/rename an existing local branch reference.",40,{"inputs":[{"name":"branch"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"name","","Return the name of the given local or remote branch.",40,{"inputs":[{"name":"branch"}],"output":{"name":"result"}}],[11,"name_bytes","","Return the name of the given local or remote branch.",40,{"inputs":[{"name":"branch"}],"output":{"name":"result"}}],[11,"upstream","","Return the reference supporting the remote tracking branch, given a\nlocal branch reference.",40,{"inputs":[{"name":"branch"}],"output":{"name":"result"}}],[11,"set_upstream","","Set the upstream configuration for a given local branch.",40,{"inputs":[{"name":"branch"},{"name":"option"}],"output":{"name":"result"}}],[11,"from_raw","","Creates a new iterator from the raw pointer given.",41,null],[11,"next","","",41,{"inputs":[{"name":"branches"}],"output":{"name":"option"}}],[11,"drop","","",41,{"inputs":[{"name":"branches"}],"output":null}],[11,"new","","Creates a new empty buffer.",42,{"inputs":[],"output":{"name":"buf"}}],[11,"as_str","","Attempt to view this buffer as a string slice.",42,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[11,"deref","","",42,null],[11,"deref_mut","","",42,null],[11,"drop","","",42,{"inputs":[{"name":"buf"}],"output":null}],[11,"id","","Get the id (SHA1) of a repository commit",43,{"inputs":[{"name":"commit"}],"output":{"name":"oid"}}],[11,"tree_id","","Get the id of the tree pointed to by this commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"oid"}}],[11,"tree","","Get the tree pointed to by a commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"result"}}],[11,"raw","","Get access to the underlying raw pointer.",43,null],[11,"message","","Get the full message of a commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"message_bytes","","Get the full message of a commit as a byte slice.",43,null],[11,"message_encoding","","Get the encoding for the message of a commit, as a string representing a\nstandard encoding name.",43,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"message_raw","","Get the full raw message of a commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"message_raw_bytes","","Get the full raw message of a commit.",43,null],[11,"raw_header","","Get the full raw text of the commit header.",43,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"raw_header_bytes","","Get the full raw text of the commit header.",43,null],[11,"summary","","Get the short &quot;summary&quot; of the git commit message.",43,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"summary_bytes","","Get the short &quot;summary&quot; of the git commit message.",43,{"inputs":[{"name":"commit"}],"output":{"name":"option"}}],[11,"time","","Get the commit time (i.e. committer time) of a commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"time"}}],[11,"parents","","Creates a new iterator over the parents of this commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"parents"}}],[11,"parent_ids","","Creates a new iterator over the parents of this commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"parentids"}}],[11,"author","","Get the author of this commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"signature"}}],[11,"committer","","Get the committer of this commit.",43,{"inputs":[{"name":"commit"}],"output":{"name":"signature"}}],[11,"amend","","Amend this existing commit with all non-`None` values",43,{"inputs":[{"name":"commit"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"parent","","Get the specified parent of the commit.",43,{"inputs":[{"name":"commit"},{"name":"usize"}],"output":{"name":"result"}}],[11,"parent_id","","Get the specified parent id of the commit.",43,{"inputs":[{"name":"commit"},{"name":"usize"}],"output":{"name":"result"}}],[11,"as_object","","Casts this Commit to be usable as an `Object`",43,{"inputs":[{"name":"commit"}],"output":{"name":"object"}}],[11,"into_object","","Consumes Commit to be returned as an `Object`",43,{"inputs":[{"name":"commit"}],"output":{"name":"object"}}],[11,"next","","",44,{"inputs":[{"name":"parents"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"parents"}],"output":{"name":"option"}}],[11,"drop","","",43,{"inputs":[{"name":"commit"}],"output":null}],[11,"new","","Allocate a new configuration object",45,{"inputs":[],"output":{"name":"result"}}],[11,"open","","Create a new config instance containing a single on-disk file",45,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"open_default","","Open the global, XDG and system configuration files",45,{"inputs":[],"output":{"name":"result"}}],[11,"find_global","","Locate the path to the global configuration file",45,{"inputs":[],"output":{"name":"result"}}],[11,"find_system","","Locate the path to the system configuration file",45,{"inputs":[],"output":{"name":"result"}}],[11,"find_xdg","","Locate the path to the global xdg compatible configuration file",45,{"inputs":[],"output":{"name":"result"}}],[11,"add_file","","Add an on-disk config file instance to an existing config",45,{"inputs":[{"name":"config"},{"name":"path"},{"name":"configlevel"},{"name":"bool"}],"output":{"name":"result"}}],[11,"remove","","Delete a config variable from the config file with the highest level\n(usually the local one).",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_bool","","Get the value of a boolean config variable.",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_i32","","Get the value of an integer config variable.",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_i64","","Get the value of an integer config variable.",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_str","","Get the value of a string config variable.",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_bytes","","Get the value of a string config variable as a byte slice.",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_string","","Get the value of a string config variable as an owned string.",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_path","","Get the value of a path config variable as an owned .",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_entry","","Get the ConfigEntry for a config variable.",45,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"result"}}],[11,"entries","","Iterate over all the config variables",45,{"inputs":[{"name":"config"},{"name":"option"}],"output":{"name":"result"}}],[11,"open_global","","Open the global/XDG configuration file according to git&#39;s rules",45,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"open_level","","Build a single-level focused config object from a multi-level one.",45,{"inputs":[{"name":"config"},{"name":"configlevel"}],"output":{"name":"result"}}],[11,"set_bool","","Set the value of a boolean config variable in the config file with the\nhighest level (usually the local one).",45,{"inputs":[{"name":"config"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_i32","","Set the value of an integer config variable in the config file with the\nhighest level (usually the local one).",45,{"inputs":[{"name":"config"},{"name":"str"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_i64","","Set the value of an integer config variable in the config file with the\nhighest level (usually the local one).",45,{"inputs":[{"name":"config"},{"name":"str"},{"name":"i64"}],"output":{"name":"result"}}],[11,"set_str","","Set the value of a string config variable in the config file with the\nhighest level (usually the local one).",45,{"inputs":[{"name":"config"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"snapshot","","Create a snapshot of the configuration",45,{"inputs":[{"name":"config"}],"output":{"name":"result"}}],[11,"drop","","",45,{"inputs":[{"name":"config"}],"output":null}],[11,"name","","Gets the name of this entry.",46,{"inputs":[{"name":"configentry"}],"output":{"name":"option"}}],[11,"name_bytes","","Gets the name of this entry as a byte slice.",46,null],[11,"value","","Gets the value of this entry.",46,{"inputs":[{"name":"configentry"}],"output":{"name":"option"}}],[11,"value_bytes","","Gets the value of this entry as a byte slice.",46,null],[11,"level","","Gets the configuration level of this entry.",46,{"inputs":[{"name":"configentry"}],"output":{"name":"configlevel"}}],[11,"drop","","",47,{"inputs":[{"name":"configentries"}],"output":null}],[11,"drop","","",46,{"inputs":[{"name":"configentry"}],"output":null}],[11,"default","","Create a &quot;default&quot; credential usable for Negotiate mechanisms like NTLM\nor Kerberos authentication.",48,{"inputs":[],"output":{"name":"result"}}],[11,"ssh_key_from_agent","","Create a new ssh key credential object used for querying an ssh-agent.",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"ssh_key","","Create a new passphrase-protected ssh key credential object.",48,{"inputs":[{"name":"str"},{"name":"option"},{"name":"path"},{"name":"option"}],"output":{"name":"result"}}],[11,"userpass_plaintext","","Create a new plain-text username and password credential object.",48,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"credential_helper","","Attempt to read `credential.helper` according to gitcredentials(7) [1]",48,{"inputs":[{"name":"config"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"username","","Create a credential to specify a username.",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"has_username","","Check whether a credential object contains username information.",48,{"inputs":[{"name":"cred"}],"output":{"name":"bool"}}],[11,"credtype","","Return the type of credentials that this object represents.",48,{"inputs":[{"name":"cred"}],"output":{"name":"git_credtype_t"}}],[11,"unwrap","","Unwrap access to the underlying raw pointer, canceling the destructor",48,null],[11,"drop","","",48,{"inputs":[{"name":"cred"}],"output":null}],[11,"new","","Create a new credential helper object which will be used to probe git&#39;s\nlocal credential configuration.",0,{"inputs":[{"name":"str"}],"output":{"name":"credentialhelper"}}],[11,"username","","Set the username that this credential helper will query with.",0,{"inputs":[{"name":"credentialhelper"},{"name":"option"}],"output":{"name":"credentialhelper"}}],[11,"config","","Query the specified configuration object to discover commands to\nexecute, usernames to query, etc.",0,{"inputs":[{"name":"credentialhelper"},{"name":"config"}],"output":{"name":"credentialhelper"}}],[11,"execute","","Execute this helper, attempting to discover a username/password pair.",0,{"inputs":[{"name":"credentialhelper"}],"output":{"name":"option"}}],[11,"format","","Prints this describe result, returning the result as a string.",49,{"inputs":[{"name":"describe"},{"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",49,{"inputs":[{"name":"describe"}],"output":null}],[11,"new","","Creates a new blank set of formatting options for a description.",50,{"inputs":[],"output":{"name":"describeformatoptions"}}],[11,"abbreviated_size","","Sets the size of the abbreviated commit id to use.",50,{"inputs":[{"name":"describeformatoptions"},{"name":"u32"}],"output":{"name":"self"}}],[11,"always_use_long_format","","Sets whether or not the long format is used even when a shorter name\ncould be used.",50,{"inputs":[{"name":"describeformatoptions"},{"name":"bool"}],"output":{"name":"self"}}],[11,"dirty_suffix","","If the workdir is dirty and this is set, this string will be appended to\nthe description string.",50,{"inputs":[{"name":"describeformatoptions"},{"name":"str"}],"output":{"name":"self"}}],[11,"new","","Creates a new blank set of formatting options for a description.",51,{"inputs":[],"output":{"name":"describeoptions"}}],[11,"max_candidates_tags","","",51,{"inputs":[{"name":"describeoptions"},{"name":"u32"}],"output":{"name":"self"}}],[11,"describe_tags","","Sets the reference lookup strategy",51,{"inputs":[{"name":"describeoptions"}],"output":{"name":"self"}}],[11,"describe_all","","Sets the reference lookup strategy",51,{"inputs":[{"name":"describeoptions"}],"output":{"name":"self"}}],[11,"only_follow_first_parent","","Indicates when calculating the distance from the matching tag or\nreference whether to only walk down the first-parent ancestry.",51,{"inputs":[{"name":"describeoptions"},{"name":"bool"}],"output":{"name":"self"}}],[11,"show_commit_oid_as_fallback","","If no matching tag or reference is found whether a describe option would\nnormally fail. This option indicates, however, that it will instead fall\nback to showing the full id of the commit.",51,{"inputs":[{"name":"describeoptions"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pattern","","",51,{"inputs":[{"name":"describeoptions"},{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"diffbinarykind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"diffbinarykind"}],"output":{"name":"diffbinarykind"}}],[11,"merge","","Merge one diff into another.",52,{"inputs":[{"name":"diff"},{"name":"diff"}],"output":{"name":"result"}}],[11,"deltas","","Returns an iterator over the deltas in this diff.",52,{"inputs":[{"name":"diff"}],"output":{"name":"deltas"}}],[11,"get_delta","","Return the diff delta for an entry in the diff list.",52,{"inputs":[{"name":"diff"},{"name":"usize"}],"output":{"name":"option"}}],[11,"is_sorted_icase","","Check if deltas are sorted case sensitively or insensitively.",52,{"inputs":[{"name":"diff"}],"output":{"name":"bool"}}],[11,"print","","Iterate over a diff generating formatted text output.",52,{"inputs":[{"name":"diff"},{"name":"diffformat"},{"name":"f"}],"output":{"name":"result"}}],[11,"foreach","","Loop over all deltas in a diff issuing callbacks.",52,{"inputs":[{"name":"diff"},{"name":"filecb"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"stats","","Accumulate diff statistics for all patches.",52,{"inputs":[{"name":"diff"}],"output":{"name":"result"}}],[11,"find_similar","","Transform a diff marking file renames, copies, etc.",52,{"inputs":[{"name":"diff"},{"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",52,{"inputs":[{"name":"diff"}],"output":null}],[11,"nfiles","","Returns the number of files in this delta.",53,{"inputs":[{"name":"diffdelta"}],"output":{"name":"u16"}}],[11,"status","","Returns the status of this entry",53,{"inputs":[{"name":"diffdelta"}],"output":{"name":"delta"}}],[11,"old_file","","Return the file which represents the &quot;from&quot; side of the diff.",53,{"inputs":[{"name":"diffdelta"}],"output":{"name":"difffile"}}],[11,"new_file","","Return the file which represents the &quot;to&quot; side of the diff.",53,{"inputs":[{"name":"diffdelta"}],"output":{"name":"difffile"}}],[11,"id","","Returns the Oid of this item.",54,{"inputs":[{"name":"difffile"}],"output":{"name":"oid"}}],[11,"path_bytes","","Returns the path, in bytes, of the entry relative to the working\ndirectory of the repository.",54,{"inputs":[{"name":"difffile"}],"output":{"name":"option"}}],[11,"path","","Returns the path of the entry relative to the working directory of the\nrepository.",54,{"inputs":[{"name":"difffile"}],"output":{"name":"option"}}],[11,"size","","Returns the size of this entry, in bytes",54,{"inputs":[{"name":"difffile"}],"output":{"name":"u64"}}],[11,"new","","Creates a new set of empty diff options.",55,{"inputs":[],"output":{"name":"diffoptions"}}],[11,"reverse","","Flag indicating whether the sides of the diff will be reversed.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_ignored","","Flag indicating whether ignored files are included.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"recurse_ignored_dirs","","Flag indicating whether ignored directories are traversed deeply or not.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_untracked","","Flag indicating whether untracked files are in the diff",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"recurse_untracked_dirs","","Flag indicating whether untracked directories are deeply traversed or\nnot.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unmodified","","Flag indicating whether unmodified files are in the diff.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_typechange","","If entrabled, then Typechange delta records are generated.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_typechange_trees","","Event with `include_typechange`, the tree treturned generally shows a\ndeleted blow. This flag correctly labels the tree transitions as a\ntypechange record with the `new_file`&#39;s mode set to tree.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_filemode","","Flag indicating whether file mode changes are ignored.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_submodules","","Flag indicating whether all submodules should be treated as unmodified.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_case","","Flag indicating whether case insensitive filenames should be used.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"disable_pathspec_match","","If pathspecs are specified, this flag means that they should be applied\nas an exact match instead of a fnmatch pattern.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"skip_binary_check","","Disable updating the `binary` flag in delta records. This is useful when\niterating over a diff if you don&#39;t need hunk and data callbacks and want\nto avoid having to load a file completely.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"enable_fast_untracked_dirs","","When diff finds an untracked directory, to match the behavior of core\nGit, it scans the contents for ignored and untracked files. If all\ncontents are ignored, then the directory is ignored; if any contents are\nnot ignored, then the directory is untracked. This is extra work that\nmay not matter in many cases.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"update_index","","When diff finds a file in the working directory with stat information\ndifferent from the index, but the OID ends up being the same, write the\ncorrect stat information into the index. Note: without this flag, diff\nwill always leave the index untouched.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unreadable","","Include unreadable files in the diff",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unreadable_as_untracked","","Include unreadable files in the diff",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"force_text","","Treat all files as text, disabling binary attributes and detection.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"force_binary","","Treat all files as binary, disabling text diffs",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace","","Ignore all whitespace",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace_change","","Ignore changes in the amount of whitespace",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace_eol","","Ignore whitespace at tend of line",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_untracked_content","","When generating patch text, include the content of untracked files.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_unmodified","","When generating output, include the names of unmodified files if they\nare included in the `Diff`. Normally these are skipped in the formats\nthat list files (e.g. name-only, name-status, raw). Even with this these\nwill not be included in the patch format.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"patience","","Use the &quot;patience diff&quot; algorithm",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"minimal","","Take extra time to find the minimal diff",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_binary","","Include the necessary deflate/delta information so that `git-apply` can\napply given diff information to binary files.",55,{"inputs":[{"name":"diffoptions"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"context_lines","","Set the number of unchanged lines that define the boundary of a hunk\n(and to display before and after).",55,{"inputs":[{"name":"diffoptions"},{"name":"u32"}],"output":{"name":"diffoptions"}}],[11,"interhunk_lines","","Set the maximum number of unchanged lines between hunk boundaries before\nthe hunks will be merged into one.",55,{"inputs":[{"name":"diffoptions"},{"name":"u32"}],"output":{"name":"diffoptions"}}],[11,"id_abbrev","","The default value for this is `core.abbrev` or 7 if unset.",55,{"inputs":[{"name":"diffoptions"},{"name":"u16"}],"output":{"name":"diffoptions"}}],[11,"max_size","","Maximum size (in bytes) above which a blob will be marked as binary\nautomatically.",55,{"inputs":[{"name":"diffoptions"},{"name":"i64"}],"output":{"name":"diffoptions"}}],[11,"old_prefix","","The virtual &quot;directory&quot; to prefix old file names with in hunk headers.",55,{"inputs":[{"name":"diffoptions"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"new_prefix","","The virtual &quot;directory&quot; to prefix new file names with in hunk headers.",55,{"inputs":[{"name":"diffoptions"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"pathspec","","Add to the array of paths/fnmatch patterns to constrain the diff.",55,{"inputs":[{"name":"diffoptions"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"raw","","Acquire a pointer to the underlying raw options.",55,null],[11,"next","","",56,{"inputs":[{"name":"deltas"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"deltas"}],"output":{"name":"option"}}],[11,"old_lineno","","Line number in old file or `None` for added line",57,{"inputs":[{"name":"diffline"}],"output":{"name":"option"}}],[11,"new_lineno","","Line number in new file or `None` for deleted line",57,{"inputs":[{"name":"diffline"}],"output":{"name":"option"}}],[11,"num_lines","","Number of newline characters in content",57,{"inputs":[{"name":"diffline"}],"output":{"name":"u32"}}],[11,"content_offset","","Offset in the original file to the content",57,{"inputs":[{"name":"diffline"}],"output":{"name":"i64"}}],[11,"content","","Content of this line as bytes.",57,null],[11,"origin","","Sigil showing the origin of this `DiffLine`.",57,{"inputs":[{"name":"diffline"}],"output":{"name":"char"}}],[11,"old_start","","Starting line number in old_file",58,{"inputs":[{"name":"diffhunk"}],"output":{"name":"u32"}}],[11,"old_lines","","Number of lines in old_file",58,{"inputs":[{"name":"diffhunk"}],"output":{"name":"u32"}}],[11,"new_start","","Starting line number in new_file",58,{"inputs":[{"name":"diffhunk"}],"output":{"name":"u32"}}],[11,"new_lines","","Number of lines in new_file",58,{"inputs":[{"name":"diffhunk"}],"output":{"name":"u32"}}],[11,"header","","Header text",58,null],[11,"files_changed","","Get the total number of files chaned in a diff.",59,{"inputs":[{"name":"diffstats"}],"output":{"name":"usize"}}],[11,"insertions","","Get the total number of insertions in a diff",59,{"inputs":[{"name":"diffstats"}],"output":{"name":"usize"}}],[11,"deletions","","Get the total number of deletions in a diff",59,{"inputs":[{"name":"diffstats"}],"output":{"name":"usize"}}],[11,"to_buf","","Print diff statistics to a Buf",59,{"inputs":[{"name":"diffstats"},{"name":"diffstatsformat"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",59,{"inputs":[{"name":"diffstats"}],"output":null}],[11,"old_file","","The contents of the old file.",60,{"inputs":[{"name":"diffbinary"}],"output":{"name":"diffbinaryfile"}}],[11,"new_file","","The contents of the new file.",60,{"inputs":[{"name":"diffbinary"}],"output":{"name":"diffbinaryfile"}}],[11,"kind","","The type of binary data for this file",61,{"inputs":[{"name":"diffbinaryfile"}],"output":{"name":"diffbinarykind"}}],[11,"data","","The binary data, deflated",61,null],[11,"inflated_len","","The length of the binary data after inflation",61,{"inputs":[{"name":"diffbinaryfile"}],"output":{"name":"usize"}}],[11,"new","","Creates a new set of empty diff find options.",62,{"inputs":[],"output":{"name":"difffindoptions"}}],[11,"by_config","","Reset all flags back to their unset state, indicating that\n`diff.renames` should be used instead. This is overridden once any flag\nis set.",62,{"inputs":[{"name":"difffindoptions"}],"output":{"name":"difffindoptions"}}],[11,"renames","","Look for renames?",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"renames_from_rewrites","","Consider old side of modified for renames?",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"copies","","Look for copies?",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"copies_from_unmodified","","Consider unmodified as copy sources?",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"rewrites","","Mark significant rewrites for split.",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"break_rewries","","Actually split large rewrites into delete/add pairs",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"for_untracked","","Find renames/copies for untracked items in working directory.",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"all","","Turn on all finding features.",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"ignore_leading_whitespace","","Measure similarity ignoring leading whitespace (default)",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"ignore_whitespace","","Measure similarity ignoring all whitespace",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"dont_ignore_whitespace","","Measure similarity including all data",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"exact_match_only","","Measure similarity only by comparing SHAs (fast and cheap)",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"break_rewrites_for_renames_only","","Do not break rewrites unless they contribute to a rename.",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"remove_unmodified","","Remove any unmodified deltas after find_similar is done.",62,{"inputs":[{"name":"difffindoptions"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"rename_threshold","","Similarity to consider a file renamed (default 50)",62,{"inputs":[{"name":"difffindoptions"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"rename_from_rewrite_threshold","","Similarity of modified to be glegible rename source (default 50)",62,{"inputs":[{"name":"difffindoptions"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"copy_threshold","","Similarity to consider a file copy (default 50)",62,{"inputs":[{"name":"difffindoptions"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"break_rewrite_threshold","","Similarity to split modify into delete/add pair (default 60)",62,{"inputs":[{"name":"difffindoptions"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"rename_limit","","Maximum similarity sources to examine for a file (somewhat like\ngit-diff&#39;s `-l` option or `diff.renameLimit` config)",62,{"inputs":[{"name":"difffindoptions"},{"name":"usize"}],"output":{"name":"difffindoptions"}}],[11,"id","","Gets the commit ID that the given git_annotated_commit refers to",63,{"inputs":[{"name":"annotatedcommit"}],"output":{"name":"oid"}}],[11,"new","","Creates a default set of merge options.",64,{"inputs":[],"output":{"name":"mergeoptions"}}],[11,"find_renames","","Detect file renames",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"rename_threshold","","Similarity to consider a file renamed (default 50)",64,{"inputs":[{"name":"mergeoptions"},{"name":"u32"}],"output":{"name":"mergeoptions"}}],[11,"target_limit","","Maximum similarity sources to examine for renames (default 200).\nIf the number of rename candidates (add / delete pairs) is greater\nthan this value, inexact rename detection is aborted. This setting\noverrides the `merge.renameLimit` configuration value.",64,{"inputs":[{"name":"mergeoptions"},{"name":"u32"}],"output":{"name":"mergeoptions"}}],[11,"recursion_limit","","Maximum number of times to merge common ancestors to build a\nvirtual merge base when faced with criss-cross merges.  When\nthis limit is reached, the next ancestor will simply be used\ninstead of attempting to merge it.  The default is unlimited.",64,{"inputs":[{"name":"mergeoptions"},{"name":"u32"}],"output":{"name":"mergeoptions"}}],[11,"file_favor","","Specify a side to favor for resolving conflicts",64,{"inputs":[{"name":"mergeoptions"},{"name":"filefavor"}],"output":{"name":"mergeoptions"}}],[11,"standard_style","","Create standard conflicted merge files",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"diff3_style","","Create diff3-style file",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"simplify_alnum","","Condense non-alphanumeric regions for simplified diff file",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace","","Ignore all whitespace",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace_change","","Ignore changes in amount of whitespace",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace_eol","","Ignore whitespace at end of line",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"patience","","Use the &quot;patience diff&quot; algorithm",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"minimal","","Take extra time to find minimal diff",64,{"inputs":[{"name":"mergeoptions"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"raw","","Acquire a pointer to the underlying raw options.",64,null],[11,"drop","","",63,{"inputs":[{"name":"annotatedcommit"}],"output":null}],[11,"fmt","","",65,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last_error","","Returns the last error, or `None` if one is not available.",65,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_str","","Creates a new error from the given string as the error.",65,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"code","","Return the error code associated with this error.",65,{"inputs":[{"name":"error"}],"output":{"name":"errorcode"}}],[11,"class","","Return the error class associated with this error.",65,{"inputs":[{"name":"error"}],"output":{"name":"errorclass"}}],[11,"raw_code","","Return the raw error code associated with this error.",65,{"inputs":[{"name":"error"}],"output":{"name":"git_error_code"}}],[11,"raw_class","","Return the raw error class associated with this error.",65,{"inputs":[{"name":"error"}],"output":{"name":"git_error_t"}}],[11,"message","","Return the message associated with this error",65,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"description","","",65,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",65,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",65,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",65,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"error"}}],[11,"new","","Creates a new in-memory index.",66,{"inputs":[],"output":{"name":"result"}}],[11,"open","","Create a new bare Git index object as a memory representation of the Git\nindex file in &#39;index_path&#39;, without a repository to back it.",66,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"add","","Add or update an index entry from an in-memory struct",66,{"inputs":[{"name":"index"},{"name":"indexentry"}],"output":{"name":"result"}}],[11,"add_path","","Add or update an index entry from a file on disk",66,{"inputs":[{"name":"index"},{"name":"path"}],"output":{"name":"result"}}],[11,"add_all","","Add or update index entries matching files in the working directory.",66,{"inputs":[{"name":"index"},{"name":"i"},{"name":"indexaddoption"},{"name":"option"}],"output":{"name":"result"}}],[11,"clear","","Clear the contents (all the entries) of an index object.",66,{"inputs":[{"name":"index"}],"output":{"name":"result"}}],[11,"len","","Get the count of entries currently in the index",66,{"inputs":[{"name":"index"}],"output":{"name":"usize"}}],[11,"get","","Get one of the entries in the index by its position.",66,{"inputs":[{"name":"index"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Get an iterator over the entries in this index.",66,{"inputs":[{"name":"index"}],"output":{"name":"indexentries"}}],[11,"get_path","","Get one of the entries in the index by its path.",66,{"inputs":[{"name":"index"},{"name":"path"},{"name":"i32"}],"output":{"name":"option"}}],[11,"path","","Get the full path to the index file on disk.",66,{"inputs":[{"name":"index"}],"output":{"name":"option"}}],[11,"read","","Update the contents of an existing index object in memory by reading\nfrom the hard disk.",66,{"inputs":[{"name":"index"},{"name":"bool"}],"output":{"name":"result"}}],[11,"read_tree","","Read a tree into the index file with stats",66,{"inputs":[{"name":"index"},{"name":"tree"}],"output":{"name":"result"}}],[11,"remove","","Remove an entry from the index",66,{"inputs":[{"name":"index"},{"name":"path"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove_path","","Remove an index entry corresponding to a file on disk.",66,{"inputs":[{"name":"index"},{"name":"path"}],"output":{"name":"result"}}],[11,"remove_dir","","Remove all entries from the index under a given directory.",66,{"inputs":[{"name":"index"},{"name":"path"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove_all","","Remove all matching index entries.",66,{"inputs":[{"name":"index"},{"name":"i"},{"name":"option"}],"output":{"name":"result"}}],[11,"update_all","","Update all index entries to match the working directory",66,{"inputs":[{"name":"index"},{"name":"i"},{"name":"option"}],"output":{"name":"result"}}],[11,"write","","Write an existing index object from memory back to disk using an atomic\nfile lock.",66,{"inputs":[{"name":"index"}],"output":{"name":"result"}}],[11,"write_tree","","Write the index as a tree.",66,{"inputs":[{"name":"index"}],"output":{"name":"result"}}],[11,"write_tree_to","","Write the index as a tree to the given repository",66,{"inputs":[{"name":"index"},{"name":"repository"}],"output":{"name":"result"}}],[11,"drop","","",66,{"inputs":[{"name":"index"}],"output":null}],[11,"next","","",67,{"inputs":[{"name":"indexentries"}],"output":{"name":"option"}}],[11,"author","","Get the note author",68,{"inputs":[{"name":"note"}],"output":{"name":"signature"}}],[11,"committer","","Get the note committer",68,{"inputs":[{"name":"note"}],"output":{"name":"signature"}}],[11,"message_bytes","","Get the note message, in bytes.",68,null],[11,"message","","Get the note message as a string, returning `None` if it is not UTF-8.",68,{"inputs":[{"name":"note"}],"output":{"name":"option"}}],[11,"id","","Get the note object&#39;s id",68,{"inputs":[{"name":"note"}],"output":{"name":"oid"}}],[11,"drop","","",68,{"inputs":[{"name":"note"}],"output":null}],[11,"next","","",69,{"inputs":[{"name":"notes"}],"output":{"name":"option"}}],[11,"drop","","",69,{"inputs":[{"name":"notes"}],"output":null}],[11,"id","","Get the id (SHA1) of a repository object",70,{"inputs":[{"name":"object"}],"output":{"name":"oid"}}],[11,"kind","","Get the object type of an object.",70,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"peel","","Recursively peel an object until an object of the specified type is met.",70,{"inputs":[{"name":"object"},{"name":"objecttype"}],"output":{"name":"result"}}],[11,"short_id","","Get a short abbreviated OID string for the object",70,{"inputs":[{"name":"object"}],"output":{"name":"result"}}],[11,"as_commit","","Attempt to view this object as a commit.",70,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"into_commit","","Attempt to consume this object and return a commit.",70,{"inputs":[{"name":"object"}],"output":{"name":"result"}}],[11,"as_tag","","Attempt to view this object as a tag.",70,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"into_tag","","Attempt to consume this object and return a tag.",70,{"inputs":[{"name":"object"}],"output":{"name":"result"}}],[11,"as_tree","","Attempt to view this object as a tree.",70,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"into_tree","","Attempt to consume this object and return a tree.",70,{"inputs":[{"name":"object"}],"output":{"name":"result"}}],[11,"as_blob","","Attempt to view this object as a blob.",70,{"inputs":[{"name":"object"}],"output":{"name":"option"}}],[11,"into_blob","","Attempt to consume this object and return a blob.",70,{"inputs":[{"name":"object"}],"output":{"name":"result"}}],[11,"describe","","Describes a commit",70,{"inputs":[{"name":"object"},{"name":"describeoptions"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"object"}],"output":{"name":"object"}}],[11,"drop","","",70,{"inputs":[{"name":"object"}],"output":null}],[11,"from_str","","Parse a hex-formatted object id into an Oid structure.",71,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_bytes","","Parse a raw object id into an Oid structure.",71,null],[11,"as_bytes","","View this OID as a byte-slice 20 bytes in length.",71,null],[11,"is_zero","","Test if this OID is all zeros.",71,{"inputs":[{"name":"oid"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"oid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Hex-encode this Oid into a formatter.",71,{"inputs":[{"name":"oid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parse a hex-formatted object id into an Oid structure.",71,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"oid"},{"name":"oid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"oid"},{"name":"oid"}],"output":{"name":"option"}}],[11,"cmp","","",71,{"inputs":[{"name":"oid"},{"name":"oid"}],"output":{"name":"ordering"}}],[11,"clone","","",71,{"inputs":[{"name":"oid"}],"output":{"name":"oid"}}],[11,"hash","","",71,{"inputs":[{"name":"oid"},{"name":"h"}],"output":null}],[11,"as_ref","","",71,null],[11,"new","","Creates a new pathspec from a list of specs to match against.",72,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"match_diff","","Match a pathspec against files in a diff.",72,{"inputs":[{"name":"pathspec"},{"name":"diff"},{"name":"pathspecflags"}],"output":{"name":"result"}}],[11,"match_tree","","Match a pathspec against files in a tree.",72,{"inputs":[{"name":"pathspec"},{"name":"tree"},{"name":"pathspecflags"}],"output":{"name":"result"}}],[11,"match_index","","This matches the pathspec against the files in the repository index.",72,{"inputs":[{"name":"pathspec"},{"name":"index"},{"name":"pathspecflags"}],"output":{"name":"result"}}],[11,"match_workdir","","Match a pathspec against the working directory of a repository.",72,{"inputs":[{"name":"pathspec"},{"name":"repository"},{"name":"pathspecflags"}],"output":{"name":"result"}}],[11,"matches_path","","Try to match a path against a pathspec",72,{"inputs":[{"name":"pathspec"},{"name":"path"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"drop","","",72,{"inputs":[{"name":"pathspec"}],"output":null}],[11,"entries","","Returns an iterator over the matching filenames in this list.",73,{"inputs":[{"name":"pathspecmatchlist"}],"output":{"name":"pathspecentries"}}],[11,"entry","","Get a matching filename by position.",73,{"inputs":[{"name":"pathspecmatchlist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"diff_entries","","Returns an iterator over the matching diff entries in this list.",73,{"inputs":[{"name":"pathspecmatchlist"}],"output":{"name":"pathspecdiffentries"}}],[11,"diff_entry","","Get a matching diff delta by position.",73,{"inputs":[{"name":"pathspecmatchlist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"failed_entries","","Returns an iterator over the non-matching entries in this list.",73,{"inputs":[{"name":"pathspecmatchlist"}],"output":{"name":"pathspecfailedentries"}}],[11,"failed_entry","","Get an original pathspec string that had no matches.",73,{"inputs":[{"name":"pathspecmatchlist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"drop","","",73,{"inputs":[{"name":"pathspecmatchlist"}],"output":null}],[11,"next","","",74,{"inputs":[{"name":"pathspecentries"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"pathspecentries"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"pathspecdiffentries"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"pathspecdiffentries"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"pathspecfailedentries"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"pathspecfailedentries"}],"output":{"name":"option"}}],[11,"is_valid_name","","Ensure the reference name is well-formed.",77,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"raw","","Get access to the underlying raw pointer.",77,null],[11,"delete","","Delete an existing reference.",77,{"inputs":[{"name":"reference"}],"output":{"name":"result"}}],[11,"is_branch","","Check if a reference is a local branch.",77,{"inputs":[{"name":"reference"}],"output":{"name":"bool"}}],[11,"is_note","","Check if a reference is a note.",77,{"inputs":[{"name":"reference"}],"output":{"name":"bool"}}],[11,"is_remote","","Check if a reference is a remote tracking branch",77,{"inputs":[{"name":"reference"}],"output":{"name":"bool"}}],[11,"is_tag","","Check if a reference is a tag",77,{"inputs":[{"name":"reference"}],"output":{"name":"bool"}}],[11,"name","","Get the full name of a reference.",77,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the full name of a reference.",77,null],[11,"shorthand","","Get the full shorthand of a reference.",77,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"shorthand_bytes","","Get the full shorthand of a reference.",77,null],[11,"target","","Get the OID pointed to by a direct reference.",77,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"target_peel","","Return the peeled OID target of this reference.",77,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"symbolic_target","","Get full name to the reference pointed to by a symbolic reference.",77,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"symbolic_target_bytes","","Get full name to the reference pointed to by a symbolic reference.",77,{"inputs":[{"name":"reference"}],"output":{"name":"option"}}],[11,"resolve","","Resolve a symbolic reference to a direct reference.",77,{"inputs":[{"name":"reference"}],"output":{"name":"result"}}],[11,"peel","","Peel a reference to an object",77,{"inputs":[{"name":"reference"},{"name":"objecttype"}],"output":{"name":"result"}}],[11,"rename","","Rename an existing reference.",77,{"inputs":[{"name":"reference"},{"name":"str"},{"name":"bool"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_target","","Conditionally create a new reference with the same name as the given\nreference but a different OID target. The reference must be a direct\nreference, otherwise this will fail.",77,{"inputs":[{"name":"reference"},{"name":"oid"},{"name":"str"}],"output":{"name":"result"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"reference"},{"name":"reference"}],"output":{"name":"option"}}],[11,"cmp","","",77,{"inputs":[{"name":"reference"},{"name":"reference"}],"output":{"name":"ordering"}}],[11,"eq","","",77,{"inputs":[{"name":"reference"},{"name":"reference"}],"output":{"name":"bool"}}],[11,"drop","","",77,{"inputs":[{"name":"reference"}],"output":null}],[11,"names","","Consumes a `References` iterator to create an iterator over just the\nname of some references.",78,{"inputs":[{"name":"references"}],"output":{"name":"referencenames"}}],[11,"next","","",78,{"inputs":[{"name":"references"}],"output":{"name":"option"}}],[11,"drop","","",78,{"inputs":[{"name":"references"}],"output":null}],[11,"next","","",79,{"inputs":[{"name":"referencenames"}],"output":{"name":"option"}}],[11,"append","","Add a new entry to the in-memory reflog.",80,{"inputs":[{"name":"reflog"},{"name":"oid"},{"name":"signature"},{"name":"option"}],"output":{"name":"result"}}],[11,"remove","","Remove an entry from the reflog by its index",80,{"inputs":[{"name":"reflog"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","Lookup an entry by its index",80,{"inputs":[{"name":"reflog"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Get the number of log entries in a reflog",80,{"inputs":[{"name":"reflog"}],"output":{"name":"usize"}}],[11,"iter","","Get an iterator to all entries inside of this reflog",80,{"inputs":[{"name":"reflog"}],"output":{"name":"reflogiter"}}],[11,"write","","Write an existing in-memory reflog object back to disk using an atomic\nfile lock.",80,{"inputs":[{"name":"reflog"}],"output":{"name":"result"}}],[11,"drop","","",80,{"inputs":[{"name":"reflog"}],"output":null}],[11,"committer","","Get the committer of this entry",81,{"inputs":[{"name":"reflogentry"}],"output":{"name":"signature"}}],[11,"id_new","","Get the new oid",81,{"inputs":[{"name":"reflogentry"}],"output":{"name":"oid"}}],[11,"id_old","","Get the old oid",81,{"inputs":[{"name":"reflogentry"}],"output":{"name":"oid"}}],[11,"message","","Get the log message, returning `None` on invalid UTF-8.",81,{"inputs":[{"name":"reflogentry"}],"output":{"name":"option"}}],[11,"message_bytes","","Get the log message as a byte array.",81,{"inputs":[{"name":"reflogentry"}],"output":{"name":"option"}}],[11,"next","","",82,{"inputs":[{"name":"reflogiter"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"reflogiter"}],"output":{"name":"option"}}],[11,"direction","","Get the refspec&#39;s direction.",83,{"inputs":[{"name":"refspec"}],"output":{"name":"direction"}}],[11,"dst","","Get the destination specifier.",83,{"inputs":[{"name":"refspec"}],"output":{"name":"option"}}],[11,"dst_bytes","","Get the destination specifier, in bytes.",83,null],[11,"dst_matches","","Check if a refspec&#39;s destination descriptor matches a reference",83,{"inputs":[{"name":"refspec"},{"name":"str"}],"output":{"name":"bool"}}],[11,"src","","Get the source specifier.",83,{"inputs":[{"name":"refspec"}],"output":{"name":"option"}}],[11,"src_bytes","","Get the source specifier, in bytes.",83,null],[11,"src_matches","","Check if a refspec&#39;s source descriptor matches a reference",83,{"inputs":[{"name":"refspec"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_force","","Get the force update setting.",83,{"inputs":[{"name":"refspec"}],"output":{"name":"bool"}}],[11,"str","","Get the refspec&#39;s string.",83,{"inputs":[{"name":"refspec"}],"output":{"name":"option"}}],[11,"bytes","","Get the refspec&#39;s string as a byte array",83,null],[11,"is_valid_name","","Ensure the remote name is well-formed.",84,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","Get the remote&#39;s name.",84,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the remote&#39;s name, in bytes.",84,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"url","","Get the remote&#39;s url.",84,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"url_bytes","","Get the remote&#39;s url as a byte array.",84,null],[11,"pushurl","","Get the remote&#39;s pushurl.",84,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"pushurl_bytes","","Get the remote&#39;s pushurl as a byte array.",84,{"inputs":[{"name":"remote"}],"output":{"name":"option"}}],[11,"connect","","Open a connection to a remote.",84,{"inputs":[{"name":"remote"},{"name":"direction"}],"output":{"name":"result"}}],[11,"connected","","Check whether the remote is connected",84,{"inputs":[{"name":"remote"}],"output":{"name":"bool"}}],[11,"disconnect","","Disconnect from the remote",84,{"inputs":[{"name":"remote"}],"output":null}],[11,"download","","Download and index the packfile",84,null],[11,"refspecs","","Get the number of refspecs for a remote",84,{"inputs":[{"name":"remote"}],"output":{"name":"refspecs"}}],[11,"get_refspec","","Get the `nth` refspec from this remote.",84,{"inputs":[{"name":"remote"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fetch","","Download new data and update tips",84,null],[11,"update_tips","","Update the tips to the new state",84,{"inputs":[{"name":"remote"},{"name":"option"},{"name":"bool"},{"name":"autotagoption"},{"name":"option"}],"output":{"name":"result"}}],[11,"push","","Perform a push",84,null],[11,"stats","","Get the statistics structure that is filled in by the fetch operation.",84,{"inputs":[{"name":"remote"}],"output":{"name":"progress"}}],[11,"list","","Get the remote repository&#39;s reference advertisement list.",84,{"inputs":[{"name":"remote"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"remote"}],"output":{"name":"remote"}}],[11,"drop","","",84,{"inputs":[{"name":"remote"}],"output":null}],[11,"next","","",85,{"inputs":[{"name":"refspecs"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"refspecs"}],"output":{"name":"option"}}],[11,"is_local","","Flag if this is available locally.",86,{"inputs":[{"name":"remotehead"}],"output":{"name":"bool"}}],[11,"oid","","",86,{"inputs":[{"name":"remotehead"}],"output":{"name":"oid"}}],[11,"loid","","",86,{"inputs":[{"name":"remotehead"}],"output":{"name":"oid"}}],[11,"name","","",86,{"inputs":[{"name":"remotehead"}],"output":{"name":"str"}}],[11,"symref_target","","",86,{"inputs":[{"name":"remotehead"}],"output":{"name":"option"}}],[11,"new","","Creates a new blank set of fetch options",87,{"inputs":[],"output":{"name":"fetchoptions"}}],[11,"remote_callbacks","","Set the callbacks to use for the fetch operation.",87,{"inputs":[{"name":"fetchoptions"},{"name":"remotecallbacks"}],"output":{"name":"self"}}],[11,"prune","","Set whether to perform a prune after the fetch.",87,{"inputs":[{"name":"fetchoptions"},{"name":"fetchprune"}],"output":{"name":"self"}}],[11,"update_fetchhead","","Set whether to write the results to FETCH_HEAD.",87,{"inputs":[{"name":"fetchoptions"},{"name":"bool"}],"output":{"name":"self"}}],[11,"download_tags","","Set how to behave regarding tags on the remote, such as auto-downloading\ntags for objects we&#39;re downloading or downloading all of them.",87,{"inputs":[{"name":"fetchoptions"},{"name":"autotagoption"}],"output":{"name":"self"}}],[11,"new","","Creates a new blank set of push options",88,{"inputs":[],"output":{"name":"pushoptions"}}],[11,"remote_callbacks","","Set the callbacks to use for the fetch operation.",88,{"inputs":[{"name":"pushoptions"},{"name":"remotecallbacks"}],"output":{"name":"self"}}],[11,"packbuilder_parallelism","","If the transport being used to push to the remote requires the creation\nof a pack file, this controls the number of worker threads used by the\npackbuilder when creating that pack file to be sent to the remote.",88,{"inputs":[{"name":"pushoptions"},{"name":"u32"}],"output":{"name":"self"}}],[11,"new","","Creates a new set of empty callbacks",89,{"inputs":[],"output":{"name":"remotecallbacks"}}],[11,"credentials","","The callback through which to fetch credentials if required.",89,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"transfer_progress","","The callback through which progress is monitored.",89,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"sideband_progress","","Textual progress from the remote.",89,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"update_tips","","Each time a reference is updated locally, the callback will be called\nwith information about it.",89,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"certificate_check","","If certificate verification fails, then this callback will be invoked to\nlet the caller make the final decision of whether to allow the\nconnection to proceed.",89,{"inputs":[{"name":"remotecallbacks"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"total_objects","","Number of objects in the packfile being downloaded",90,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"indexed_objects","","Received objects that have been hashed",90,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"received_objects","","Objects which have been downloaded",90,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"local_objects","","Locally-available objects that have been injected in order to fix a thin\npack.",90,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"total_deltas","","Number of deltas in the packfile being downloaded",90,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"indexed_deltas","","Received deltas that have been hashed.",90,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"received_bytes","","Size of the packfile received up to now",90,{"inputs":[{"name":"progress"}],"output":{"name":"usize"}}],[11,"to_owned","","Convert this to an owned version of `Progress`.",90,{"inputs":[{"name":"progress"}],"output":{"name":"progress"}}],[11,"open","","Attempt to open an already-existing repository at `path`.",91,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"open_ext","","Find and open an existing repository, with additional options.",91,{"inputs":[{"name":"p"},{"name":"repositoryopenflags"},{"name":"i"}],"output":{"name":"result"}}],[11,"discover","","Attempt to open an already-existing repository at or above `path`",91,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"init","","Creates a new repository in the specified folder.",91,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"init_bare","","Creates a new `--bare` repository in the specified folder.",91,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"init_opts","","Creates a new `--bare` repository in the specified folder.",91,{"inputs":[{"name":"p"},{"name":"repositoryinitoptions"}],"output":{"name":"result"}}],[11,"clone","","Clone a remote repository.",91,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"name":"result"}}],[11,"revparse","","Execute a rev-parse operation against the `spec` listed.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"revparse_single","","Find a single object, as specified by a revision string.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"revparse_ext","","Find a single object and intermediate reference by a revision string.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_bare","","Tests whether this repository is a bare repository or not.",91,{"inputs":[{"name":"repository"}],"output":{"name":"bool"}}],[11,"is_shallow","","Tests whether this repository is a shallow clone.",91,{"inputs":[{"name":"repository"}],"output":{"name":"bool"}}],[11,"is_empty","","Tests whether this repository is empty.",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"path","","Returns the path to the `.git` folder for normal repositories or the\nrepository itself for bare repositories.",91,{"inputs":[{"name":"repository"}],"output":{"name":"path"}}],[11,"state","","Returns the current state of this repository",91,{"inputs":[{"name":"repository"}],"output":{"name":"repositorystate"}}],[11,"workdir","","Get the path of the working directory for this repository.",91,{"inputs":[{"name":"repository"}],"output":{"name":"option"}}],[11,"namespace","","Get the currently active namespace for this repository.",91,{"inputs":[{"name":"repository"}],"output":{"name":"option"}}],[11,"namespace_bytes","","Get the currently active namespace for this repository as a byte array.",91,{"inputs":[{"name":"repository"}],"output":{"name":"option"}}],[11,"remotes","","List all remotes for a given repository",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"find_remote","","Get the information for a particular remote",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote","","Add a remote with the default fetch refspec to the repository&#39;s\nconfiguration.",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_anonymous","","Create an anonymous remote",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_rename","","Give a remote a new name",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_delete","","Delete an existing persisted remote.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_add_fetch","","Add a fetch refspec to the remote&#39;s configuration",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_add_push","","Add a push refspec to the remote&#39;s configuration.",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_set_url","","Set the remote&#39;s url in the configuration",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"remote_set_pushurl","","Set the remote&#39;s url for pushing in the configuration.",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"reset","","Sets the current head to the specified object and optionally resets\nthe index and working tree to match.",91,{"inputs":[{"name":"repository"},{"name":"object"},{"name":"resettype"},{"name":"option"}],"output":{"name":"result"}}],[11,"reset_default","","Updates some entries in the index from the target commit tree.",91,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[11,"head","","Retrieve and resolve the reference pointed at by HEAD.",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"set_head","","Make the repository HEAD point to the specified reference.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_head_detached","","Make the repository HEAD directly point to the commit.",91,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"references","","Create an iterator for the repo&#39;s references",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"references_glob","","Create an iterator for the repo&#39;s references that match the specified\nglob",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"submodules","","Load all submodules for this repository and return them.",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"statuses","","Gather file status information and populate the returned structure.",91,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"status_should_ignore","","Test if the ignore rules apply to a given file.",91,{"inputs":[{"name":"repository"},{"name":"path"}],"output":{"name":"result"}}],[11,"status_file","","Get file status for a single file.",91,{"inputs":[{"name":"repository"},{"name":"path"}],"output":{"name":"result"}}],[11,"branches","","Create an iterator which loops over the requested branches.",91,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"index","","Get the Index file for this repository.",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"config","","Get the configuration file for this repository.",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"blob","","Write an in-memory buffer to the ODB as a blob.",91,null],[11,"blob_path","","Read a file from the filesystem and write its content to the Object\nDatabase as a loose blob",91,{"inputs":[{"name":"repository"},{"name":"path"}],"output":{"name":"result"}}],[11,"find_blob","","Lookup a reference to one of the objects in a repository.",91,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"branch","","Create a new branch pointing at a target commit",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"commit"},{"name":"bool"}],"output":{"name":"result"}}],[11,"find_branch","","Lookup a branch by its name in a repository.",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"branchtype"}],"output":{"name":"result"}}],[11,"commit","","Create new commit in the repository",91,null],[11,"find_commit","","Lookup a reference to one of the commits in a repository.",91,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"find_object","","Lookup a reference to one of the objects in a repository.",91,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"option"}],"output":{"name":"result"}}],[11,"reference","","Create a new direct reference.",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"oid"},{"name":"bool"},{"name":"str"}],"output":{"name":"result"}}],[11,"reference_symbolic","","Create a new symbolic reference.",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"},{"name":"bool"},{"name":"str"}],"output":{"name":"result"}}],[11,"find_reference","","Lookup a reference to one of the objects in a repository.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"refname_to_id","","Lookup a reference by name and resolve immediately to OID.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"reference_to_annotated_commit","","Creates a git_annotated_commit from the given reference.",91,{"inputs":[{"name":"repository"},{"name":"reference"}],"output":{"name":"result"}}],[11,"signature","","Create a new action signature with default user and now timestamp.",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"submodule","","Set up a new git submodule for checkout.",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"path"},{"name":"bool"}],"output":{"name":"result"}}],[11,"find_submodule","","Lookup submodule information by name or path.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"submodule_status","","Get the status for a submodule.",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"submoduleignore"}],"output":{"name":"result"}}],[11,"find_tree","","Lookup a reference to one of the objects in a repository.",91,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"treebuilder","","Create a new TreeBuilder, optionally initialized with the\nentries of the given Tree.",91,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"tag","","Create a new tag in the repository from an object",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"object"},{"name":"signature"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"tag_lightweight","","Create a new lightweight tag pointing at a target object",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"object"},{"name":"bool"}],"output":{"name":"result"}}],[11,"find_tag","","Lookup a tag object from the repository.",91,{"inputs":[{"name":"repository"},{"name":"oid"}],"output":{"name":"result"}}],[11,"tag_delete","","Delete an existing tag reference.",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"tag_names","","Get a list with all the tags in the repository.",91,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"checkout_head","","Updates files in the index and the working tree to match the content of\nthe commit pointed at by HEAD.",91,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"checkout_index","","Updates files in the working tree to match the content of the index.",91,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"checkout_tree","","Updates files in the index and working tree to match the content of the\ntree pointed at by the treeish.",91,{"inputs":[{"name":"repository"},{"name":"object"},{"name":"option"}],"output":{"name":"result"}}],[11,"merge","","Merges the given commit(s) into HEAD, writing the results into the\nworking directory. Any changes are staged for commit and any conflicts\nare written to the index. Callers should inspect the repository&#39;s index\nafter this completes, resolve any conflicts and prepare a commit.",91,null],[11,"merge_commits","","Merge two commits, producing an index that reflects the result of\nthe merge. The index may be written as-is to the working directory or\nchecked out. If the index is to be converted to a tree, the caller\nshould resolve any conflicts that arose as part of the merge.",91,{"inputs":[{"name":"repository"},{"name":"commit"},{"name":"commit"},{"name":"option"}],"output":{"name":"result"}}],[11,"cleanup_state","","Remove all the metadata associated with an ongoing command like merge,\nrevert, cherry-pick, etc. For example: MERGE_HEAD, MERGE_MSG, etc.",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"note","","Add a note for an object",91,{"inputs":[{"name":"repository"},{"name":"signature"},{"name":"signature"},{"name":"option"},{"name":"oid"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"note_default_ref","","Get the default notes reference for this repository",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"notes","","Creates a new iterator for notes in this repository.",91,{"inputs":[{"name":"repository"},{"name":"option"}],"output":{"name":"result"}}],[11,"find_note","","Read the note for an object.",91,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"oid"}],"output":{"name":"result"}}],[11,"note_delete","","Remove the note for an object.",91,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"option"},{"name":"signature"},{"name":"signature"}],"output":{"name":"result"}}],[11,"revwalk","","Create a revwalk that can be used to traverse the commit graph.",91,{"inputs":[{"name":"repository"}],"output":{"name":"result"}}],[11,"blame_file","","Get the blame for a single file.",91,{"inputs":[{"name":"repository"},{"name":"path"},{"name":"option"}],"output":{"name":"result"}}],[11,"merge_base","","Find a merge base between two commits",91,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"oid"}],"output":{"name":"result"}}],[11,"merge_bases","","Find all merge bases between two commits",91,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"oid"}],"output":{"name":"result"}}],[11,"graph_ahead_behind","","Count the number of unique commits between two commit objects",91,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"oid"}],"output":{"name":"result"}}],[11,"graph_descendant_of","","Determine if a commit is the descendant of another commit",91,{"inputs":[{"name":"repository"},{"name":"oid"},{"name":"oid"}],"output":{"name":"result"}}],[11,"reflog","","Read the reflog for the given reference",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"reflog_delete","","Delete the reflog for the given reference",91,{"inputs":[{"name":"repository"},{"name":"str"}],"output":{"name":"result"}}],[11,"reflog_rename","","Rename a reflog",91,{"inputs":[{"name":"repository"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"describe","","Describes a commit",91,{"inputs":[{"name":"repository"},{"name":"describeoptions"}],"output":{"name":"result"}}],[11,"diff_tree_to_tree","","Create a diff with the difference between two tree objects.",91,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"diff_tree_to_index","","Create a diff between a tree and repository index.",91,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"diff_index_to_workdir","","Create a diff between the repository index and the workdir directory.",91,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"diff_tree_to_workdir","","Create a diff between a tree and the working directory.",91,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"diff_tree_to_workdir_with_index","","Create a diff between a tree and the working directory using index data\nto account for staged deletes, tracked files, etc.",91,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",91,{"inputs":[{"name":"repository"}],"output":null}],[11,"new","","Creates a default set of initialization options.",92,{"inputs":[],"output":{"name":"repositoryinitoptions"}}],[11,"bare","","Create a bare repository with no working directory.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"no_reinit","","Return an error if the repository path appears to already be a git\nrepository.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"no_dotgit_dir","","Normally a &#39;/.git/&#39; will be appended to the repo apth for non-bare repos\n(if it is not already there), but passing this flag prevents that\nbehavior.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mkdir","","Make the repo path (and workdir path) as needed. The &quot;.git&quot; directory\nwill always be created regardless of this flag.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mkpath","","Recursively make all components of the repo and workdir path sas\nnecessary.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mode","","Set to one of the `RepositoryInit` constants, or a custom value.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitoptions"}}],[11,"external_template","","Enable or disable using external templates.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"workdir_path","","The path do the working directory.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"path"}],"output":{"name":"repositoryinitoptions"}}],[11,"description","","If set, this will be used to initialize the &quot;description&quot; file in the\nrepository instead of using the template content.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"template_path","","When the `external_template` option is set, this is the first location\nto check for the template directory.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"path"}],"output":{"name":"repositoryinitoptions"}}],[11,"initial_head","","The name of the head to point HEAD at.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"origin_url","","If set, then after the rest of the repository initialization is\ncompleted an `origin` remote will be added pointing to this URL.",92,{"inputs":[{"name":"repositoryinitoptions"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"raw","","Creates a set of raw init options to be used with\n`git_repository_init_ext`.",92,{"inputs":[{"name":"repositoryinitoptions"}],"output":{"name":"git_repository_init_options"}}],[11,"from_objects","","Assembles a new revspec from the from/to components.",93,{"inputs":[{"name":"option"},{"name":"option"},{"name":"revparsemode"}],"output":{"name":"revspec"}}],[11,"from","","Access the `from` range of this revspec.",93,{"inputs":[{"name":"revspec"}],"output":{"name":"option"}}],[11,"to","","Access the `to` range of this revspec.",93,{"inputs":[{"name":"revspec"}],"output":{"name":"option"}}],[11,"mode","","Returns the intent of the revspec.",93,{"inputs":[{"name":"revspec"}],"output":{"name":"revparsemode"}}],[11,"reset","","Reset a revwalk to allow re-configuring it.",94,{"inputs":[{"name":"revwalk"}],"output":null}],[11,"set_sorting","","Set the order in which commits are visited.",94,{"inputs":[{"name":"revwalk"},{"name":"sort"}],"output":null}],[11,"simplify_first_parent","","Simplify the history by first-parent",94,{"inputs":[{"name":"revwalk"}],"output":null}],[11,"push","","Mark a commit to start traversal from.",94,{"inputs":[{"name":"revwalk"},{"name":"oid"}],"output":{"name":"result"}}],[11,"push_head","","Push the repository&#39;s HEAD",94,{"inputs":[{"name":"revwalk"}],"output":{"name":"result"}}],[11,"push_glob","","Push matching references",94,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"push_range","","Push and hide the respective endpoints of the given range.",94,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"push_ref","","Push the OID pointed to by a reference",94,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"hide","","Mark a commit as not of interest to this revwalk.",94,{"inputs":[{"name":"revwalk"},{"name":"oid"}],"output":{"name":"result"}}],[11,"hide_head","","Hide the repository&#39;s HEAD",94,{"inputs":[{"name":"revwalk"}],"output":{"name":"result"}}],[11,"hide_glob","","Hide matching references.",94,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"hide_ref","","Hide the OID pointed to by a reference.",94,{"inputs":[{"name":"revwalk"},{"name":"str"}],"output":{"name":"result"}}],[11,"drop","","",94,{"inputs":[{"name":"revwalk"}],"output":null}],[11,"next","","",94,{"inputs":[{"name":"revwalk"}],"output":{"name":"option"}}],[11,"now","","Create a new action signature with a timestamp of &#39;now&#39;.",95,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Create a new action signature.",95,{"inputs":[{"name":"str"},{"name":"str"},{"name":"time"}],"output":{"name":"result"}}],[11,"name","","Gets the name on the signature.",95,{"inputs":[{"name":"signature"}],"output":{"name":"option"}}],[11,"name_bytes","","Gets the name on the signature as a byte slice.",95,null],[11,"email","","Gets the email on the signature.",95,{"inputs":[{"name":"signature"}],"output":{"name":"option"}}],[11,"email_bytes","","Gets the email on the signature as a byte slice.",95,null],[11,"when","","Get the `when` of this signature.",95,{"inputs":[{"name":"signature"}],"output":{"name":"time"}}],[11,"to_owned","","Convert a signature of any lifetime into an owned signature with a\nstatic lifetime.",95,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"clone","","",95,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"drop","","",95,{"inputs":[{"name":"signature"}],"output":null}],[11,"fmt","","",95,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"statusshow"}],"output":{"name":"statusshow"}}],[11,"new","","Creates a new blank set of status options.",96,{"inputs":[],"output":{"name":"statusoptions"}}],[11,"show","","Select the files on which to report status.",96,{"inputs":[{"name":"statusoptions"},{"name":"statusshow"}],"output":{"name":"statusoptions"}}],[11,"pathspec","","Add a path pattern to match (using fnmatch-style matching).",96,{"inputs":[{"name":"statusoptions"},{"name":"t"}],"output":{"name":"statusoptions"}}],[11,"include_untracked","","Flag whether untracked files will be included.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_ignored","","Flag whether ignored files will be included.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unmodified","","Flag to include unmodified files.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"exclude_submodules","","Flag that submodules should be skipped.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"recurse_untracked_dirs","","Flag that all files in untracked directories should be included.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"disable_pathspec_match","","Indicates that the given paths should be treated as literals paths, note\npatterns.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"recurse_ignored_dirs","","Indicates that the contents of ignored directories should be included in\nthe status.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_head_to_index","","Indicates that rename detection should be processed between the head.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_index_to_workdir","","Indicates that rename detection should be run between the index and the\nworking directory.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"sort_case_sensitively","","Override the native case sensitivity for the file system and force the\noutput to be in case sensitive order.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"sort_case_insensitively","","Override the native case sensitivity for the file system and force the\noutput to be in case-insensitive order.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_from_rewrites","","Indicates that rename detection should include rewritten files.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"no_refresh","","Bypasses the default status behavior of doing a &quot;soft&quot; index reload.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"update_index","","Refresh the stat cache in the index for files are unchanged but have\nout of date stat information in the index.",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unreadable","","",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unreadable_as_untracked","","",96,{"inputs":[{"name":"statusoptions"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"raw","","Get a pointer to the inner list of status options.",96,null],[11,"get","","Gets a status entry from this list at the specified index.",97,{"inputs":[{"name":"statuses"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Gets the count of status entries in this list.",97,{"inputs":[{"name":"statuses"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over the statuses in this list.",97,{"inputs":[{"name":"statuses"}],"output":{"name":"statusiter"}}],[11,"drop","","",97,{"inputs":[{"name":"statuses"}],"output":null}],[11,"next","","",98,{"inputs":[{"name":"statusiter"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"statusiter"}],"output":{"name":"option"}}],[11,"path_bytes","","Access the bytes for this entry&#39;s corresponding pathname",99,null],[11,"path","","Access this entry&#39;s path name as a string.",99,{"inputs":[{"name":"statusentry"}],"output":{"name":"option"}}],[11,"status","","Access the status flags for this file",99,{"inputs":[{"name":"statusentry"}],"output":{"name":"status"}}],[11,"head_to_index","","Access detailed information about the differences between the file in\nHEAD and the file in the index.",99,{"inputs":[{"name":"statusentry"}],"output":{"name":"option"}}],[11,"index_to_workdir","","Access detailed information about the differences between the file in\nthe index and the file in the working directory.",99,{"inputs":[{"name":"statusentry"}],"output":{"name":"option"}}],[11,"branch","","Get the submodule&#39;s branch.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"branch_bytes","","Get the branch for the submodule.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"url","","Get the submodule&#39;s url.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"url_bytes","","Get the url for the submodule.",100,null],[11,"name","","Get the submodule&#39;s name.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the name for the submodule.",100,null],[11,"path","","Get the path for the submodule.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"path"}}],[11,"head_id","","Get the OID for the submodule in the current HEAD tree.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"index_id","","Get the OID for the submodule in the index.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"workdir_id","","Get the OID for the submodule in the current working directory.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"option"}}],[11,"init","","Copy submodule info into &quot;.git/config&quot; file.",100,{"inputs":[{"name":"submodule"},{"name":"bool"}],"output":{"name":"result"}}],[11,"open","","Open the repository for a submodule.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"result"}}],[11,"reload","","Reread submodule info from config, index, and HEAD.",100,{"inputs":[{"name":"submodule"},{"name":"bool"}],"output":{"name":"result"}}],[11,"sync","","Copy submodule remote info into submodule repo.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"result"}}],[11,"add_to_index","","Add current submodule HEAD commit to index of superproject.",100,{"inputs":[{"name":"submodule"},{"name":"bool"}],"output":{"name":"result"}}],[11,"add_finalize","","Resolve the setup of a new git submodule.",100,{"inputs":[{"name":"submodule"}],"output":{"name":"result"}}],[11,"drop","","",100,{"inputs":[{"name":"submodule"}],"output":null}],[11,"id","","Get the id (SHA1) of a repository tag",101,{"inputs":[{"name":"tag"}],"output":{"name":"oid"}}],[11,"message","","Get the message of a tag",101,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"message_bytes","","Get the message of a tag",101,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"name","","Get the name of a tag",101,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the name of a tag",101,null],[11,"peel","","Recursively peel a tag until a non tag git_object is found",101,{"inputs":[{"name":"tag"}],"output":{"name":"result"}}],[11,"tagger","","Get the tagger (author) of a tag",101,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"target","","Get the tagged object of a tag",101,{"inputs":[{"name":"tag"}],"output":{"name":"result"}}],[11,"target_id","","Get the OID of the tagged object of a tag",101,{"inputs":[{"name":"tag"}],"output":{"name":"oid"}}],[11,"target_type","","Get the OID of the tagged object of a tag",101,{"inputs":[{"name":"tag"}],"output":{"name":"option"}}],[11,"as_object","","Casts this Tag to be usable as an `Object`",101,{"inputs":[{"name":"tag"}],"output":{"name":"object"}}],[11,"into_object","","Consumes Tag to be returned as an `Object`",101,{"inputs":[{"name":"tag"}],"output":{"name":"object"}}],[11,"drop","","",101,{"inputs":[{"name":"tag"}],"output":null}],[11,"eq","","",102,{"inputs":[{"name":"time"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"time"},{"name":"time"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"time"}],"output":{"name":"time"}}],[11,"eq","","",103,{"inputs":[{"name":"indextime"},{"name":"indextime"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"indextime"},{"name":"indextime"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"indextime"}],"output":{"name":"indextime"}}],[11,"new","","Creates a new time structure from its components.",102,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"time"}}],[11,"seconds","","Return the time, in seconds, from epoch",102,{"inputs":[{"name":"time"}],"output":{"name":"i64"}}],[11,"offset_minutes","","Return the timezone offset, in minutes",102,{"inputs":[{"name":"time"}],"output":{"name":"i32"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"time"},{"name":"time"}],"output":{"name":"option"}}],[11,"cmp","","",102,{"inputs":[{"name":"time"},{"name":"time"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new time structure from its components.",103,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"indextime"}}],[11,"seconds","","Returns the number of seconds in the second component of this time.",103,{"inputs":[{"name":"indextime"}],"output":{"name":"i32"}}],[11,"nanoseconds","","Returns the nanosecond component of this time.",103,{"inputs":[{"name":"indextime"}],"output":{"name":"u32"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"indextime"},{"name":"indextime"}],"output":{"name":"option"}}],[11,"cmp","","",103,{"inputs":[{"name":"indextime"},{"name":"indextime"}],"output":{"name":"ordering"}}],[11,"id","","Get the id (SHA1) of a repository object",104,{"inputs":[{"name":"tree"}],"output":{"name":"oid"}}],[11,"len","","Get the number of entries listed in this tree.",104,{"inputs":[{"name":"tree"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over the entries in this tree.",104,{"inputs":[{"name":"tree"}],"output":{"name":"treeiter"}}],[11,"get_id","","Lookup a tree entry by SHA value.",104,{"inputs":[{"name":"tree"},{"name":"oid"}],"output":{"name":"option"}}],[11,"get","","Lookup a tree entry by its position in the tree",104,{"inputs":[{"name":"tree"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_name","","Lookup a tree entry by its filename",104,{"inputs":[{"name":"tree"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_path","","Retrieve a tree entry contained in a tree or in any of its subtrees,\ngiven its relative path.",104,{"inputs":[{"name":"tree"},{"name":"path"}],"output":{"name":"result"}}],[11,"as_object","","Casts this Tree to be usable as an `Object`",104,{"inputs":[{"name":"tree"}],"output":{"name":"object"}}],[11,"into_object","","Consumes Commit to be returned as an `Object`",104,{"inputs":[{"name":"tree"}],"output":{"name":"object"}}],[11,"drop","","",104,{"inputs":[{"name":"tree"}],"output":null}],[11,"id","","Get the id of the object pointed by the entry",105,{"inputs":[{"name":"treeentry"}],"output":{"name":"oid"}}],[11,"name","","Get the filename of a tree entry",105,{"inputs":[{"name":"treeentry"}],"output":{"name":"option"}}],[11,"name_bytes","","Get the filename of a tree entry",105,null],[11,"to_object","","Convert a tree entry to the object it points to.",105,{"inputs":[{"name":"treeentry"},{"name":"repository"}],"output":{"name":"result"}}],[11,"kind","","Get the type of the object pointed by the entry",105,{"inputs":[{"name":"treeentry"}],"output":{"name":"option"}}],[11,"filemode","","Get the UNIX file attributes of a tree entry",105,{"inputs":[{"name":"treeentry"}],"output":{"name":"i32"}}],[11,"filemode_raw","","Get the raw UNIX file attributes of a tree entry",105,{"inputs":[{"name":"treeentry"}],"output":{"name":"i32"}}],[11,"to_owned","","Convert this entry of any lifetime into an owned signature with a static\nlifetime.",105,{"inputs":[{"name":"treeentry"}],"output":{"name":"treeentry"}}],[11,"clone","","",105,{"inputs":[{"name":"treeentry"}],"output":{"name":"treeentry"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"treeentry"},{"name":"treeentry"}],"output":{"name":"option"}}],[11,"cmp","","",105,{"inputs":[{"name":"treeentry"},{"name":"treeentry"}],"output":{"name":"ordering"}}],[11,"eq","","",105,{"inputs":[{"name":"treeentry"},{"name":"treeentry"}],"output":{"name":"bool"}}],[11,"drop","","",105,{"inputs":[{"name":"treeentry"}],"output":null}],[11,"next","","",106,{"inputs":[{"name":"treeiter"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"treeiter"}],"output":{"name":"option"}}],[11,"clear","","Clear all the entries in the builder",107,{"inputs":[{"name":"treebuilder"}],"output":null}],[11,"len","","Get the number of entries",107,{"inputs":[{"name":"treebuilder"}],"output":{"name":"usize"}}],[11,"get","","Get en entry from the builder from its filename",107,{"inputs":[{"name":"treebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"insert","","Add or update an entry in the builder",107,{"inputs":[{"name":"treebuilder"},{"name":"p"},{"name":"oid"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove","","Remove an entry from the builder by its filename",107,{"inputs":[{"name":"treebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"filter","","Selectively remove entries from the tree",107,{"inputs":[{"name":"treebuilder"},{"name":"f"}],"output":null}],[11,"write","","Write the contents of the TreeBuilder as a Tree object and\nreturn its Oid",107,{"inputs":[{"name":"treebuilder"}],"output":{"name":"result"}}],[11,"drop","","",107,{"inputs":[{"name":"treebuilder"}],"output":null}],[6,"IndexMatchedPath","","A callback function to filter index matches.",null,null],[6,"Credentials","","Callback used to acquire credentials for when a remote is fetched.",null,null],[6,"TransferProgress","","Callback to be invoked while a transfer is in progress.",null,null],[6,"TransportMessage","","Callback for receiving messages delivered by the transport.",null,null],[6,"UpdateTips","","Callback for whenever a reference is updated locally.",null,null],[17,"DEFAULT_COMMENT_CHAR","","The default comment character for message_prettify (&#39;#&#39;)",null,null],[17,"SORT_NONE","","Sort the repository contents in no particular ordering.",null,null],[17,"SORT_TOPOLOGICAL","","Sort the repository contents in topological order (parents before\nchildren).",null,null],[17,"SORT_TIME","","Sort the repository contents by commit time.",null,null],[17,"SORT_REVERSE","","Iterate through the repository contents in reverse order.",null,null],[17,"USER_PASS_PLAINTEXT","","",null,null],[17,"SSH_KEY","","",null,null],[17,"SSH_MEMORY","","",null,null],[17,"SSH_CUSTOM","","",null,null],[17,"DEFAULT","","",null,null],[17,"SSH_INTERACTIVE","","",null,null],[17,"USERNAME","","",null,null],[17,"ADD_DEFAULT","","",null,null],[17,"ADD_FORCE","","",null,null],[17,"ADD_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"ADD_CHECK_PATHSPEC","","",null,null],[17,"REPOSITORY_OPEN_NO_SEARCH","","Only open the specified path; don&#39;t walk upward searching.",null,null],[17,"REPOSITORY_OPEN_CROSS_FS","","Search across filesystem boundaries.",null,null],[17,"REPOSITORY_OPEN_BARE","","Force opening as bare repository, and defer loading its config.",null,null],[17,"REVPARSE_SINGLE","","The spec targeted a single object",null,null],[17,"REVPARSE_RANGE","","The spec targeted a range of commits",null,null],[17,"REVPARSE_MERGE_BASE","","The spec used the `...` operator, which invokes special semantics.",null,null],[17,"STATUS_CURRENT","","",null,null],[17,"STATUS_INDEX_NEW","","",null,null],[17,"STATUS_INDEX_MODIFIED","","",null,null],[17,"STATUS_INDEX_DELETED","","",null,null],[17,"STATUS_INDEX_RENAMED","","",null,null],[17,"STATUS_INDEX_TYPECHANGE","","",null,null],[17,"STATUS_WT_NEW","","",null,null],[17,"STATUS_WT_MODIFIED","","",null,null],[17,"STATUS_WT_DELETED","","",null,null],[17,"STATUS_WT_TYPECHANGE","","",null,null],[17,"STATUS_WT_RENAMED","","",null,null],[17,"STATUS_IGNORED","","",null,null],[17,"STATUS_CONFLICTED","","",null,null],[17,"REPOSITORY_INIT_SHARED_UMASK","","Use permissions configured by umask - the default",null,null],[17,"REPOSITORY_INIT_SHARED_GROUP","","Use `--shared=group` behavior, chmod&#39;ing the new repo to be\ngroup writable and \\&quot;g+sx\\&quot; for sticky group assignment",null,null],[17,"REPOSITORY_INIT_SHARED_ALL","","Use `--shared=all` behavior, adding world readability.",null,null],[17,"SUBMODULE_STATUS_IN_HEAD","","",null,null],[17,"SUBMODULE_STATUS_IN_INDEX","","",null,null],[17,"SUBMODULE_STATUS_IN_CONFIG","","",null,null],[17,"SUBMODULE_STATUS_IN_WD","","",null,null],[17,"SUBMODULE_STATUS_INDEX_ADDED","","",null,null],[17,"SUBMODULE_STATUS_INDEX_DELETED","","",null,null],[17,"SUBMODULE_STATUS_INDEX_MODIFIED","","",null,null],[17,"SUBMODULE_STATUS_WD_UNINITIALIZED","","",null,null],[17,"SUBMODULE_STATUS_WD_ADDED","","",null,null],[17,"SUBMODULE_STATUS_WD_DELETED","","",null,null],[17,"SUBMODULE_STATUS_WD_MODIFIED","","",null,null],[17,"SUBMODULE_STATUS_WD_INDEX_MODIFIED","","",null,null],[17,"SUBMODULE_STATUS_WD_WD_MODIFIED","","",null,null],[17,"SUBMODULE_STATUS_WD_UNTRACKED","","",null,null],[17,"PATHSPEC_DEFAULT","","Use the default pathspec matching configuration.",null,null],[17,"PATHSPEC_IGNORE_CASE","","Force matching to ignore case, otherwise matching will use native\ncase sensitivity fo the platform filesystem.",null,null],[17,"PATHSPEC_USE_CASE","","Force case sensitive matches, otherwise match will use the native\ncase sensitivity of the platform filesystem.",null,null],[17,"PATHSPEC_NO_GLOB","","Disable glob patterns and just use simple string comparison for\nmatching.",null,null],[17,"PATHSPEC_NO_MATCH_ERROR","","Means that match functions return the error code `NotFound` if no\nmatches are found. By default no matches is a success.",null,null],[17,"PATHSPEC_FIND_FAILURES","","Means that the list returned should track which patterns matched\nwhich files so that at the end of the match we can identify patterns\nthat did not match any files.",null,null],[17,"PATHSPEC_FAILURES_ONLY","","Means that the list returned does not need to keep the actual\nmatching filenames. Use this to just test if there were any matches\nat all or in combination with `PATHSPEC_FAILURES` to validate a\npathspec.",null,null],[17,"DIFF_STATS_NONE","","Don&#39;t generate any stats",null,null],[17,"DIFF_STATS_FULL","","Equivalent of `--stat` in git",null,null],[17,"DIFF_STATS_SHORT","","Equivalent of `--shortstat` in git",null,null],[17,"DIFF_STATS_NUMBER","","Equivalent of `--numstat` in git",null,null],[17,"DIFF_STATS_INCLUDE_SUMMARY","","Extended header information such as creations, renames and mode\nchanges, equivalent of `--summary` in git",null,null],[8,"IntoCString","","A class of types that can be converted to C strings.",null,null],[10,"into_c_string","","Consume this container, converting it into a CString",108,{"inputs":[{"name":"intocstring"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"eq","","",4,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"errorclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"errorclass"}],"output":{"name":"errorclass"}}],[11,"eq","","",5,{"inputs":[{"name":"errorclass"},{"name":"errorclass"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"repositorystate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"repositorystate"}],"output":{"name":"repositorystate"}}],[11,"eq","","",6,{"inputs":[{"name":"repositorystate"},{"name":"repositorystate"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",8,{"inputs":[{"name":"resettype"}],"output":{"name":"resettype"}}],[11,"fmt","","",9,{"inputs":[{"name":"objecttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"objecttype"}],"output":{"name":"objecttype"}}],[11,"eq","","",9,{"inputs":[{"name":"objecttype"},{"name":"objecttype"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"branchtype"}],"output":{"name":"branchtype"}}],[11,"fmt","","",10,{"inputs":[{"name":"branchtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"branchtype"},{"name":"branchtype"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"configlevel"}],"output":{"name":"configlevel"}}],[11,"fmt","","",11,{"inputs":[{"name":"configlevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"configlevel"},{"name":"configlevel"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"filefavor"}],"output":{"name":"filefavor"}}],[11,"fmt","","",12,{"inputs":[{"name":"filefavor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"filefavor"},{"name":"filefavor"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"cmp","","",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"sort"}],"output":{"name":"sort"}}],[11,"eq","","",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",109,{"inputs":[],"output":{"name":"sort"}}],[11,"all","","Returns the set containing all flags.",109,{"inputs":[],"output":{"name":"sort"}}],[11,"bits","","Returns the raw value of the flags currently stored.",109,{"inputs":[{"name":"sort"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",109,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",109,{"inputs":[{"name":"u32"}],"output":{"name":"sort"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",109,{"inputs":[{"name":"sort"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",109,{"inputs":[{"name":"sort"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"sub","","Returns the set difference of the two sets of flags.",109,{"inputs":[{"name":"sort"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"not","","Returns the complement of this set of flags.",109,{"inputs":[{"name":"sort"}],"output":{"name":"sort"}}],[11,"hash","","",110,null],[11,"cmp","","",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"eq","","",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",110,{"inputs":[],"output":{"name":"credentialtype"}}],[11,"all","","Returns the set containing all flags.",110,{"inputs":[],"output":{"name":"credentialtype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",110,{"inputs":[{"name":"credentialtype"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",110,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",110,{"inputs":[{"name":"u32"}],"output":{"name":"credentialtype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",110,{"inputs":[{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",110,{"inputs":[{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"sub","","Returns the set difference of the two sets of flags.",110,{"inputs":[{"name":"credentialtype"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"not","","Returns the complement of this set of flags.",110,{"inputs":[{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"hash","","",111,null],[11,"cmp","","",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"option"}}],[11,"lt","","",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"le","","",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"gt","","",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"ge","","",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"eq","","",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",111,{"inputs":[],"output":{"name":"indexaddoption"}}],[11,"all","","Returns the set containing all flags.",111,{"inputs":[],"output":{"name":"indexaddoption"}}],[11,"bits","","Returns the raw value of the flags currently stored.",111,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",111,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",111,{"inputs":[{"name":"u32"}],"output":{"name":"indexaddoption"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",111,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",111,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"sub","","Returns the set difference of the two sets of flags.",111,{"inputs":[{"name":"indexaddoption"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"not","","Returns the complement of this set of flags.",111,{"inputs":[{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"hash","","",112,null],[11,"cmp","","",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"eq","","",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",112,{"inputs":[],"output":{"name":"repositoryopenflags"}}],[11,"all","","Returns the set containing all flags.",112,{"inputs":[],"output":{"name":"repositoryopenflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",112,{"inputs":[{"name":"repositoryopenflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",112,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",112,{"inputs":[{"name":"u32"}],"output":{"name":"repositoryopenflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",112,{"inputs":[{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",112,{"inputs":[{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",112,{"inputs":[{"name":"repositoryopenflags"},{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"not","","Returns the complement of this set of flags.",112,{"inputs":[{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"hash","","",113,null],[11,"cmp","","",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"eq","","",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",113,{"inputs":[],"output":{"name":"revparsemode"}}],[11,"all","","Returns the set containing all flags.",113,{"inputs":[],"output":{"name":"revparsemode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",113,{"inputs":[{"name":"revparsemode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",113,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",113,{"inputs":[{"name":"u32"}],"output":{"name":"revparsemode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",113,{"inputs":[{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",113,{"inputs":[{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",113,{"inputs":[{"name":"revparsemode"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"not","","Returns the complement of this set of flags.",113,{"inputs":[{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"str","","Convert an object type to its string representation.",9,{"inputs":[{"name":"objecttype"}],"output":{"name":"str"}}],[11,"is_loose","","Determine if the given git_otype is a valid loose object type.",9,{"inputs":[{"name":"objecttype"}],"output":{"name":"bool"}}],[11,"from_raw","","Convert a raw git_otype to an ObjectType",9,{"inputs":[{"name":"git_otype"}],"output":{"name":"option"}}],[11,"raw","","Convert this kind into its raw representation",9,{"inputs":[{"name":"objecttype"}],"output":{"name":"git_otype"}}],[11,"from_str","","Convert a string object type representation to its object type.",9,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"objecttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","Converts a raw configuration level to a ConfigLevel",11,{"inputs":[{"name":"git_config_level_t"}],"output":{"name":"configlevel"}}],[11,"hash","","",114,null],[11,"cmp","","",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"eq","","",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",114,{"inputs":[],"output":{"name":"status"}}],[11,"all","","Returns the set containing all flags.",114,{"inputs":[],"output":{"name":"status"}}],[11,"bits","","Returns the raw value of the flags currently stored.",114,{"inputs":[{"name":"status"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",114,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",114,{"inputs":[{"name":"u32"}],"output":{"name":"status"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",114,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",114,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"status"}}],[11,"sub","","Returns the set difference of the two sets of flags.",114,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"status"}}],[11,"not","","Returns the complement of this set of flags.",114,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"hash","","",115,null],[11,"cmp","","",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"eq","","",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",115,{"inputs":[],"output":{"name":"repositoryinitmode"}}],[11,"all","","Returns the set containing all flags.",115,{"inputs":[],"output":{"name":"repositoryinitmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",115,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",115,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",115,{"inputs":[{"name":"u32"}],"output":{"name":"repositoryinitmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",115,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",115,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",115,{"inputs":[{"name":"repositoryinitmode"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"not","","Returns the complement of this set of flags.",115,{"inputs":[{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"fmt","","",13,{"inputs":[{"name":"delta"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"delta"}],"output":{"name":"delta"}}],[11,"hash","","",116,null],[11,"cmp","","",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"option"}}],[11,"lt","","",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"le","","",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"gt","","",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"ge","","",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"eq","","",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",116,{"inputs":[],"output":{"name":"submodulestatus"}}],[11,"all","","Returns the set containing all flags.",116,{"inputs":[],"output":{"name":"submodulestatus"}}],[11,"bits","","Returns the raw value of the flags currently stored.",116,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",116,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",116,{"inputs":[{"name":"u32"}],"output":{"name":"submodulestatus"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",116,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",116,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"sub","","Returns the set difference of the two sets of flags.",116,{"inputs":[{"name":"submodulestatus"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"not","","Returns the complement of this set of flags.",116,{"inputs":[{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"hash","","",117,null],[11,"cmp","","",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"option"}}],[11,"lt","","",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"le","","",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"gt","","",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"ge","","",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"eq","","",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",117,{"inputs":[],"output":{"name":"pathspecflags"}}],[11,"all","","Returns the set containing all flags.",117,{"inputs":[],"output":{"name":"pathspecflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",117,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",117,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",117,{"inputs":[{"name":"u32"}],"output":{"name":"pathspecflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",117,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",117,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",117,{"inputs":[{"name":"pathspecflags"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"not","","Returns the complement of this set of flags.",117,{"inputs":[{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"clone","","",15,{"inputs":[{"name":"diffformat"}],"output":{"name":"diffformat"}}],[11,"hash","","",118,null],[11,"cmp","","",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"option"}}],[11,"lt","","",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"le","","",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"gt","","",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"ge","","",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"eq","","",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",118,{"inputs":[],"output":{"name":"diffstatsformat"}}],[11,"all","","Returns the set containing all flags.",118,{"inputs":[],"output":{"name":"diffstatsformat"}}],[11,"bits","","Returns the raw value of the flags currently stored.",118,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"git_diff_stats_format_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",118,{"inputs":[{"name":"git_diff_stats_format_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",118,{"inputs":[{"name":"git_diff_stats_format_t"}],"output":{"name":"diffstatsformat"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",118,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",118,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"sub","","Returns the set difference of the two sets of flags.",118,{"inputs":[{"name":"diffstatsformat"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"not","","Returns the complement of this set of flags.",118,{"inputs":[{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}]],"paths":[[3,"CredentialHelper"],[3,"IndexEntry"],[4,"DiffBinaryKind"],[4,"StatusShow"],[4,"ErrorCode"],[4,"ErrorClass"],[4,"RepositoryState"],[4,"Direction"],[4,"ResetType"],[4,"ObjectType"],[4,"BranchType"],[4,"ConfigLevel"],[4,"FileFavor"],[4,"Delta"],[4,"SubmoduleIgnore"],[4,"DiffFormat"],[4,"AutotagOption"],[4,"FetchPrune"],[3,"String"],[3,"CString"],[3,"PathBuf"],[3,"OsString"],[3,"Vec"],[3,"RepoBuilder"],[3,"CheckoutBuilder"],[3,"Cert"],[3,"CertHostkey"],[3,"CertX509"],[3,"StringArray"],[3,"Iter"],[3,"IterBytes"],[3,"OidArray"],[4,"Service"],[8,"SmartSubtransport"],[3,"Transport"],[3,"Blame"],[3,"BlameHunk"],[3,"BlameOptions"],[3,"BlameIter"],[3,"Blob"],[3,"Branch"],[3,"Branches"],[3,"Buf"],[3,"Commit"],[3,"Parents"],[3,"Config"],[3,"ConfigEntry"],[3,"ConfigEntries"],[3,"Cred"],[3,"Describe"],[3,"DescribeFormatOptions"],[3,"DescribeOptions"],[3,"Diff"],[3,"DiffDelta"],[3,"DiffFile"],[3,"DiffOptions"],[3,"Deltas"],[3,"DiffLine"],[3,"DiffHunk"],[3,"DiffStats"],[3,"DiffBinary"],[3,"DiffBinaryFile"],[3,"DiffFindOptions"],[3,"AnnotatedCommit"],[3,"MergeOptions"],[3,"Error"],[3,"Index"],[3,"IndexEntries"],[3,"Note"],[3,"Notes"],[3,"Object"],[3,"Oid"],[3,"Pathspec"],[3,"PathspecMatchList"],[3,"PathspecEntries"],[3,"PathspecDiffEntries"],[3,"PathspecFailedEntries"],[3,"Reference"],[3,"References"],[3,"ReferenceNames"],[3,"Reflog"],[3,"ReflogEntry"],[3,"ReflogIter"],[3,"Refspec"],[3,"Remote"],[3,"Refspecs"],[3,"RemoteHead"],[3,"FetchOptions"],[3,"PushOptions"],[3,"RemoteCallbacks"],[3,"Progress"],[3,"Repository"],[3,"RepositoryInitOptions"],[3,"Revspec"],[3,"Revwalk"],[3,"Signature"],[3,"StatusOptions"],[3,"Statuses"],[3,"StatusIter"],[3,"StatusEntry"],[3,"Submodule"],[3,"Tag"],[3,"Time"],[3,"IndexTime"],[3,"Tree"],[3,"TreeEntry"],[3,"TreeIter"],[3,"TreeBuilder"],[8,"IntoCString"],[3,"Sort"],[3,"CredentialType"],[3,"IndexAddOption"],[3,"RepositoryOpenFlags"],[3,"RevparseMode"],[3,"Status"],[3,"RepositoryInitMode"],[3,"SubmoduleStatus"],[3,"PathspecFlags"],[3,"DiffStatsFormat"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[11,"new","num_bigint","Creates and initializes a BigInt.",0,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",0,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",0,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",0,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",0,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",0,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",0,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",1,null],[11,"div_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",1,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"to_biguint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",1,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",1,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",1,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",2,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",2,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",0,null],[11,"div_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",0,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[11,"fmt","num_rational","",4,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",4,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"ratio"},{"name":"__st"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",4,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",4,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",4,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"mul","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",4,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",4,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",4,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}],[6,"Rational","num","",null,null],[6,"BigRational","","",null,null],[11,"new","num_complex","Create a new Complex",6,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",6,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",6,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",6,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6,null],[11,"from_polar","","Convert a polar representation into a complex number.",6,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",6,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",6,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",6,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",6,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",6,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"complex"},{"name":"__st"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",6,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",6,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",6,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",6,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",6,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",6,null],[12,"im","","Imaginary portion of the complex number",6,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",7,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",7,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"fmt","num_traits","",8,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Num","num","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",10,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",10,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",11,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",12,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",13,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",13,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",13,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",13,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",14,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",15,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",15,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",16,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",17,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",18,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",19,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",21,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",21,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",21,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",21,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",21,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",24,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",24,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[6,"BigDigit","num::bigint","",null,null],[6,"DoubleBigDigit","","",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[0,"big_digit","","",null,null],[17,"BITS","num::bigint::big_digit","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",25,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",2,null],[13,"NoSign","","",2,null],[13,"Plus","","",2,null],[3,"BigInt","","A big signed integer type.",null,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",26,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",27,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",27,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",27,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",27,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",27,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",3,null],[13,"Other","","",3,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",6,null],[12,"im","","Imaginary portion of the complex number",6,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",7,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",7,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","num_iter","",28,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",28,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",29,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",30,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",31,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",11,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",13,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",13,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",13,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",13,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",15,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",15,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",16,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",17,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",18,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",19,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",14,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",21,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",21,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",21,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",21,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",21,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",24,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",10,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",10,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",8,null],[13,"Invalid","","",8,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",9,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",16,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",24,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",17,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",21,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",21,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",21,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",21,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",21,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",21,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",21,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",21,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",11,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",20,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",20,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",12,{"inputs":[],"output":{"name":"self"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",18,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",22,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",14,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",13,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",13,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",13,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",13,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",15,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",15,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",19,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","",null,null],[3,"ParseRatioError","","",null,null],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"BigInt"],[3,"BigUint"],[4,"Sign"],[4,"ParseBigIntError"],[3,"Ratio"],[3,"ParseRatioError"],[3,"Complex"],[8,"Integer"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["slug"] = {"doc":"","items":[[5,"slugify","slug","Convert any unicode string to an ascii &quot;slug&quot; (useful for file names/url components)",null,{"inputs":[{"name":"s"}],"output":{"name":"string"}}]],"paths":[]};
searchIndex["unidecode"] = {"doc":"The `rust-unidecode` library is a Rust port of Sean M. Burke&#39;s famous\n[`Text::Unidecode`](http://search.cpan.org/~sburke/Text-Unidecode-1.23/lib/Text/Unidecode.pm)\nmodule for Perl. It transliterates Unicode strings such as &quot;Æneid&quot; into pure\nASCII ones such as &quot;AEneid.&quot; For a detailed explanation on the rationale\nbehind using such a library, you can refer to both the documentation of the\noriginal module and\n[this article](http://interglacial.com/~sburke/tpj/as_html/tpj22.html)\nwritten by Burke in 2001.","items":[[5,"unidecode","unidecode","This function takes any Unicode string and returns an ASCII transliteration\nof that string.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"unidecode_char","","This function takes a single Unicode character and returns an ASCII\ntransliteration.",null,{"inputs":[{"name":"char"}],"output":{"name":"str"}}]],"paths":[]};
searchIndex["libgit2_sys"] = {"doc":"","items":[[3,"git_revspec","libgit2_sys","",null,null],[12,"from","","",0,null],[12,"to","","",0,null],[12,"flags","","",0,null],[3,"git_error","","",null,null],[12,"message","","",1,null],[12,"klass","","",1,null],[3,"git_oid","","",null,null],[12,"id","","",2,null],[3,"git_strarray","","",null,null],[12,"strings","","",3,null],[12,"count","","",3,null],[3,"git_oidarray","","",null,null],[12,"ids","","",4,null],[12,"count","","",4,null],[3,"git_signature","","",null,null],[12,"name","","",5,null],[12,"email","","",5,null],[12,"when","","",5,null],[3,"git_time","","",null,null],[12,"time","","",6,null],[12,"offset","","",6,null],[3,"git_clone_options","","",null,null],[12,"version","","",7,null],[12,"checkout_opts","","",7,null],[12,"fetch_opts","","",7,null],[12,"bare","","",7,null],[12,"local","","",7,null],[12,"checkout_branch","","",7,null],[12,"repository_cb","","",7,null],[12,"repository_cb_payload","","",7,null],[12,"remote_cb","","",7,null],[12,"remote_cb_payload","","",7,null],[3,"git_checkout_options","","",null,null],[12,"version","","",8,null],[12,"checkout_strategy","","",8,null],[12,"disable_filters","","",8,null],[12,"dir_mode","","",8,null],[12,"file_mode","","",8,null],[12,"file_open_flags","","",8,null],[12,"notify_flags","","",8,null],[12,"notify_cb","","",8,null],[12,"notify_payload","","",8,null],[12,"progress_cb","","",8,null],[12,"progress_payload","","",8,null],[12,"paths","","",8,null],[12,"baseline","","",8,null],[12,"baseline_index","","",8,null],[12,"target_directory","","",8,null],[12,"ancestor_label","","",8,null],[12,"our_label","","",8,null],[12,"their_label","","",8,null],[12,"perfdata_cb","","",8,null],[12,"perfdata_payload","","",8,null],[3,"git_checkout_perfdata","","",null,null],[12,"mkdir_calls","","",9,null],[12,"stat_calls","","",9,null],[12,"chmod_calls","","",9,null],[3,"git_remote_callbacks","","",null,null],[12,"version","","",10,null],[12,"sideband_progress","","",10,null],[12,"completion","","",10,null],[12,"credentials","","",10,null],[12,"certificate_check","","",10,null],[12,"transfer_progress","","",10,null],[12,"update_tips","","",10,null],[12,"pack_progress","","",10,null],[12,"push_transfer_progress","","",10,null],[12,"push_update_reference","","",10,null],[12,"push_negotiation","","",10,null],[12,"transport","","",10,null],[12,"payload","","",10,null],[3,"git_fetch_options","","",null,null],[12,"version","","",11,null],[12,"callbacks","","",11,null],[12,"prune","","",11,null],[12,"update_fetchhead","","",11,null],[12,"download_tags","","",11,null],[12,"custom_headers","","",11,null],[3,"git_push_update","","",null,null],[12,"src_refname","","",12,null],[12,"dst_refname","","",12,null],[12,"src","","",12,null],[12,"dst","","",12,null],[3,"git_cert","","",null,null],[12,"cert_type","","",13,null],[3,"git_cert_hostkey","","",null,null],[12,"parent","","",14,null],[12,"kind","","",14,null],[12,"hash_md5","","",14,null],[12,"hash_sha1","","",14,null],[3,"git_cert_x509","","",null,null],[12,"parent","","",15,null],[12,"data","","",15,null],[12,"len","","",15,null],[3,"git_transfer_progress","","",null,null],[12,"total_objects","","",16,null],[12,"indexed_objects","","",16,null],[12,"received_objects","","",16,null],[12,"local_objects","","",16,null],[12,"total_deltas","","",16,null],[12,"indexed_deltas","","",16,null],[12,"received_bytes","","",16,null],[3,"git_diff_file","","",null,null],[12,"id","","",17,null],[12,"path","","",17,null],[12,"size","","",17,null],[12,"flags","","",17,null],[12,"mode","","",17,null],[3,"git_status_options","","",null,null],[12,"version","","",18,null],[12,"show","","",18,null],[12,"flags","","",18,null],[12,"pathspec","","",18,null],[3,"git_diff_delta","","",null,null],[12,"status","","",19,null],[12,"flags","","",19,null],[12,"similarity","","",19,null],[12,"nfiles","","",19,null],[12,"old_file","","",19,null],[12,"new_file","","",19,null],[3,"git_status_entry","","",null,null],[12,"status","","",20,null],[12,"head_to_index","","",20,null],[12,"index_to_workdir","","",20,null],[3,"git_buf","","",null,null],[12,"ptr","","",21,null],[12,"asize","","",21,null],[12,"size","","",21,null],[3,"git_blame_options","","",null,null],[12,"version","","",22,null],[12,"flags","","",22,null],[12,"min_match_characters","","",22,null],[12,"newest_commit","","",22,null],[12,"oldest_commit","","",22,null],[12,"min_line","","",22,null],[12,"max_line","","",22,null],[3,"git_blame_hunk","","",null,null],[12,"lines_in_hunk","","",23,null],[12,"final_commit_id","","",23,null],[12,"final_start_line_number","","",23,null],[12,"final_signature","","",23,null],[12,"orig_commit_id","","",23,null],[12,"orig_path","","",23,null],[12,"orig_start_line_number","","",23,null],[12,"orig_signature","","",23,null],[12,"boundary","","",23,null],[3,"git_index_entry","","",null,null],[12,"ctime","","",24,null],[12,"mtime","","",24,null],[12,"dev","","",24,null],[12,"ino","","",24,null],[12,"mode","","",24,null],[12,"uid","","",24,null],[12,"gid","","",24,null],[12,"file_size","","",24,null],[12,"id","","",24,null],[12,"flags","","",24,null],[12,"flags_extended","","",24,null],[12,"path","","",24,null],[3,"git_index_time","","",null,null],[12,"seconds","","",25,null],[12,"nanoseconds","","",25,null],[3,"git_config_entry","","",null,null],[12,"name","","",26,null],[12,"value","","",26,null],[12,"level","","",26,null],[12,"free","","",26,null],[12,"payload","","",26,null],[3,"git_cred","","",null,null],[12,"credtype","","",27,null],[12,"free","","",27,null],[3,"git_push_options","","",null,null],[12,"version","","",28,null],[12,"pb_parallelism","","",28,null],[12,"callbacks","","",28,null],[12,"custom_headers","","",28,null],[3,"git_repository_init_options","","",null,null],[12,"version","","",29,null],[12,"flags","","",29,null],[12,"mode","","",29,null],[12,"workdir_path","","",29,null],[12,"description","","",29,null],[12,"template_path","","",29,null],[12,"initial_head","","",29,null],[12,"origin_url","","",29,null],[3,"git_remote_head","","",null,null],[12,"local","","",30,null],[12,"oid","","",30,null],[12,"loid","","",30,null],[12,"name","","",30,null],[12,"symref_target","","",30,null],[3,"git_diff_hunk","","",null,null],[12,"old_start","","",31,null],[12,"old_lines","","",31,null],[12,"new_start","","",31,null],[12,"new_lines","","",31,null],[12,"header_len","","",31,null],[12,"header","","",31,null],[3,"git_diff_line","","",null,null],[12,"origin","","",32,null],[12,"old_lineno","","",32,null],[12,"new_lineno","","",32,null],[12,"num_lines","","",32,null],[12,"content_len","","",32,null],[12,"content_offset","","",32,null],[12,"content","","",32,null],[3,"git_diff_options","","",null,null],[12,"version","","",33,null],[12,"flags","","",33,null],[12,"ignore_submodules","","",33,null],[12,"pathspec","","",33,null],[12,"notify_cb","","",33,null],[12,"progress_cb","","",33,null],[12,"payload","","",33,null],[12,"context_lines","","",33,null],[12,"interhunk_lines","","",33,null],[12,"id_abbrev","","",33,null],[12,"max_size","","",33,null],[12,"old_prefix","","",33,null],[12,"new_prefix","","",33,null],[3,"git_diff_find_options","","",null,null],[12,"version","","",34,null],[12,"flags","","",34,null],[12,"rename_threshold","","",34,null],[12,"rename_from_rewrite_threshold","","",34,null],[12,"copy_threshold","","",34,null],[12,"break_rewrite_threshold","","",34,null],[12,"rename_limit","","",34,null],[12,"metric","","",34,null],[3,"git_diff_similarity_metric","","",null,null],[12,"file_signature","","",35,null],[12,"buffer_signature","","",35,null],[12,"free_signature","","",35,null],[12,"similarity","","",35,null],[12,"payload","","",35,null],[3,"git_diff_binary","","",null,null],[12,"old_file","","",36,null],[12,"new_file","","",36,null],[3,"git_diff_binary_file","","",null,null],[12,"kind","","",37,null],[12,"data","","",37,null],[12,"datalen","","",37,null],[12,"inflatedlen","","",37,null],[3,"git_merge_options","","",null,null],[12,"version","","",38,null],[12,"flags","","",38,null],[12,"rename_threshold","","",38,null],[12,"target_limit","","",38,null],[12,"metric","","",38,null],[12,"recursion_limit","","",38,null],[12,"file_favor","","",38,null],[12,"file_flags","","",38,null],[3,"git_transport","","",null,null],[12,"version","","",39,null],[12,"set_callbacks","","",39,null],[12,"set_custom_headers","","",39,null],[12,"connect","","",39,null],[12,"ls","","",39,null],[12,"push","","",39,null],[12,"negotiate_fetch","","",39,null],[12,"download_pack","","",39,null],[12,"is_connected","","",39,null],[12,"read_flags","","",39,null],[12,"cancel","","",39,null],[12,"close","","",39,null],[12,"free","","",39,null],[3,"git_smart_subtransport_stream","","",null,null],[12,"subtransport","","",40,null],[12,"read","","",40,null],[12,"write","","",40,null],[12,"free","","",40,null],[3,"git_smart_subtransport","","",null,null],[12,"action","","",41,null],[12,"close","","",41,null],[12,"free","","",41,null],[3,"git_smart_subtransport_definition","","",null,null],[12,"callback","","",42,null],[12,"rpc","","",42,null],[12,"param","","",42,null],[3,"git_describe_options","","",null,null],[12,"version","","",43,null],[12,"max_candidates_tags","","",43,null],[12,"describe_strategy","","",43,null],[12,"pattern","","",43,null],[12,"only_follow_first_parent","","",43,null],[12,"show_commit_oid_as_fallback","","",43,null],[3,"git_describe_format_options","","",null,null],[12,"version","","",44,null],[12,"abbreviated_size","","",44,null],[12,"always_use_long_format","","",44,null],[12,"dirty_suffix","","",44,null],[4,"git_blob","","",null,null],[4,"git_branch_iterator","","",null,null],[4,"git_blame","","",null,null],[4,"git_commit","","",null,null],[4,"git_config","","",null,null],[4,"git_config_iterator","","",null,null],[4,"git_index","","",null,null],[4,"git_object","","",null,null],[4,"git_reference","","",null,null],[4,"git_reference_iterator","","",null,null],[4,"git_annotated_commit","","",null,null],[4,"git_refspec","","",null,null],[4,"git_remote","","",null,null],[4,"git_repository","","",null,null],[4,"git_revwalk","","",null,null],[4,"git_submodule","","",null,null],[4,"git_tag","","",null,null],[4,"git_tree","","",null,null],[4,"git_tree_entry","","",null,null],[4,"git_treebuilder","","",null,null],[4,"git_push","","",null,null],[4,"git_note","","",null,null],[4,"git_note_iterator","","",null,null],[4,"git_status_list","","",null,null],[4,"git_pathspec","","",null,null],[4,"git_pathspec_match_list","","",null,null],[4,"git_diff","","",null,null],[4,"git_diff_stats","","",null,null],[4,"git_reflog","","",null,null],[4,"git_reflog_entry","","",null,null],[4,"git_describe_result","","",null,null],[4,"LIBSSH2_SESSION","","",null,null],[4,"LIBSSH2_USERAUTH_KBDINT_PROMPT","","",null,null],[4,"LIBSSH2_USERAUTH_KBDINT_RESPONSE","","",null,null],[5,"openssl_init","","",null,{"inputs":[],"output":null}],[5,"git_libgit2_init","","",null,null],[5,"git_libgit2_shutdown","","",null,null],[5,"git_repository_free","","",null,null],[5,"git_repository_open","","",null,null],[5,"git_repository_open_ext","","",null,null],[5,"git_repository_init","","",null,null],[5,"git_repository_init_ext","","",null,null],[5,"git_repository_init_init_options","","",null,null],[5,"git_repository_get_namespace","","",null,null],[5,"git_repository_head","","",null,null],[5,"git_repository_set_head","","",null,null],[5,"git_repository_set_head_detached","","",null,null],[5,"git_repository_is_bare","","",null,null],[5,"git_repository_is_empty","","",null,null],[5,"git_repository_is_shallow","","",null,null],[5,"git_repository_path","","",null,null],[5,"git_repository_state","","",null,null],[5,"git_repository_workdir","","",null,null],[5,"git_repository_index","","",null,null],[5,"git_repository_config","","",null,null],[5,"git_repository_config_snapshot","","",null,null],[5,"git_repository_discover","","",null,null],[5,"git_revparse","","",null,null],[5,"git_revparse_single","","",null,null],[5,"git_revparse_ext","","",null,null],[5,"git_object_dup","","",null,null],[5,"git_object_id","","",null,null],[5,"git_object_free","","",null,null],[5,"git_object_lookup","","",null,null],[5,"git_object_type","","",null,null],[5,"git_object_peel","","",null,null],[5,"git_object_short_id","","",null,null],[5,"git_object_type2string","","",null,null],[5,"git_object_string2type","","",null,null],[5,"git_object_typeisloose","","",null,null],[5,"git_oid_fromraw","","",null,null],[5,"git_oid_fromstrn","","",null,null],[5,"git_oid_tostr","","",null,null],[5,"git_oid_cmp","","",null,null],[5,"git_oid_equal","","",null,null],[5,"git_oid_streq","","",null,null],[5,"git_oid_iszero","","",null,null],[5,"giterr_last","","",null,null],[5,"giterr_clear","","",null,null],[5,"giterr_set_str","","",null,null],[5,"git_remote_create","","",null,null],[5,"git_remote_lookup","","",null,null],[5,"git_remote_create_anonymous","","",null,null],[5,"git_remote_delete","","",null,null],[5,"git_remote_free","","",null,null],[5,"git_remote_name","","",null,null],[5,"git_remote_pushurl","","",null,null],[5,"git_remote_refspec_count","","",null,null],[5,"git_remote_url","","",null,null],[5,"git_remote_connect","","",null,null],[5,"git_remote_connected","","",null,null],[5,"git_remote_disconnect","","",null,null],[5,"git_remote_add_fetch","","",null,null],[5,"git_remote_add_push","","",null,null],[5,"git_remote_download","","",null,null],[5,"git_remote_stop","","",null,null],[5,"git_remote_dup","","",null,null],[5,"git_remote_get_fetch_refspecs","","",null,null],[5,"git_remote_get_refspec","","",null,null],[5,"git_remote_is_valid_name","","",null,null],[5,"git_remote_list","","",null,null],[5,"git_remote_rename","","",null,null],[5,"git_remote_fetch","","",null,null],[5,"git_remote_push","","",null,null],[5,"git_remote_update_tips","","",null,null],[5,"git_remote_set_url","","",null,null],[5,"git_remote_set_pushurl","","",null,null],[5,"git_remote_init_callbacks","","",null,null],[5,"git_fetch_init_options","","",null,null],[5,"git_remote_stats","","",null,null],[5,"git_remote_ls","","",null,null],[5,"git_remote_set_autotag","","",null,null],[5,"git_remote_prune","","",null,null],[5,"git_refspec_direction","","",null,null],[5,"git_refspec_dst","","",null,null],[5,"git_refspec_dst_matches","","",null,null],[5,"git_refspec_src","","",null,null],[5,"git_refspec_src_matches","","",null,null],[5,"git_refspec_force","","",null,null],[5,"git_refspec_string","","",null,null],[5,"git_strarray_free","","",null,null],[5,"git_oidarray_free","","",null,null],[5,"git_signature_default","","",null,null],[5,"git_signature_free","","",null,null],[5,"git_signature_new","","",null,null],[5,"git_signature_now","","",null,null],[5,"git_signature_dup","","",null,null],[5,"git_status_list_new","","",null,null],[5,"git_status_list_entrycount","","",null,null],[5,"git_status_byindex","","",null,null],[5,"git_status_list_free","","",null,null],[5,"git_status_init_options","","",null,null],[5,"git_status_file","","",null,null],[5,"git_status_should_ignore","","",null,null],[5,"git_clone","","",null,null],[5,"git_clone_init_options","","",null,null],[5,"git_reset","","",null,null],[5,"git_reset_default","","",null,null],[5,"git_reference_cmp","","",null,null],[5,"git_reference_delete","","",null,null],[5,"git_reference_free","","",null,null],[5,"git_reference_is_branch","","",null,null],[5,"git_reference_is_note","","",null,null],[5,"git_reference_is_remote","","",null,null],[5,"git_reference_is_tag","","",null,null],[5,"git_reference_is_valid_name","","",null,null],[5,"git_reference_lookup","","",null,null],[5,"git_reference_name","","",null,null],[5,"git_reference_name_to_id","","",null,null],[5,"git_reference_peel","","",null,null],[5,"git_reference_rename","","",null,null],[5,"git_reference_resolve","","",null,null],[5,"git_reference_shorthand","","",null,null],[5,"git_reference_symbolic_target","","",null,null],[5,"git_reference_target","","",null,null],[5,"git_reference_target_peel","","",null,null],[5,"git_reference_set_target","","",null,null],[5,"git_reference_type","","",null,null],[5,"git_reference_iterator_new","","",null,null],[5,"git_reference_iterator_glob_new","","",null,null],[5,"git_reference_iterator_free","","",null,null],[5,"git_reference_next","","",null,null],[5,"git_reference_next_name","","",null,null],[5,"git_reference_create","","",null,null],[5,"git_reference_symbolic_create","","",null,null],[5,"git_submodule_add_finalize","","",null,null],[5,"git_submodule_add_setup","","",null,null],[5,"git_submodule_add_to_index","","",null,null],[5,"git_submodule_branch","","",null,null],[5,"git_submodule_foreach","","",null,null],[5,"git_submodule_free","","",null,null],[5,"git_submodule_head_id","","",null,null],[5,"git_submodule_index_id","","",null,null],[5,"git_submodule_init","","",null,null],[5,"git_submodule_location","","",null,null],[5,"git_submodule_lookup","","",null,null],[5,"git_submodule_name","","",null,null],[5,"git_submodule_open","","",null,null],[5,"git_submodule_path","","",null,null],[5,"git_submodule_reload","","",null,null],[5,"git_submodule_set_ignore","","",null,null],[5,"git_submodule_set_update","","",null,null],[5,"git_submodule_set_url","","",null,null],[5,"git_submodule_sync","","",null,null],[5,"git_submodule_update_strategy","","",null,null],[5,"git_submodule_url","","",null,null],[5,"git_submodule_wd_id","","",null,null],[5,"git_submodule_status","","",null,null],[5,"git_submodule_set_branch","","",null,null],[5,"git_blob_free","","",null,null],[5,"git_blob_id","","",null,null],[5,"git_blob_is_binary","","",null,null],[5,"git_blob_lookup","","",null,null],[5,"git_blob_lookup_prefix","","",null,null],[5,"git_blob_rawcontent","","",null,null],[5,"git_blob_rawsize","","",null,null],[5,"git_blob_create_frombuffer","","",null,null],[5,"git_blob_create_fromdisk","","",null,null],[5,"git_blob_create_fromworkdir","","",null,null],[5,"git_tree_entry_byid","","",null,null],[5,"git_tree_entry_byindex","","",null,null],[5,"git_tree_entry_byname","","",null,null],[5,"git_tree_entry_bypath","","",null,null],[5,"git_tree_entry_cmp","","",null,null],[5,"git_tree_entry_dup","","",null,null],[5,"git_tree_entry_filemode","","",null,null],[5,"git_tree_entry_filemode_raw","","",null,null],[5,"git_tree_entry_free","","",null,null],[5,"git_tree_entry_id","","",null,null],[5,"git_tree_entry_name","","",null,null],[5,"git_tree_entry_to_object","","",null,null],[5,"git_tree_entry_type","","",null,null],[5,"git_tree_entrycount","","",null,null],[5,"git_tree_free","","",null,null],[5,"git_tree_id","","",null,null],[5,"git_tree_lookup","","",null,null],[5,"git_tree_walk","","",null,null],[5,"git_treebuilder_new","","",null,null],[5,"git_treebuilder_clear","","",null,null],[5,"git_treebuilder_entrycount","","",null,null],[5,"git_treebuilder_free","","",null,null],[5,"git_treebuilder_get","","",null,null],[5,"git_treebuilder_insert","","",null,null],[5,"git_treebuilder_remove","","",null,null],[5,"git_treebuilder_filter","","",null,null],[5,"git_treebuilder_write","","",null,null],[5,"git_buf_free","","",null,null],[5,"git_buf_grow","","",null,null],[5,"git_buf_set","","",null,null],[5,"git_commit_author","","",null,null],[5,"git_commit_committer","","",null,null],[5,"git_commit_free","","",null,null],[5,"git_commit_id","","",null,null],[5,"git_commit_lookup","","",null,null],[5,"git_commit_message","","",null,null],[5,"git_commit_message_encoding","","",null,null],[5,"git_commit_message_raw","","",null,null],[5,"git_commit_nth_gen_ancestor","","",null,null],[5,"git_commit_parent","","",null,null],[5,"git_commit_parent_id","","",null,null],[5,"git_commit_parentcount","","",null,null],[5,"git_commit_raw_header","","",null,null],[5,"git_commit_summary","","",null,null],[5,"git_commit_time","","",null,null],[5,"git_commit_time_offset","","",null,null],[5,"git_commit_tree","","",null,null],[5,"git_commit_tree_id","","",null,null],[5,"git_commit_amend","","",null,null],[5,"git_commit_create","","",null,null],[5,"git_commit_header_field","","",null,null],[5,"git_branch_create","","",null,null],[5,"git_branch_delete","","",null,null],[5,"git_branch_is_head","","",null,null],[5,"git_branch_iterator_free","","",null,null],[5,"git_branch_iterator_new","","",null,null],[5,"git_branch_lookup","","",null,null],[5,"git_branch_move","","",null,null],[5,"git_branch_name","","",null,null],[5,"git_branch_next","","",null,null],[5,"git_branch_set_upstream","","",null,null],[5,"git_branch_upstream","","",null,null],[5,"git_index_add","","",null,null],[5,"git_index_add_all","","",null,null],[5,"git_index_add_bypath","","",null,null],[5,"git_index_add_frombuffer","","",null,null],[5,"git_index_conflict_add","","",null,null],[5,"git_index_clear","","",null,null],[5,"git_index_entry_stage","","",null,null],[5,"git_index_entrycount","","",null,null],[5,"git_index_find","","",null,null],[5,"git_index_free","","",null,null],[5,"git_index_get_byindex","","",null,null],[5,"git_index_get_bypath","","",null,null],[5,"git_index_new","","",null,null],[5,"git_index_open","","",null,null],[5,"git_index_path","","",null,null],[5,"git_index_read","","",null,null],[5,"git_index_read_tree","","",null,null],[5,"git_index_remove","","",null,null],[5,"git_index_remove_all","","",null,null],[5,"git_index_remove_bypath","","",null,null],[5,"git_index_remove_directory","","",null,null],[5,"git_index_update_all","","",null,null],[5,"git_index_write","","",null,null],[5,"git_index_write_tree","","",null,null],[5,"git_index_write_tree_to","","",null,null],[5,"git_config_add_file_ondisk","","",null,null],[5,"git_config_delete_entry","","",null,null],[5,"git_config_delete_multivar","","",null,null],[5,"git_config_find_programdata","","",null,null],[5,"git_config_find_global","","",null,null],[5,"git_config_find_system","","",null,null],[5,"git_config_find_xdg","","",null,null],[5,"git_config_free","","",null,null],[5,"git_config_get_bool","","",null,null],[5,"git_config_get_entry","","",null,null],[5,"git_config_get_int32","","",null,null],[5,"git_config_get_int64","","",null,null],[5,"git_config_get_string","","",null,null],[5,"git_config_get_string_buf","","",null,null],[5,"git_config_get_path","","",null,null],[5,"git_config_iterator_free","","",null,null],[5,"git_config_iterator_glob_new","","",null,null],[5,"git_config_iterator_new","","",null,null],[5,"git_config_new","","",null,null],[5,"git_config_next","","",null,null],[5,"git_config_open_default","","",null,null],[5,"git_config_open_global","","",null,null],[5,"git_config_open_level","","",null,null],[5,"git_config_open_ondisk","","",null,null],[5,"git_config_parse_bool","","",null,null],[5,"git_config_parse_int32","","",null,null],[5,"git_config_parse_int64","","",null,null],[5,"git_config_set_bool","","",null,null],[5,"git_config_set_int32","","",null,null],[5,"git_config_set_int64","","",null,null],[5,"git_config_set_string","","",null,null],[5,"git_config_snapshot","","",null,null],[5,"git_config_entry_free","","",null,null],[5,"git_cred_default_new","","",null,null],[5,"git_cred_has_username","","",null,null],[5,"git_cred_ssh_custom_new","","",null,null],[5,"git_cred_ssh_interactive_new","","",null,null],[5,"git_cred_ssh_key_from_agent","","",null,null],[5,"git_cred_ssh_key_new","","",null,null],[5,"git_cred_ssh_key_memory_new","","",null,null],[5,"git_cred_userpass","","",null,null],[5,"git_cred_userpass_plaintext_new","","",null,null],[5,"git_cred_username_new","","",null,null],[5,"git_tag_annotation_create","","",null,null],[5,"git_tag_create","","",null,null],[5,"git_tag_create_frombuffer","","",null,null],[5,"git_tag_create_lightweight","","",null,null],[5,"git_tag_delete","","",null,null],[5,"git_tag_foreach","","",null,null],[5,"git_tag_free","","",null,null],[5,"git_tag_id","","",null,null],[5,"git_tag_list","","",null,null],[5,"git_tag_list_match","","",null,null],[5,"git_tag_lookup","","",null,null],[5,"git_tag_lookup_prefix","","",null,null],[5,"git_tag_message","","",null,null],[5,"git_tag_name","","",null,null],[5,"git_tag_peel","","",null,null],[5,"git_tag_tagger","","",null,null],[5,"git_tag_target","","",null,null],[5,"git_tag_target_id","","",null,null],[5,"git_tag_target_type","","",null,null],[5,"git_checkout_head","","",null,null],[5,"git_checkout_index","","",null,null],[5,"git_checkout_tree","","",null,null],[5,"git_checkout_init_options","","",null,null],[5,"git_annotated_commit_id","","",null,null],[5,"git_annotated_commit_from_ref","","",null,null],[5,"git_annotated_commit_free","","",null,null],[5,"git_merge_init_options","","",null,null],[5,"git_merge","","",null,null],[5,"git_merge_commits","","",null,null],[5,"git_repository_state_cleanup","","",null,null],[5,"git_note_author","","",null,null],[5,"git_note_committer","","",null,null],[5,"git_note_create","","",null,null],[5,"git_note_default_ref","","",null,null],[5,"git_note_free","","",null,null],[5,"git_note_id","","",null,null],[5,"git_note_iterator_free","","",null,null],[5,"git_note_iterator_new","","",null,null],[5,"git_note_message","","",null,null],[5,"git_note_next","","",null,null],[5,"git_note_read","","",null,null],[5,"git_note_remove","","",null,null],[5,"git_blame_file","","",null,null],[5,"git_blame_free","","",null,null],[5,"git_blame_init_options","","",null,null],[5,"git_blame_get_hunk_count","","",null,null],[5,"git_blame_get_hunk_byline","","",null,null],[5,"git_blame_get_hunk_byindex","","",null,null],[5,"git_revwalk_new","","",null,null],[5,"git_revwalk_free","","",null,null],[5,"git_revwalk_reset","","",null,null],[5,"git_revwalk_sorting","","",null,null],[5,"git_revwalk_push_head","","",null,null],[5,"git_revwalk_push","","",null,null],[5,"git_revwalk_push_ref","","",null,null],[5,"git_revwalk_push_glob","","",null,null],[5,"git_revwalk_push_range","","",null,null],[5,"git_revwalk_simplify_first_parent","","",null,null],[5,"git_revwalk_hide_head","","",null,null],[5,"git_revwalk_hide","","",null,null],[5,"git_revwalk_hide_ref","","",null,null],[5,"git_revwalk_hide_glob","","",null,null],[5,"git_revwalk_next","","",null,null],[5,"git_merge_base","","",null,null],[5,"git_merge_bases","","",null,null],[5,"git_pathspec_free","","",null,null],[5,"git_pathspec_match_diff","","",null,null],[5,"git_pathspec_match_index","","",null,null],[5,"git_pathspec_match_list_diff_entry","","",null,null],[5,"git_pathspec_match_list_entry","","",null,null],[5,"git_pathspec_match_list_entrycount","","",null,null],[5,"git_pathspec_match_list_failed_entry","","",null,null],[5,"git_pathspec_match_list_failed_entrycount","","",null,null],[5,"git_pathspec_match_list_free","","",null,null],[5,"git_pathspec_match_tree","","",null,null],[5,"git_pathspec_match_workdir","","",null,null],[5,"git_pathspec_matches_path","","",null,null],[5,"git_pathspec_new","","",null,null],[5,"git_diff_blob_to_buffer","","",null,null],[5,"git_diff_blobs","","",null,null],[5,"git_diff_buffers","","",null,null],[5,"git_diff_find_similar","","",null,null],[5,"git_diff_find_init_options","","",null,null],[5,"git_diff_foreach","","",null,null],[5,"git_diff_free","","",null,null],[5,"git_diff_get_delta","","",null,null],[5,"git_diff_get_stats","","",null,null],[5,"git_diff_index_to_workdir","","",null,null],[5,"git_diff_init_options","","",null,null],[5,"git_diff_is_sorted_icase","","",null,null],[5,"git_diff_merge","","",null,null],[5,"git_diff_num_deltas","","",null,null],[5,"git_diff_num_deltas_of_type","","",null,null],[5,"git_diff_print","","",null,null],[5,"git_diff_stats_deletions","","",null,null],[5,"git_diff_stats_files_changed","","",null,null],[5,"git_diff_stats_free","","",null,null],[5,"git_diff_stats_insertions","","",null,null],[5,"git_diff_stats_to_buf","","",null,null],[5,"git_diff_status_char","","",null,null],[5,"git_diff_tree_to_index","","",null,null],[5,"git_diff_tree_to_tree","","",null,null],[5,"git_diff_tree_to_workdir","","",null,null],[5,"git_diff_tree_to_workdir_with_index","","",null,null],[5,"git_graph_ahead_behind","","",null,null],[5,"git_graph_descendant_of","","",null,null],[5,"git_reflog_append","","",null,null],[5,"git_reflog_delete","","",null,null],[5,"git_reflog_drop","","",null,null],[5,"git_reflog_entry_byindex","","",null,null],[5,"git_reflog_entry_committer","","",null,null],[5,"git_reflog_entry_id_new","","",null,null],[5,"git_reflog_entry_id_old","","",null,null],[5,"git_reflog_entry_message","","",null,null],[5,"git_reflog_entrycount","","",null,null],[5,"git_reflog_free","","",null,null],[5,"git_reflog_read","","",null,null],[5,"git_reflog_rename","","",null,null],[5,"git_reflog_write","","",null,null],[5,"git_transport_register","","",null,null],[5,"git_transport_unregister","","",null,null],[5,"git_transport_smart","","",null,null],[5,"git_describe_commit","","",null,null],[5,"git_describe_format","","",null,null],[5,"git_describe_result_free","","",null,null],[5,"git_describe_workdir","","",null,null],[5,"git_message_prettify","","",null,null],[6,"git_off_t","","",null,null],[6,"git_time_t","","",null,null],[6,"git_revparse_mode_t","","",null,null],[6,"git_error_code","","",null,null],[6,"git_error_t","","",null,null],[6,"git_repository_state_t","","",null,null],[6,"git_direction","","",null,null],[6,"git_clone_local_t","","",null,null],[6,"git_checkout_notify_cb","","",null,null],[6,"git_checkout_progress_cb","","",null,null],[6,"git_checkout_perfdata_cb","","",null,null],[6,"git_remote_autotag_option_t","","",null,null],[6,"git_fetch_prune_t","","",null,null],[6,"git_remote_completion_type","","",null,null],[6,"git_transport_message_cb","","",null,null],[6,"git_cred_acquire_cb","","",null,null],[6,"git_transfer_progress_cb","","",null,null],[6,"git_packbuilder_progress","","",null,null],[6,"git_push_transfer_progress","","",null,null],[6,"git_transport_certificate_check_cb","","",null,null],[6,"git_push_negotiation","","",null,null],[6,"git_cert_t","","",null,null],[6,"git_cert_ssh_t","","",null,null],[6,"git_repository_create_cb","","",null,null],[6,"git_remote_create_cb","","",null,null],[6,"git_checkout_notify_t","","",null,null],[6,"git_status_t","","",null,null],[6,"git_status_opt_t","","",null,null],[6,"git_status_show_t","","",null,null],[6,"git_delta_t","","",null,null],[6,"git_checkout_strategy_t","","",null,null],[6,"git_reset_t","","",null,null],[6,"git_otype","","",null,null],[6,"git_ref_t","","",null,null],[6,"git_filemode_t","","",null,null],[6,"git_treewalk_mode","","",null,null],[6,"git_treewalk_cb","","",null,null],[6,"git_treebuilder_filter_cb","","",null,null],[6,"git_branch_t","","",null,null],[6,"git_index_matched_path_cb","","",null,null],[6,"git_config_level_t","","",null,null],[6,"git_submodule_update_t","","",null,null],[6,"git_submodule_ignore_t","","",null,null],[6,"git_submodule_cb","","",null,null],[6,"git_credtype_t","","",null,null],[6,"git_cred_ssh_interactive_callback","","",null,null],[6,"git_cred_sign_callback","","",null,null],[6,"git_tag_foreach_cb","","",null,null],[6,"git_index_add_option_t","","",null,null],[6,"git_repository_open_flag_t","","",null,null],[6,"git_repository_init_flag_t","","",null,null],[6,"git_repository_init_mode_t","","",null,null],[6,"git_sort_t","","",null,null],[6,"git_submodule_status_t","","",null,null],[6,"git_pathspec_flag_t","","",null,null],[6,"git_diff_file_cb","","",null,null],[6,"git_diff_hunk_cb","","",null,null],[6,"git_diff_line_cb","","",null,null],[6,"git_diff_binary_cb","","",null,null],[6,"git_diff_line_t","","",null,null],[6,"git_diff_format_t","","",null,null],[6,"git_diff_stats_format_t","","",null,null],[6,"git_diff_notify_cb","","",null,null],[6,"git_diff_progress_cb","","",null,null],[6,"git_diff_binary_t","","",null,null],[6,"git_merge_flag_t","","",null,null],[6,"git_merge_file_favor_t","","",null,null],[6,"git_merge_file_flag_t","","",null,null],[6,"git_transport_cb","","",null,null],[6,"git_smart_service_t","","",null,null],[6,"git_smart_subtransport_cb","","",null,null],[6,"git_describe_strategy_t","","",null,null],[17,"GIT_OID_RAWSZ","","",null,null],[17,"GIT_OID_HEXSZ","","",null,null],[17,"GIT_CLONE_OPTIONS_VERSION","","",null,null],[17,"GIT_CHECKOUT_OPTIONS_VERSION","","",null,null],[17,"GIT_MERGE_OPTIONS_VERSION","","",null,null],[17,"GIT_REMOTE_CALLBACKS_VERSION","","",null,null],[17,"GIT_STATUS_OPTIONS_VERSION","","",null,null],[17,"GIT_BLAME_OPTIONS_VERSION","","",null,null],[17,"GIT_REVPARSE_SINGLE","","",null,null],[17,"GIT_REVPARSE_RANGE","","",null,null],[17,"GIT_REVPARSE_MERGE_BASE","","",null,null],[17,"GIT_OK","","",null,null],[17,"GIT_ERROR","","",null,null],[17,"GIT_ENOTFOUND","","",null,null],[17,"GIT_EEXISTS","","",null,null],[17,"GIT_EAMBIGUOUS","","",null,null],[17,"GIT_EBUFS","","",null,null],[17,"GIT_EUSER","","",null,null],[17,"GIT_EBAREREPO","","",null,null],[17,"GIT_EUNBORNBRANCH","","",null,null],[17,"GIT_EUNMERGED","","",null,null],[17,"GIT_ENONFASTFORWARD","","",null,null],[17,"GIT_EINVALIDSPEC","","",null,null],[17,"GIT_ECONFLICT","","",null,null],[17,"GIT_ELOCKED","","",null,null],[17,"GIT_EMODIFIED","","",null,null],[17,"GIT_EAUTH","","",null,null],[17,"GIT_ECERTIFICATE","","",null,null],[17,"GIT_EAPPLIED","","",null,null],[17,"GIT_EPEEL","","",null,null],[17,"GIT_EEOF","","",null,null],[17,"GIT_EINVALID","","",null,null],[17,"GIT_EUNCOMMITTED","","",null,null],[17,"GIT_EDIRECTORY","","",null,null],[17,"GIT_EMERGECONFLICT","","",null,null],[17,"GIT_PASSTHROUGH","","",null,null],[17,"GIT_ITEROVER","","",null,null],[17,"GITERR_NONE","","",null,null],[17,"GITERR_NOMEMORY","","",null,null],[17,"GITERR_OS","","",null,null],[17,"GITERR_INVALID","","",null,null],[17,"GITERR_REFERENCE","","",null,null],[17,"GITERR_ZLIB","","",null,null],[17,"GITERR_REPOSITORY","","",null,null],[17,"GITERR_CONFIG","","",null,null],[17,"GITERR_REGEX","","",null,null],[17,"GITERR_ODB","","",null,null],[17,"GITERR_INDEX","","",null,null],[17,"GITERR_OBJECT","","",null,null],[17,"GITERR_NET","","",null,null],[17,"GITERR_TAG","","",null,null],[17,"GITERR_TREE","","",null,null],[17,"GITERR_INDEXER","","",null,null],[17,"GITERR_SSL","","",null,null],[17,"GITERR_SUBMODULE","","",null,null],[17,"GITERR_THREAD","","",null,null],[17,"GITERR_STASH","","",null,null],[17,"GITERR_CHECKOUT","","",null,null],[17,"GITERR_FETCHHEAD","","",null,null],[17,"GITERR_MERGE","","",null,null],[17,"GITERR_SSH","","",null,null],[17,"GITERR_FILTER","","",null,null],[17,"GITERR_REVERT","","",null,null],[17,"GITERR_CALLBACK","","",null,null],[17,"GITERR_CHERRYPICK","","",null,null],[17,"GITERR_DESCRIBE","","",null,null],[17,"GITERR_REBASE","","",null,null],[17,"GITERR_FILESYSTEM","","",null,null],[17,"GIT_REPOSITORY_STATE_NONE","","",null,null],[17,"GIT_REPOSITORY_STATE_MERGE","","",null,null],[17,"GIT_REPOSITORY_STATE_REVERT","","",null,null],[17,"GIT_REPOSITORY_STATE_REVERT_SEQUENCE","","",null,null],[17,"GIT_REPOSITORY_STATE_CHERRYPICK","","",null,null],[17,"GIT_REPOSITORY_STATE_CHERRYPICK_SEQUENCE","","",null,null],[17,"GIT_REPOSITORY_STATE_BISECT","","",null,null],[17,"GIT_REPOSITORY_STATE_REBASE","","",null,null],[17,"GIT_REPOSITORY_STATE_REBASE_INTERACTIVE","","",null,null],[17,"GIT_REPOSITORY_STATE_REBASE_MERGE","","",null,null],[17,"GIT_REPOSITORY_STATE_APPLY_MAILBOX","","",null,null],[17,"GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE","","",null,null],[17,"GIT_DIRECTION_FETCH","","",null,null],[17,"GIT_DIRECTION_PUSH","","",null,null],[17,"GIT_CLONE_LOCAL_AUTO","","",null,null],[17,"GIT_CLONE_LOCAL","","",null,null],[17,"GIT_CLONE_NO_LOCAL","","",null,null],[17,"GIT_CLONE_LOCAL_NO_LINKS","","",null,null],[17,"GIT_REMOTE_DOWNLOAD_TAGS_UNSPECIFIED","","",null,null],[17,"GIT_REMOTE_DOWNLOAD_TAGS_AUTO","","",null,null],[17,"GIT_REMOTE_DOWNLOAD_TAGS_NONE","","",null,null],[17,"GIT_REMOTE_DOWNLOAD_TAGS_ALL","","",null,null],[17,"GIT_FETCH_PRUNE_UNSPECIFIED","","",null,null],[17,"GIT_FETCH_PRUNE","","",null,null],[17,"GIT_FETCH_NO_PRUNE","","",null,null],[17,"GIT_REMOTE_COMPLETION_DOWNLOAD","","",null,null],[17,"GIT_REMOTE_COMPLETION_INDEXING","","",null,null],[17,"GIT_REMOTE_COMPLETION_ERROR","","",null,null],[17,"GIT_CERT_NONE","","",null,null],[17,"GIT_CERT_X509","","",null,null],[17,"GIT_CERT_HOSTKEY_LIBSSH2","","",null,null],[17,"GIT_CERT_SSH_MD5","","",null,null],[17,"GIT_CERT_SSH_SHA1","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_NONE","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_CONFLICT","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_DIRTY","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_UPDATED","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_UNTRACKED","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_IGNORED","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_ALL","","",null,null],[17,"GIT_STATUS_CURRENT","","",null,null],[17,"GIT_STATUS_INDEX_NEW","","",null,null],[17,"GIT_STATUS_INDEX_MODIFIED","","",null,null],[17,"GIT_STATUS_INDEX_DELETED","","",null,null],[17,"GIT_STATUS_INDEX_RENAMED","","",null,null],[17,"GIT_STATUS_INDEX_TYPECHANGE","","",null,null],[17,"GIT_STATUS_WT_NEW","","",null,null],[17,"GIT_STATUS_WT_MODIFIED","","",null,null],[17,"GIT_STATUS_WT_DELETED","","",null,null],[17,"GIT_STATUS_WT_TYPECHANGE","","",null,null],[17,"GIT_STATUS_WT_RENAMED","","",null,null],[17,"GIT_STATUS_WT_UNREADABLE","","",null,null],[17,"GIT_STATUS_IGNORED","","",null,null],[17,"GIT_STATUS_CONFLICTED","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_UNTRACKED","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_IGNORED","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_UNMODIFIED","","",null,null],[17,"GIT_STATUS_OPT_EXCLUDE_SUBMODULES","","",null,null],[17,"GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS","","",null,null],[17,"GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_STATUS_OPT_RECURSE_IGNORED_DIRS","","",null,null],[17,"GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX","","",null,null],[17,"GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR","","",null,null],[17,"GIT_STATUS_OPT_SORT_CASE_SENSITIVELY","","",null,null],[17,"GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY","","",null,null],[17,"GIT_STATUS_OPT_RENAMES_FROM_REWRITES","","",null,null],[17,"GIT_STATUS_OPT_NO_REFRESH","","",null,null],[17,"GIT_STATUS_OPT_UPDATE_INDEX","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_UNREADABLE","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED","","",null,null],[17,"GIT_STATUS_SHOW_INDEX_AND_WORKDIR","","",null,null],[17,"GIT_STATUS_SHOW_INDEX_ONLY","","",null,null],[17,"GIT_STATUS_SHOW_WORKDIR_ONLY","","",null,null],[17,"GIT_DELTA_UNMODIFIED","","",null,null],[17,"GIT_DELTA_ADDED","","",null,null],[17,"GIT_DELTA_DELETED","","",null,null],[17,"GIT_DELTA_MODIFIED","","",null,null],[17,"GIT_DELTA_RENAMED","","",null,null],[17,"GIT_DELTA_COPIED","","",null,null],[17,"GIT_DELTA_IGNORED","","",null,null],[17,"GIT_DELTA_UNTRACKED","","",null,null],[17,"GIT_DELTA_TYPECHANGE","","",null,null],[17,"GIT_DELTA_UNREADABLE","","",null,null],[17,"GIT_DELTA_CONFLICTED","","",null,null],[17,"GIT_CHECKOUT_NONE","","",null,null],[17,"GIT_CHECKOUT_SAFE","","",null,null],[17,"GIT_CHECKOUT_FORCE","","",null,null],[17,"GIT_CHECKOUT_ALLOW_CONFLICTS","","",null,null],[17,"GIT_CHECKOUT_REMOVE_UNTRACKED","","",null,null],[17,"GIT_CHECKOUT_REMOVE_IGNORED","","",null,null],[17,"GIT_CHECKOUT_UPDATE_ONLY","","",null,null],[17,"GIT_CHECKOUT_DONT_UPDATE_INDEX","","",null,null],[17,"GIT_CHECKOUT_NO_REFRESH","","",null,null],[17,"GIT_CHECKOUT_SKIP_UNMERGED","","",null,null],[17,"GIT_CHECKOUT_USE_OURS","","",null,null],[17,"GIT_CHECKOUT_USE_THEIRS","","",null,null],[17,"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES","","",null,null],[17,"GIT_CHECKOUT_DONT_OVERWRITE_IGNORED","","",null,null],[17,"GIT_CHECKOUT_CONFLICT_STYLE_MERGE","","",null,null],[17,"GIT_CHECKOUT_CONFLICT_STYLE_DIFF3","","",null,null],[17,"GIT_CHECKOUT_UPDATE_SUBMODULES","","",null,null],[17,"GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED","","",null,null],[17,"GIT_RESET_SOFT","","",null,null],[17,"GIT_RESET_MIXED","","",null,null],[17,"GIT_RESET_HARD","","",null,null],[17,"GIT_OBJ_ANY","","",null,null],[17,"GIT_OBJ_BAD","","",null,null],[17,"GIT_OBJ__EXT1","","",null,null],[17,"GIT_OBJ_COMMIT","","",null,null],[17,"GIT_OBJ_TREE","","",null,null],[17,"GIT_OBJ_BLOB","","",null,null],[17,"GIT_OBJ_TAG","","",null,null],[17,"GIT_OBJ__EXT2","","",null,null],[17,"GIT_OBJ_OFS_DELTA","","",null,null],[17,"GIT_OBJ_REF_DELTA","","",null,null],[17,"GIT_REF_INVALID","","",null,null],[17,"GIT_REF_OID","","",null,null],[17,"GIT_REF_SYMBOLIC","","",null,null],[17,"GIT_REF_LISTALL","","",null,null],[17,"GIT_FILEMODE_UNREADABLE","","",null,null],[17,"GIT_FILEMODE_TREE","","",null,null],[17,"GIT_FILEMODE_BLOB","","",null,null],[17,"GIT_FILEMODE_BLOB_EXECUTABLE","","",null,null],[17,"GIT_FILEMODE_LINK","","",null,null],[17,"GIT_FILEMODE_COMMIT","","",null,null],[17,"GIT_TREEWALK_PRE","","",null,null],[17,"GIT_TREEWALK_POST","","",null,null],[17,"GIT_BRANCH_LOCAL","","",null,null],[17,"GIT_BRANCH_REMOTE","","",null,null],[17,"GIT_BRANCH_ALL","","",null,null],[17,"GIT_BLAME_NORMAL","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_FILE","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES","","",null,null],[17,"GIT_BLAME_FIRST_PARENT","","",null,null],[17,"GIT_CONFIG_LEVEL_PROGRAMDATA","","",null,null],[17,"GIT_CONFIG_LEVEL_SYSTEM","","",null,null],[17,"GIT_CONFIG_LEVEL_XDG","","",null,null],[17,"GIT_CONFIG_LEVEL_GLOBAL","","",null,null],[17,"GIT_CONFIG_LEVEL_LOCAL","","",null,null],[17,"GIT_CONFIG_LEVEL_APP","","",null,null],[17,"GIT_CONFIG_HIGHEST_LEVEL","","",null,null],[17,"GIT_SUBMODULE_UPDATE_CHECKOUT","","",null,null],[17,"GIT_SUBMODULE_UPDATE_REBASE","","",null,null],[17,"GIT_SUBMODULE_UPDATE_MERGE","","",null,null],[17,"GIT_SUBMODULE_UPDATE_NONE","","",null,null],[17,"GIT_SUBMODULE_UPDATE_DEFAULT","","",null,null],[17,"GIT_SUBMODULE_IGNORE_UNSPECIFIED","","",null,null],[17,"GIT_SUBMODULE_IGNORE_NONE","","",null,null],[17,"GIT_SUBMODULE_IGNORE_UNTRACKED","","",null,null],[17,"GIT_SUBMODULE_IGNORE_DIRTY","","",null,null],[17,"GIT_SUBMODULE_IGNORE_ALL","","",null,null],[17,"GIT_CREDTYPE_USERPASS_PLAINTEXT","","",null,null],[17,"GIT_CREDTYPE_SSH_KEY","","",null,null],[17,"GIT_CREDTYPE_SSH_CUSTOM","","",null,null],[17,"GIT_CREDTYPE_DEFAULT","","",null,null],[17,"GIT_CREDTYPE_SSH_INTERACTIVE","","",null,null],[17,"GIT_CREDTYPE_USERNAME","","",null,null],[17,"GIT_CREDTYPE_SSH_MEMORY","","",null,null],[17,"GIT_INDEX_ADD_DEFAULT","","",null,null],[17,"GIT_INDEX_ADD_FORCE","","",null,null],[17,"GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_INDEX_ADD_CHECK_PATHSPEC","","",null,null],[17,"GIT_REPOSITORY_OPEN_NO_SEARCH","","",null,null],[17,"GIT_REPOSITORY_OPEN_CROSS_FS","","",null,null],[17,"GIT_REPOSITORY_OPEN_BARE","","",null,null],[17,"GIT_REPOSITORY_INIT_OPTIONS_VERSION","","",null,null],[17,"GIT_REPOSITORY_INIT_BARE","","",null,null],[17,"GIT_REPOSITORY_INIT_NO_REINIT","","",null,null],[17,"GIT_REPOSITORY_INIT_NO_DOTGIT_DIR","","",null,null],[17,"GIT_REPOSITORY_INIT_MKDIR","","",null,null],[17,"GIT_REPOSITORY_INIT_MKPATH","","",null,null],[17,"GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE","","",null,null],[17,"GIT_REPOSITORY_INIT_SHARED_UMASK","","",null,null],[17,"GIT_REPOSITORY_INIT_SHARED_GROUP","","",null,null],[17,"GIT_REPOSITORY_INIT_SHARED_ALL","","",null,null],[17,"GIT_SORT_NONE","","",null,null],[17,"GIT_SORT_TOPOLOGICAL","","",null,null],[17,"GIT_SORT_TIME","","",null,null],[17,"GIT_SORT_REVERSE","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_HEAD","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_INDEX","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_CONFIG","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_WD","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_ADDED","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_DELETED","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_UNINITIALIZED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_ADDED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_DELETED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_WD_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_UNTRACKED","","",null,null],[17,"GIT_PATHSPEC_DEFAULT","","",null,null],[17,"GIT_PATHSPEC_IGNORE_CASE","","",null,null],[17,"GIT_PATHSPEC_USE_CASE","","",null,null],[17,"GIT_PATHSPEC_NO_GLOB","","",null,null],[17,"GIT_PATHSPEC_NO_MATCH_ERROR","","",null,null],[17,"GIT_PATHSPEC_FIND_FAILURES","","",null,null],[17,"GIT_PATHSPEC_FAILURES_ONLY","","",null,null],[17,"GIT_DIFF_LINE_CONTEXT","","",null,null],[17,"GIT_DIFF_LINE_ADDITION","","",null,null],[17,"GIT_DIFF_LINE_DELETION","","",null,null],[17,"GIT_DIFF_LINE_CONTEXT_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_ADD_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_DEL_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_FILE_HDR","","",null,null],[17,"GIT_DIFF_LINE_HUNK_HDR","","",null,null],[17,"GIT_DIFF_LINE_BINARY","","",null,null],[17,"GIT_DIFF_FORMAT_PATCH","","",null,null],[17,"GIT_DIFF_FORMAT_PATCH_HEADER","","",null,null],[17,"GIT_DIFF_FORMAT_RAW","","",null,null],[17,"GIT_DIFF_FORMAT_NAME_ONLY","","",null,null],[17,"GIT_DIFF_FORMAT_NAME_STATUS","","",null,null],[17,"GIT_DIFF_STATS_NONE","","",null,null],[17,"GIT_DIFF_STATS_FULL","","",null,null],[17,"GIT_DIFF_STATS_SHORT","","",null,null],[17,"GIT_DIFF_STATS_NUMBER","","",null,null],[17,"GIT_DIFF_STATS_INCLUDE_SUMMARY","","",null,null],[17,"GIT_DIFF_NORMAL","","",null,null],[17,"GIT_DIFF_REVERSE","","",null,null],[17,"GIT_DIFF_INCLUDE_IGNORED","","",null,null],[17,"GIT_DIFF_RECURSE_IGNORED_DIRS","","",null,null],[17,"GIT_DIFF_INCLUDE_UNTRACKED","","",null,null],[17,"GIT_DIFF_RECURSE_UNTRACKED_DIRS","","",null,null],[17,"GIT_DIFF_INCLUDE_UNMODIFIED","","",null,null],[17,"GIT_DIFF_INCLUDE_TYPECHANGE","","",null,null],[17,"GIT_DIFF_INCLUDE_TYPECHANGE_TREES","","",null,null],[17,"GIT_DIFF_IGNORE_FILEMODE","","",null,null],[17,"GIT_DIFF_IGNORE_SUBMODULES","","",null,null],[17,"GIT_DIFF_IGNORE_CASE","","",null,null],[17,"GIT_DIFF_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_DIFF_SKIP_BINARY_CHECK","","",null,null],[17,"GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS","","",null,null],[17,"GIT_DIFF_UPDATE_INDEX","","",null,null],[17,"GIT_DIFF_INCLUDE_UNREADABLE","","",null,null],[17,"GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED","","",null,null],[17,"GIT_DIFF_FORCE_TEXT","","",null,null],[17,"GIT_DIFF_FORCE_BINARY","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE_CHANGE","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE_EOL","","",null,null],[17,"GIT_DIFF_SHOW_UNTRACKED_CONTENT","","",null,null],[17,"GIT_DIFF_SHOW_UNMODIFIED","","",null,null],[17,"GIT_DIFF_PATIENCE","","",null,null],[17,"GIT_DIFF_MINIMAL","","",null,null],[17,"GIT_DIFF_SHOW_BINARY","","",null,null],[17,"GIT_DIFF_FIND_OPTIONS_VERSION","","",null,null],[17,"GIT_DIFF_FIND_BY_CONFIG","","",null,null],[17,"GIT_DIFF_FIND_RENAMES","","",null,null],[17,"GIT_DIFF_FIND_RENAMES_FROM_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_COPIES","","",null,null],[17,"GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED","","",null,null],[17,"GIT_DIFF_FIND_REWRITES","","",null,null],[17,"GIT_DIFF_BREAK_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_AND_BREAK_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_FOR_UNTRACKED","","",null,null],[17,"GIT_DIFF_FIND_ALL","","",null,null],[17,"GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_EXACT_MATCH_ONLY","","",null,null],[17,"GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY","","",null,null],[17,"GIT_DIFF_FIND_REMOVE_UNMODIFIED","","",null,null],[17,"GIT_DIFF_BINARY_NONE","","",null,null],[17,"GIT_DIFF_BINARY_LITERAL","","",null,null],[17,"GIT_DIFF_BINARY_DELTA","","",null,null],[17,"GIT_MERGE_FIND_RENAMES","","",null,null],[17,"GIT_MERGE_FAIL_ON_CONFLICT","","",null,null],[17,"GIT_MERGE_SKIP_REUC","","",null,null],[17,"GIT_MERGE_NO_RECURSIVE","","",null,null],[17,"GIT_MERGE_FILE_FAVOR_NORMAL","","",null,null],[17,"GIT_MERGE_FILE_FAVOR_OURS","","",null,null],[17,"GIT_MERGE_FILE_FAVOR_THEIRS","","",null,null],[17,"GIT_MERGE_FILE_FAVOR_UNION","","",null,null],[17,"GIT_MERGE_FILE_DEFAULT","","",null,null],[17,"GIT_MERGE_FILE_STYLE_MERGE","","",null,null],[17,"GIT_MERGE_FILE_STYLE_DIFF3","","",null,null],[17,"GIT_MERGE_FILE_SIMPLIFY_ALNUM","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE_CHANGE","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE_EOL","","",null,null],[17,"GIT_MERGE_FILE_DIFF_PATIENCE","","",null,null],[17,"GIT_MERGE_FILE_DIFF_MINIMAL","","",null,null],[17,"GIT_SERVICE_UPLOADPACK_LS","","",null,null],[17,"GIT_SERVICE_UPLOADPACK","","",null,null],[17,"GIT_SERVICE_RECEIVEPACK_LS","","",null,null],[17,"GIT_SERVICE_RECEIVEPACK","","",null,null],[17,"GIT_DESCRIBE_DEFAULT","","",null,null],[17,"GIT_DESCRIBE_TAGS","","",null,null],[17,"GIT_DESCRIBE_ALL","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"git_oid"}],"output":{"name":"git_oid"}}],[11,"clone","","",3,{"inputs":[{"name":"git_strarray"}],"output":{"name":"git_strarray"}}],[11,"clone","","",4,{"inputs":[{"name":"git_oidarray"}],"output":{"name":"git_oidarray"}}],[11,"eq","","",6,{"inputs":[{"name":"git_time"},{"name":"git_time"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"git_time"},{"name":"git_time"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"git_time"}],"output":{"name":"git_time"}}],[11,"clone","","",16,{"inputs":[{"name":"git_transfer_progress"}],"output":{"name":"git_transfer_progress"}}],[11,"clone","","",21,{"inputs":[{"name":"git_buf"}],"output":{"name":"git_buf"}}],[11,"clone","","",22,{"inputs":[{"name":"git_blame_options"}],"output":{"name":"git_blame_options"}}],[11,"clone","","",23,{"inputs":[{"name":"git_blame_hunk"}],"output":{"name":"git_blame_hunk"}}],[11,"clone","","",24,{"inputs":[{"name":"git_index_entry"}],"output":{"name":"git_index_entry"}}],[11,"eq","","",25,{"inputs":[{"name":"git_index_time"},{"name":"git_index_time"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"git_index_time"},{"name":"git_index_time"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"git_index_time"}],"output":{"name":"git_index_time"}}]],"paths":[[3,"git_revspec"],[3,"git_error"],[3,"git_oid"],[3,"git_strarray"],[3,"git_oidarray"],[3,"git_signature"],[3,"git_time"],[3,"git_clone_options"],[3,"git_checkout_options"],[3,"git_checkout_perfdata"],[3,"git_remote_callbacks"],[3,"git_fetch_options"],[3,"git_push_update"],[3,"git_cert"],[3,"git_cert_hostkey"],[3,"git_cert_x509"],[3,"git_transfer_progress"],[3,"git_diff_file"],[3,"git_status_options"],[3,"git_diff_delta"],[3,"git_status_entry"],[3,"git_buf"],[3,"git_blame_options"],[3,"git_blame_hunk"],[3,"git_index_entry"],[3,"git_index_time"],[3,"git_config_entry"],[3,"git_cred"],[3,"git_push_options"],[3,"git_repository_init_options"],[3,"git_remote_head"],[3,"git_diff_hunk"],[3,"git_diff_line"],[3,"git_diff_options"],[3,"git_diff_find_options"],[3,"git_diff_similarity_metric"],[3,"git_diff_binary"],[3,"git_diff_binary_file"],[3,"git_merge_options"],[3,"git_transport"],[3,"git_smart_subtransport_stream"],[3,"git_smart_subtransport"],[3,"git_smart_subtransport_definition"],[3,"git_describe_options"],[3,"git_describe_format_options"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"ratio"},{"name":"__st"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",0,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["url"] = {"doc":"&lt;a href=&quot;https://github.com/servo/rust-url&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;../github.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;\n&lt;style&gt;.sidebar { margin-top: 53px }&lt;/style&gt;","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement\n`ToSocketAddrs for (Host&lt;S&gt;, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL&#39;s scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as &#39;.&#39; dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&amp;Url`.",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&amp;Url`.",0,{"inputs":[{"name":"hostandport"}],"output":{"name":"hostandport"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"hostandport"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"socketaddrs"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"origin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"origin"}],"output":{"name":"origin"}}],[11,"eq","","",1,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple\n(as opposed to an opaque origin).",1,{"inputs":[{"name":"origin"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"origin"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"origin"}],"output":{"name":"string"}}],[11,"fmt","","",6,{"inputs":[{"name":"opaqueorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"opaqueorigin"}],"output":{"name":"opaqueorigin"}}],[11,"eq","","",6,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"drop","","",7,{"inputs":[{"name":"pathsegmentsmut"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == &quot;/&quot;`.",7,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty,\nexcept if these was only one segment to begin with.",7,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"inputs":[{"name":"pathsegmentsmut"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"inputs":[{"name":"pathsegmentsmut"},{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,{"inputs":[{"name":"url"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"url"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"url"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"url"},{"name":"range"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"position"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[0,"form_urlencoded","","Parser and serializer for the [`application/x-www-form-urlencoded` syntax](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow&lt;str&gt;`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The [`application/x-www-form-urlencoded` serializer](\nhttps://url.spec.whatwg.org/#concept-urlencoded-serializer).",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax\ninto a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The [`application/x-www-form-urlencoded` byte serializer](\nhttps://url.spec.whatwg.org/#concept-urlencoded-byte-serializer).",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"inputs":[{"name":"target"}],"output":{"name":"string"}}],[10,"finish","","",9,{"inputs":[{"name":"target"}],"output":{"name":"finished"}}],[16,"Finished","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"parse"}],"output":{"name":"parse"}}],[11,"next","","",10,{"inputs":[{"name":"parse"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow&lt;str&gt;`.",10,{"inputs":[{"name":"parse"}],"output":{"name":"parseintoowned"}}],[11,"next","","",11,{"inputs":[{"name":"parseintoowned"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"byteserialize"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"as_mut_string","collections::string","",13,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"finish","","",13,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_mut_string","url","",14,{"inputs":[{"name":"urlquery"}],"output":{"name":"string"}}],[11,"finish","","",14,{"inputs":[{"name":"urlquery"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",15,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer\nfor a suffix of the given target.",15,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",15,{"inputs":[{"name":"serializer"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",15,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",15,{"inputs":[{"name":"serializer"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",15,{"inputs":[{"name":"serializer"}],"output":{"name":"finished"}}],[0,"percent_encoding","url","",null,null],[3,"SIMPLE_ENCODE_SET","url::percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on &#39;/&#39;-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_decode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points.\nShould return true for all non-ASCII bytes.",16,{"inputs":[{"name":"encodeset"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"simple_encode_set"}],"output":{"name":"simple_encode_set"}}],[11,"contains","","",17,{"inputs":[{"name":"simple_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"query_encode_set"}],"output":{"name":"query_encode_set"}}],[11,"contains","","",18,{"inputs":[{"name":"query_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"default_encode_set"}],"output":{"name":"default_encode_set"}}],[11,"contains","","",19,{"inputs":[{"name":"default_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"path_segment_encode_set"}],"output":{"name":"path_segment_encode_set"}}],[11,"contains","","",20,{"inputs":[{"name":"path_segment_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"userinfo_encode_set"}],"output":{"name":"userinfo_encode_set"}}],[11,"contains","","",21,{"inputs":[{"name":"userinfo_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"percentencode"}],"output":{"name":"percentencode"}}],[11,"next","","",22,{"inputs":[{"name":"percentencode"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"percentencode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::borrow","",23,{"inputs":[{"name":"percentencode"}],"output":{"name":"self"}}],[11,"clone","url::percent_encoding","",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"percentdecode"}}],[11,"next","","",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"from","collections::borrow","",23,{"inputs":[{"name":"percentdecode"}],"output":{"name":"self"}}],[11,"if_any","url::percent_encoding","If the percent-decoding is different from the input, return it as a new bytes vector.",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"cow"}}],[0,"quirks","url","Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api",null,null],[5,"domain_to_ascii","url::quirks","https://url.spec.whatwg.org/#dom-url-domaintoascii",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#dom-url-domaintounicode",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"href","","Getter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_href","","Setter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"origin","","Getter for https://url.spec.whatwg.org/#dom-url-origin",null,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[5,"protocol","","Getter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_protocol","","Setter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"username","","Getter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_username","","Setter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"password","","Getter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_password","","Setter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"host","","Getter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_host","","Setter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"hostname","","Getter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hostname","","Setter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"port","","Getter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_port","","Setter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"pathname","","Getter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_pathname","","Setter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"search","","Getter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_search","","Setter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"hash","","Getter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hash","","Setter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"clone","url","",8,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"clone","","",25,{"inputs":[{"name":"parseoptions"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",25,{"inputs":[{"name":"parseoptions"},{"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",25,{"inputs":[{"name":"parseoptions"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",25,{"inputs":[{"name":"parseoptions"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"inputs":[{"name":"url"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the &#39;:&#39; delimiter.",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an &#39;authority&#39;,\nwhich can contain a username, password, host, and port number.",8,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.",8,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"inputs":[{"name":"url"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with &#39;/&#39;.\nFor other URLs, this starts with a &#39;/&#39; slash\nand continues with slash-separated path segments.",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base,\nreturn an iterator of &#39;/&#39; slash-separated path segments,\neach as a percent-encoded ASCII string.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.",8,{"inputs":[{"name":"url"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.",8,{"inputs":[{"name":"url"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"inputs":[{"name":"url"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",8,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",8,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"url"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"url"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"url"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"url"},{"name":"h"}],"output":null}],[11,"as_ref","","",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"drop","","",14,{"inputs":[{"name":"urlquery"}],"output":null}],[14,"define_encode_set!","","Define a new struct\nthat implements the [`EncodeSet`](percent_encoding/trait.EncodeSet.html) trait,\nfor use in [`percent_decode()`](percent_encoding/fn.percent_encode.html)\nand related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"String"],[3,"UrlQuery"],[3,"Serializer"],[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[4,"Cow"],[3,"PercentDecode"],[3,"ParseOptions"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).","items":[[5,"domain_to_ascii","idna","The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.",null,null],[0,"punycode","","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","[*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[11,"clone","","",0,{"inputs":[{"name":"flags"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"errors"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"complex"},{"name":"__st"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed\nright-to-left and left-to-right text.  It is written in safe Rust, compatible with the\ncurrent stable release.","items":[[3,"BidiInfo","unicode_bidi","Output of `process_text`",null,null],[12,"classes","","The BidiClass of the character at each byte in the text.",0,null],[12,"levels","","The directional embedding level of each byte in the text.",0,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",0,null],[3,"ParagraphInfo","","Info about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",1,null],[12,"level","","The paragraph embedding level. http://www.unicode.org/reports/tr9/#BD4",1,null],[3,"InitialProperties","","Output of `initial_scan`",null,null],[12,"initial_classes","","The BidiClass of the character at each byte in the text.\nIf a character is multiple bytes, its class will appear multiple times in the vector.",2,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",2,null],[5,"process_text","","Determine the bidirectional embedding levels for a single paragraph.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[5,"is_ltr","","Even embedding levels are left-to-right.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_rtl","","Odd levels are right-to-left.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"reorder_line","","Re-order a line based on resolved levels.",null,null],[5,"visual_runs","","Find the level runs within a line and return them in visual order.",null,null],[5,"initial_scan","","Find the paragraphs and BidiClasses in a string of text.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialproperties"}}],[0,"tables","","",null,null],[4,"BidiClass","unicode_bidi::tables","Represents the Unicode character property **Bidi_Class**, also known as\nthe *bidirectional character type*.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the `bidi_class` function is based on.",null,null],[11,"eq","","",3,{"inputs":[{"name":"bidiclass"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"bidiclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"bidiclass"}],"output":{"name":"bidiclass"}}],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",null,null],[11,"eq","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"initialproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"initialproperties"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"initialproperties"},{"name":"initialproperties"}],"output":{"name":"bool"}}]],"paths":[[3,"BidiInfo"],[3,"ParagraphInfo"],[3,"InitialProperties"],[4,"BidiClass"]]};
searchIndex["libz_sys"] = {"doc":"","items":[[3,"gz_header","libz_sys","",null,null],[12,"text","","",0,null],[12,"time","","",0,null],[12,"xflags","","",0,null],[12,"os","","",0,null],[12,"extra","","",0,null],[12,"extra_len","","",0,null],[12,"extra_max","","",0,null],[12,"name","","",0,null],[12,"name_max","","",0,null],[12,"comment","","",0,null],[12,"comm_max","","",0,null],[12,"hcrc","","",0,null],[12,"done","","",0,null],[3,"z_stream","","",null,null],[12,"next_in","","",1,null],[12,"avail_in","","",1,null],[12,"total_in","","",1,null],[12,"next_out","","",1,null],[12,"avail_out","","",1,null],[12,"total_out","","",1,null],[12,"msg","","",1,null],[12,"state","","",1,null],[12,"zalloc","","",1,null],[12,"zfree","","",1,null],[12,"opaque","","",1,null],[12,"data_type","","",1,null],[12,"adler","","",1,null],[12,"reserved","","",1,null],[4,"gzFile_s","","",null,null],[4,"internal_state","","",null,null],[5,"adler32","","",null,null],[5,"adler32_combine","","",null,null],[5,"compress","","",null,null],[5,"compress2","","",null,null],[5,"compressBound","","",null,null],[5,"crc32","","",null,null],[5,"crc32_combine","","",null,null],[5,"deflate","","",null,null],[5,"deflateBound","","",null,null],[5,"deflateCopy","","",null,null],[5,"deflateEnd","","",null,null],[5,"deflateInit_","","",null,null],[5,"deflateInit2_","","",null,null],[5,"deflateParams","","",null,null],[5,"deflatePrime","","",null,null],[5,"deflateReset","","",null,null],[5,"deflateSetDictionary","","",null,null],[5,"deflateSetHeader","","",null,null],[5,"deflateTune","","",null,null],[5,"gzdirect","","",null,null],[5,"gzdopen","","",null,null],[5,"gzclearerr","","",null,null],[5,"gzclose","","",null,null],[5,"gzeof","","",null,null],[5,"gzerror","","",null,null],[5,"gzflush","","",null,null],[5,"gzgetc","","",null,null],[5,"gzgets","","",null,null],[5,"gzopen","","",null,null],[5,"gzputc","","",null,null],[5,"gzputs","","",null,null],[5,"gzread","","",null,null],[5,"gzrewind","","",null,null],[5,"gzseek","","",null,null],[5,"gzsetparams","","",null,null],[5,"gztell","","",null,null],[5,"gzungetc","","",null,null],[5,"gzwrite","","",null,null],[5,"inflate","","",null,null],[5,"inflateBack","","",null,null],[5,"inflateBackEnd","","",null,null],[5,"inflateBackInit_","","",null,null],[5,"inflateCopy","","",null,null],[5,"inflateEnd","","",null,null],[5,"inflateGetHeader","","",null,null],[5,"inflateInit_","","",null,null],[5,"inflateInit2_","","",null,null],[5,"inflateMark","","",null,null],[5,"inflatePrime","","",null,null],[5,"inflateReset","","",null,null],[5,"inflateReset2","","",null,null],[5,"inflateSetDictionary","","",null,null],[5,"inflateSync","","",null,null],[5,"uncompress","","",null,null],[5,"zlibCompileFlags","","",null,null],[5,"zlibVersion","","",null,null],[6,"alloc_func","","",null,null],[6,"Bytef","","",null,null],[6,"free_func","","",null,null],[6,"gzFile","","",null,null],[6,"in_func","","",null,null],[6,"out_func","","",null,null],[6,"uInt","","",null,null],[6,"uLong","","",null,null],[6,"uLongf","","",null,null],[6,"voidp","","",null,null],[6,"voidpc","","",null,null],[6,"voidpf","","",null,null],[6,"z_off_t","","",null,null],[6,"gz_headerp","","",null,null],[6,"z_streamp","","",null,null],[17,"Z_NO_FLUSH","","",null,null],[17,"Z_PARTIAL_FLUSH","","",null,null],[17,"Z_SYNC_FLUSH","","",null,null],[17,"Z_FULL_FLUSH","","",null,null],[17,"Z_FINISH","","",null,null],[17,"Z_BLOCK","","",null,null],[17,"Z_TREES","","",null,null],[17,"Z_OK","","",null,null],[17,"Z_STREAM_END","","",null,null],[17,"Z_NEED_DICT","","",null,null],[17,"Z_ERRNO","","",null,null],[17,"Z_STREAM_ERROR","","",null,null],[17,"Z_DATA_ERROR","","",null,null],[17,"Z_MEM_ERROR","","",null,null],[17,"Z_BUF_ERROR","","",null,null],[17,"Z_VERSION_ERROR","","",null,null],[17,"Z_NO_COMPRESSION","","",null,null],[17,"Z_BEST_SPEED","","",null,null],[17,"Z_BEST_COMPRESSION","","",null,null],[17,"Z_DEFAULT_COMPRESSION","","",null,null],[17,"Z_FILTERED","","",null,null],[17,"Z_HUFFMAN_ONLY","","",null,null],[17,"Z_RLE","","",null,null],[17,"Z_FIXED","","",null,null],[17,"Z_DEFAULT_STRATEGY","","",null,null],[17,"Z_BINARY","","",null,null],[17,"Z_TEXT","","",null,null],[17,"Z_ASCII","","",null,null],[17,"Z_UNKNOWN","","",null,null],[17,"Z_DEFLATED","","",null,null]],"paths":[[3,"gz_header"],[3,"z_stream"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",1,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"streammatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"streammatches"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"matchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"matchesoverlapping"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"streammatchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"streammatchesoverlapping"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"automaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"transitions"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"transitions"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"transitions"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"acautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",9,{"inputs":[{"name":"dense"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"dense"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"sparse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"sparse"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"acautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"utf8sequence"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"utf8range"}],"output":{"name":"utf8range"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"utf8range"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"utf8range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"utf8sequences"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["openssl_sys"] = {"doc":"","items":[[3,"stack_st_X509_EXTENSION","openssl_sys","",null,null],[12,"stack","","",0,null],[3,"stack_st_GENERAL_NAME","","",null,null],[12,"stack","","",1,null],[3,"stack_st_void","","",null,null],[12,"stack","","",2,null],[3,"BIO_METHOD","","",null,null],[12,"type_","","",3,null],[12,"name","","",3,null],[12,"bwrite","","",3,null],[12,"bread","","",3,null],[12,"bputs","","",3,null],[12,"bgets","","",3,null],[12,"ctrl","","",3,null],[12,"create","","",3,null],[12,"destroy","","",3,null],[12,"callback_ctrl","","",3,null],[3,"_STACK","","",null,null],[12,"num","","",4,null],[12,"data","","",4,null],[12,"sorted","","",4,null],[12,"num_alloc","","",4,null],[12,"comp","","",4,null],[3,"RSA","","",null,null],[12,"pad","","",5,null],[12,"version","","",5,null],[12,"meth","","",5,null],[12,"engine","","",5,null],[12,"n","","",5,null],[12,"e","","",5,null],[12,"d","","",5,null],[12,"p","","",5,null],[12,"q","","",5,null],[12,"dmp1","","",5,null],[12,"dmq1","","",5,null],[12,"iqmp","","",5,null],[12,"ex_data","","",5,null],[12,"references","","",5,null],[12,"flags","","",5,null],[12,"_method_mod_n","","",5,null],[12,"_method_mod_p","","",5,null],[12,"_method_mod_q","","",5,null],[12,"bignum_data","","",5,null],[12,"blinding","","",5,null],[12,"mt_blinding","","",5,null],[3,"EVP_PKEY","","",null,null],[12,"type_","","",6,null],[12,"save_type","","",6,null],[12,"references","","",6,null],[12,"ameth","","",6,null],[12,"engine","","",6,null],[12,"pkey","","",6,null],[12,"save_parameters","","",6,null],[12,"attributes","","",6,null],[3,"BIO","","",null,null],[12,"method","","",7,null],[12,"callback","","",7,null],[12,"cb_arg","","",7,null],[12,"init","","",7,null],[12,"shutdown","","",7,null],[12,"flags","","",7,null],[12,"retry_reason","","",7,null],[12,"num","","",7,null],[12,"ptr","","",7,null],[12,"next_bio","","",7,null],[12,"prev_bio","","",7,null],[12,"references","","",7,null],[12,"num_read","","",7,null],[12,"num_write","","",7,null],[12,"ex_data","","",7,null],[3,"CRYPTO_EX_DATA","","",null,null],[12,"sk","","",8,null],[12,"dummy","","",8,null],[3,"EVP_MD_CTX","","",null,null],[3,"HMAC_CTX","","",null,null],[3,"X509V3_CTX","","",null,null],[3,"GENERAL_NAME","","",null,null],[12,"type_","","",9,null],[12,"d","","",9,null],[3,"BIGNUM","","",null,null],[12,"d","","",10,null],[12,"top","","",10,null],[12,"dmax","","",10,null],[12,"neg","","",10,null],[12,"flags","","",10,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"ASN1_INTEGER_set","","",null,null],[5,"ASN1_STRING_type_new","","",null,null],[5,"ASN1_TIME_free","","",null,null],[5,"BIO_ctrl","","",null,null],[5,"BIO_free_all","","",null,null],[5,"BIO_new","","",null,null],[5,"BIO_new_socket","","",null,null],[5,"BIO_read","","",null,null],[5,"BIO_write","","",null,null],[5,"BIO_s_mem","","",null,null],[5,"BN_new","","",null,null],[5,"BN_dup","","",null,null],[5,"BN_clear_free","","",null,null],[5,"BN_CTX_new","","",null,null],[5,"BN_CTX_free","","",null,null],[5,"BN_num_bits","","",null,null],[5,"BN_set_negative","","",null,null],[5,"BN_set_word","","",null,null],[5,"BN_add","","",null,null],[5,"BN_div","","",null,null],[5,"BN_exp","","",null,null],[5,"BN_gcd","","",null,null],[5,"BN_mod_add","","",null,null],[5,"BN_mod_exp","","",null,null],[5,"BN_mod_inverse","","",null,null],[5,"BN_mod_mul","","",null,null],[5,"BN_mod_sqr","","",null,null],[5,"BN_mod_sub","","",null,null],[5,"BN_mul","","",null,null],[5,"BN_nnmod","","",null,null],[5,"BN_add_word","","",null,null],[5,"BN_sub_word","","",null,null],[5,"BN_mul_word","","",null,null],[5,"BN_div_word","","",null,null],[5,"BN_mod_word","","",null,null],[5,"BN_sqr","","",null,null],[5,"BN_sub","","",null,null],[5,"BN_clear_bit","","",null,null],[5,"BN_is_bit_set","","",null,null],[5,"BN_lshift","","",null,null],[5,"BN_lshift1","","",null,null],[5,"BN_mask_bits","","",null,null],[5,"BN_rshift","","",null,null],[5,"BN_set_bit","","",null,null],[5,"BN_rshift1","","",null,null],[5,"BN_cmp","","",null,null],[5,"BN_ucmp","","",null,null],[5,"BN_generate_prime_ex","","",null,null],[5,"BN_is_prime_ex","","",null,null],[5,"BN_is_prime_fasttest_ex","","",null,null],[5,"BN_rand","","",null,null],[5,"BN_pseudo_rand","","",null,null],[5,"BN_rand_range","","",null,null],[5,"BN_pseudo_rand_range","","",null,null],[5,"BN_bin2bn","","",null,null],[5,"BN_bn2bin","","",null,null],[5,"BN_dec2bn","","",null,null],[5,"BN_bn2dec","","",null,null],[5,"BN_hex2bn","","",null,null],[5,"BN_bn2hex","","",null,null],[5,"CRYPTO_num_locks","","",null,null],[5,"CRYPTO_set_locking_callback","","",null,null],[5,"CRYPTO_set_id_callback","","",null,null],[5,"CRYPTO_free","","",null,null],[5,"CRYPTO_memcmp","","",null,null],[5,"DH_free","","",null,null],[5,"DH_new_from_params","","",null,null],[5,"ERR_get_error","","",null,null],[5,"ERR_lib_error_string","","",null,null],[5,"ERR_func_error_string","","",null,null],[5,"ERR_reason_error_string","","",null,null],[5,"ERR_load_crypto_strings","","",null,null],[5,"EVP_md5","","",null,null],[5,"EVP_ripemd160","","",null,null],[5,"EVP_sha1","","",null,null],[5,"EVP_sha224","","",null,null],[5,"EVP_sha256","","",null,null],[5,"EVP_sha384","","",null,null],[5,"EVP_sha512","","",null,null],[5,"EVP_aes_128_cbc","","",null,null],[5,"EVP_aes_128_ecb","","",null,null],[5,"EVP_aes_128_cfb1","","",null,null],[5,"EVP_aes_128_cfb128","","",null,null],[5,"EVP_aes_128_cfb8","","",null,null],[5,"EVP_aes_256_cbc","","",null,null],[5,"EVP_aes_256_ecb","","",null,null],[5,"EVP_aes_256_cfb1","","",null,null],[5,"EVP_aes_256_cfb128","","",null,null],[5,"EVP_aes_256_cfb8","","",null,null],[5,"EVP_rc4","","",null,null],[5,"EVP_des_cbc","","",null,null],[5,"EVP_des_ecb","","",null,null],[5,"EVP_BytesToKey","","",null,null],[5,"EVP_CIPHER_CTX_new","","",null,null],[5,"EVP_CIPHER_CTX_set_padding","","",null,null],[5,"EVP_CIPHER_CTX_free","","",null,null],[5,"EVP_CipherInit","","",null,null],[5,"EVP_CipherUpdate","","",null,null],[5,"EVP_CipherFinal","","",null,null],[5,"EVP_DigestInit","","",null,null],[5,"EVP_DigestInit_ex","","",null,null],[5,"EVP_DigestUpdate","","",null,null],[5,"EVP_DigestFinal","","",null,null],[5,"EVP_DigestFinal_ex","","",null,null],[5,"EVP_MD_CTX_create","","",null,null],[5,"EVP_MD_CTX_copy_ex","","",null,null],[5,"EVP_MD_CTX_destroy","","",null,null],[5,"EVP_PKEY_new","","",null,null],[5,"EVP_PKEY_free","","",null,null],[5,"EVP_PKEY_assign","","",null,null],[5,"EVP_PKEY_copy_parameters","","",null,null],[5,"EVP_PKEY_get1_RSA","","",null,null],[5,"EVP_PKEY_set1_RSA","","",null,null],[5,"EVP_PKEY_cmp","","",null,null],[5,"HMAC_CTX_init","","",null,null],[5,"HMAC_CTX_cleanup","","",null,null],[5,"PEM_read_bio_DHparams","","",null,null],[5,"PEM_read_bio_X509","","",null,null],[5,"PEM_read_bio_X509_REQ","","",null,null],[5,"PEM_read_bio_PrivateKey","","",null,null],[5,"PEM_read_bio_PUBKEY","","",null,null],[5,"PEM_read_bio_RSAPrivateKey","","",null,null],[5,"PEM_read_bio_RSA_PUBKEY","","",null,null],[5,"PEM_write_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PUBKEY","","",null,null],[5,"PEM_write_bio_X509","","",null,null],[5,"PEM_write_bio_X509_REQ","","",null,null],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",null,null],[5,"RAND_bytes","","",null,null],[5,"RSA_new","","",null,null],[5,"RSA_free","","",null,null],[5,"RSA_generate_key","","",null,null],[5,"RSA_generate_key_ex","","",null,null],[5,"RSA_private_decrypt","","",null,null],[5,"RSA_public_decrypt","","",null,null],[5,"RSA_private_encrypt","","",null,null],[5,"RSA_public_encrypt","","",null,null],[5,"RSA_sign","","",null,null],[5,"RSA_size","","",null,null],[5,"RSA_verify","","",null,null],[5,"SSL_library_init","","",null,null],[5,"SSL_load_error_strings","","",null,null],[5,"SSLv3_method","","",null,null],[5,"TLSv1_method","","",null,null],[5,"SSLv23_method","","",null,null],[5,"SSL_new","","",null,null],[5,"SSL_pending","","",null,null],[5,"SSL_free","","",null,null],[5,"SSL_set_bio","","",null,null],[5,"SSL_get_rbio","","",null,null],[5,"SSL_get_wbio","","",null,null],[5,"SSL_accept","","",null,null],[5,"SSL_connect","","",null,null],[5,"SSL_ctrl","","",null,null],[5,"SSL_get_error","","",null,null],[5,"SSL_read","","",null,null],[5,"SSL_write","","",null,null],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",null,null],[5,"SSL_get_SSL_CTX","","",null,null],[5,"SSL_set_SSL_CTX","","",null,null],[5,"SSL_get_current_compression","","",null,null],[5,"SSL_get_peer_certificate","","",null,null],[5,"SSL_get_ssl_method","","",null,null],[5,"SSL_get_version","","",null,null],[5,"SSL_state_string","","",null,null],[5,"SSL_state_string_long","","",null,null],[5,"SSL_set_verify","","",null,null],[5,"SSL_get_ex_new_index","","",null,null],[5,"SSL_set_ex_data","","",null,null],[5,"SSL_get_ex_data","","",null,null],[5,"SSL_get_servername","","",null,null],[5,"SSL_COMP_get_name","","",null,null],[5,"SSL_get_current_cipher","","",null,null],[5,"SSL_CIPHER_get_name","","",null,null],[5,"SSL_CIPHER_get_bits","","",null,null],[5,"SSL_CIPHER_get_version","","",null,null],[5,"SSL_CIPHER_description","","",null,null],[5,"SSL_CTX_new","","",null,null],[5,"SSL_CTX_free","","",null,null],[5,"SSL_CTX_set_verify","","",null,null],[5,"SSL_CTX_set_verify_depth","","",null,null],[5,"SSL_CTX_load_verify_locations","","",null,null],[5,"SSL_CTX_set_default_verify_paths","","",null,null],[5,"SSL_CTX_get_ex_new_index","","",null,null],[5,"SSL_CTX_set_ex_data","","",null,null],[5,"SSL_CTX_get_ex_data","","",null,null],[5,"SSL_CTX_set_session_id_context","","",null,null],[5,"SSL_CTX_use_certificate_file","","",null,null],[5,"SSL_CTX_use_certificate_chain_file","","",null,null],[5,"SSL_CTX_use_certificate","","",null,null],[5,"SSL_CTX_use_PrivateKey_file","","",null,null],[5,"SSL_CTX_use_PrivateKey","","",null,null],[5,"SSL_CTX_check_private_key","","",null,null],[5,"SSL_CTX_set_cipher_list","","",null,null],[5,"X509_add_ext","","",null,null],[5,"X509_digest","","",null,null],[5,"X509_free","","",null,null],[5,"X509_REQ_free","","",null,null],[5,"X509_get_serialNumber","","",null,null],[5,"X509_get_subject_name","","",null,null],[5,"X509_gmtime_adj","","",null,null],[5,"X509_new","","",null,null],[5,"X509_set_issuer_name","","",null,null],[5,"X509_set_notAfter","","",null,null],[5,"X509_set_notBefore","","",null,null],[5,"X509_set_version","","",null,null],[5,"X509_set_pubkey","","",null,null],[5,"X509_sign","","",null,null],[5,"X509_get_pubkey","","",null,null],[5,"X509_to_X509_REQ","","",null,null],[5,"X509_get_ext_d2i","","",null,null],[5,"X509_EXTENSION_free","","",null,null],[5,"X509_NAME_add_entry_by_txt","","",null,null],[5,"X509_NAME_get_index_by_NID","","",null,null],[5,"X509_NAME_get_entry","","",null,null],[5,"X509_NAME_ENTRY_get_data","","",null,null],[5,"ASN1_STRING_to_UTF8","","",null,null],[5,"ASN1_STRING_length","","",null,null],[5,"ASN1_STRING_data","","",null,null],[5,"X509_STORE_CTX_get_current_cert","","",null,null],[5,"X509_STORE_CTX_get_error","","",null,null],[5,"X509_STORE_CTX_get_ex_data","","",null,null],[5,"X509_STORE_CTX_get_error_depth","","",null,null],[5,"X509V3_EXT_conf_nid","","",null,null],[5,"X509V3_EXT_conf","","",null,null],[5,"X509V3_set_ctx","","",null,null],[5,"X509_REQ_add_extensions","","",null,null],[5,"X509_REQ_sign","","",null,null],[5,"i2d_RSA_PUBKEY","","",null,null],[5,"d2i_RSA_PUBKEY","","",null,null],[5,"i2d_RSAPrivateKey","","",null,null],[5,"d2i_RSAPrivateKey","","",null,null],[5,"SSLeay","","",null,null],[5,"SSLeay_version","","",null,null],[0,"probe","","",null,null],[3,"ProbeResult","openssl_sys::probe","",null,null],[12,"cert_file","","",11,null],[12,"cert_dir","","",11,null],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"init_ssl_cert_env_vars","","",null,{"inputs":[],"output":null}],[5,"probe","","",null,{"inputs":[],"output":{"name":"proberesult"}}],[6,"ASN1_INTEGER","openssl_sys","",null,null],[6,"ASN1_STRING","","",null,null],[6,"ASN1_TIME","","",null,null],[6,"BN_CTX","","",null,null],[6,"COMP_METHOD","","",null,null],[6,"DH","","",null,null],[6,"ENGINE","","",null,null],[6,"EVP_CIPHER","","",null,null],[6,"EVP_CIPHER_CTX","","",null,null],[6,"EVP_MD","","",null,null],[6,"EVP_PKEY_CTX","","",null,null],[6,"SSL","","",null,null],[6,"SSL_CIPHER","","",null,null],[6,"SSL_CTX","","",null,null],[6,"SSL_METHOD","","",null,null],[6,"X509","","",null,null],[6,"X509_CRL","","",null,null],[6,"X509_EXTENSION","","",null,null],[6,"X509_NAME","","",null,null],[6,"X509_NAME_ENTRY","","",null,null],[6,"X509_REQ","","",null,null],[6,"X509_STORE_CTX","","",null,null],[6,"bio_st","","",null,null],[6,"bio_info_cb","","",null,null],[6,"CRYPTO_EX_new","","",null,null],[6,"CRYPTO_EX_dup","","",null,null],[6,"CRYPTO_EX_free","","",null,null],[6,"PasswordCallback","","",null,null],[17,"BIO_TYPE_NONE","","",null,null],[17,"BIO_CTRL_EOF","","",null,null],[17,"BIO_CTRL_FLUSH","","",null,null],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",null,null],[17,"CRYPTO_LOCK","","",null,null],[17,"MBSTRING_ASC","","",null,null],[17,"MBSTRING_BMP","","",null,null],[17,"MBSTRING_FLAG","","",null,null],[17,"MBSTRING_UNIV","","",null,null],[17,"MBSTRING_UTF8","","",null,null],[17,"NID_ext_key_usage","","",null,null],[17,"NID_key_usage","","",null,null],[17,"PKCS5_SALT_LEN","","",null,null],[17,"SSL_CTRL_OPTIONS","","",null,null],[17,"SSL_CTRL_CLEAR_OPTIONS","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",null,null],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",null,null],[17,"SSL_CTRL_SET_READ_AHEAD","","",null,null],[17,"SSL_ERROR_NONE","","",null,null],[17,"SSL_ERROR_SSL","","",null,null],[17,"SSL_ERROR_SYSCALL","","",null,null],[17,"SSL_ERROR_WANT_ACCEPT","","",null,null],[17,"SSL_ERROR_WANT_CONNECT","","",null,null],[17,"SSL_ERROR_WANT_READ","","",null,null],[17,"SSL_ERROR_WANT_WRITE","","",null,null],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",null,null],[17,"SSL_ERROR_ZERO_RETURN","","",null,null],[17,"SSL_VERIFY_NONE","","",null,null],[17,"SSL_VERIFY_PEER","","",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",null,null],[17,"TLSEXT_NAMETYPE_host_name","","",null,null],[17,"SSL_TLSEXT_ERR_OK","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",null,null],[17,"SSL_TLSEXT_ERR_NOACK","","",null,null],[17,"SSLEAY_VERSION","","",null,null],[17,"SSLEAY_CFLAGS","","",null,null],[17,"SSLEAY_BUILT_ON","","",null,null],[17,"SSLEAY_PLATFORM","","",null,null],[17,"SSLEAY_DIR","","",null,null],[17,"V_ASN1_GENERALIZEDTIME","","",null,null],[17,"V_ASN1_UTCTIME","","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[17,"X509_FILETYPE_PEM","","",null,null],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",null,null],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",null,null],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",null,null],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",null,null],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CERT_REJECTED","","",null,null],[17,"X509_V_ERR_CERT_REVOKED","","",null,null],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_CERT_UNTRUSTED","","",null,null],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",null,null],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",null,null],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",null,null],[17,"X509_V_ERR_INVALID_CA","","",null,null],[17,"X509_V_ERR_INVALID_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_NON_CA","","",null,null],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_PURPOSE","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",null,null],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",null,null],[17,"X509_V_ERR_OUT_OF_MEM","","",null,null],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",null,null],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",null,null],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",null,null],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",null,null],[17,"X509_V_ERR_SUBTREE_MINMAX","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",null,null],[17,"X509_V_OK","","",null,null],[17,"GEN_OTHERNAME","","",null,null],[17,"GEN_EMAIL","","",null,null],[17,"GEN_DNS","","",null,null],[17,"GEN_X400","","",null,null],[17,"GEN_DIRNAME","","",null,null],[17,"GEN_EDIPARTY","","",null,null],[17,"GEN_URI","","",null,null],[17,"GEN_IPADD","","",null,null],[17,"GEN_RID","","",null,null],[11,"clone","","",3,{"inputs":[{"name":"bio_method"}],"output":{"name":"bio_method"}}],[11,"clone","","",12,{"inputs":[{"name":"evp_md_ctx"}],"output":{"name":"evp_md_ctx"}}],[11,"clone","","",13,{"inputs":[{"name":"hmac_ctx"}],"output":{"name":"hmac_ctx"}}],[11,"clone","","",9,{"inputs":[{"name":"general_name"}],"output":{"name":"general_name"}}],[11,"clone","","",14,{"inputs":[{"name":"x509v3_ctx"}],"output":{"name":"x509v3_ctx"}}],[11,"clone","","",10,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}]],"paths":[[3,"stack_st_X509_EXTENSION"],[3,"stack_st_GENERAL_NAME"],[3,"stack_st_void"],[3,"BIO_METHOD"],[3,"_STACK"],[3,"RSA"],[3,"EVP_PKEY"],[3,"BIO"],[3,"CRYPTO_EX_DATA"],[3,"GENERAL_NAME"],[3,"BIGNUM"],[3,"ProbeResult"],[3,"EVP_MD_CTX"],[3,"HMAC_CTX"],[3,"X509V3_CTX"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIString","ansi_term","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal\nenvironments.",1,null],[11,"clone","","",2,{"inputs":[{"name":"ansistring"}],"output":{"name":"ansistring"}}],[11,"fmt","","",2,{"inputs":[{"name":"ansistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"ansistring"},{"name":"ansistring"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"ansistring"},{"name":"ansistring"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"ansistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"s"}],"output":{"name":"ansistring"}}],[11,"deref","","",2,{"inputs":[{"name":"ansistring"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"colour"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"colour"}],"output":{"name":"colour"}}],[11,"eq","","",1,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don&#39;t have to use Blue.normal() just\nto get blue text.",1,{"inputs":[{"name":"colour"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",1,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",1,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",1,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",1,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",1,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",1,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",1,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",1,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"style"}}],[11,"fmt","","",3,{"inputs":[{"name":"style"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"eq","","",3,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Style with no differences.",3,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",3,{"inputs":[{"name":"style"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",3,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",3,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",3,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",3,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",3,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",3,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",3,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",3,{"inputs":[{"name":"style"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",0,{"inputs":[{"name":"ansistrings"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ANSIStrings"],[4,"Colour"],[3,"ANSIString"],[3,"Style"]]};
searchIndex["tempdir"] = {"doc":"","items":[[3,"TempDir","tempdir","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion.",null,null],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",0,{"inputs":[{"name":"tempdir"}],"output":{"name":"pathbuf"}}],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",0,{"inputs":[{"name":"tempdir"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary directory",0,{"inputs":[{"name":"tempdir"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"tempdir"}],"output":null}]],"paths":[[3,"TempDir"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::dec2flt","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",2,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"clone","","",3,{"inputs":[{"name":"tryfrominterror"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",3,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",6,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",8,null],[11,"eq","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",9,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",10,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",10,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",11,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",11,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",12,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",12,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"fmt","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",15,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",16,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",22,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",19,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",19,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",19,null],[11,"swap","","Stores a value into the isize, returning the old value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize` if the current value is the same as the `current` value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",20,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",20,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",20,null],[11,"swap","","Stores a value into the usize, returning the old value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",21,null],[11,"load","","Loads a value from the pointer.",21,null],[11,"store","","Stores a value into the pointer.",21,null],[11,"swap","","Stores a value into the pointer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",21,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",21,null],[11,"fmt","","",20,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",23,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",23,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",23,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",23,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",23,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"clone","","",23,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",23,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",25,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",25,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"clone","","",25,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",25,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"deref","","",26,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",26,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",26,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",26,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",27,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",27,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",27,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",28,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",28,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",28,null],[11,"default","","",28,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",29,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"next","","",29,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"next","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"count","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",30,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",31,null],[11,"next","","",31,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"fmt","","",32,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",32,null],[11,"next","","",32,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"fmt","core::iter::range","",33,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter::range","",33,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next","","",33,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next","","",33,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next","core::ops","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"fmt","core::iter::sources","",34,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",34,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"next_back","","",34,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",35,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"next_back","","",35,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",35,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",36,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",36,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",36,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"fmt","core::iter","",37,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",37,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"fmt","","",38,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"fmt","","",39,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",39,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",40,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",40,{"inputs":[{"name":"chain"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"fmt","","",41,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",41,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"fmt","","",42,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"fmt","","",43,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",43,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"fmt","","",44,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",44,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"fmt","","",45,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",45,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"nth","","",45,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",45,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",45,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"fmt","","",46,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",46,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",46,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",46,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",46,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",46,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",46,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",47,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",47,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"fmt","","",48,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",48,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",49,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"fmt","","",50,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",50,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",50,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"fmt","","",51,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",51,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"fmt","","",52,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",52,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"fmt","","",53,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",53,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",54,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",54,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"hash","core::option","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",55,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",55,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",55,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",55,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",55,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",55,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",55,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",55,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",55,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",55,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",55,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",55,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"fmt","","",56,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",57,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",58,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",55,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",59,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",60,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",61,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",61,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",61,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",61,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",61,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",61,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",61,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",61,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",61,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",61,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",61,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",61,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",61,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",61,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",61,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",61,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",61,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",61,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"fmt","","",62,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",63,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",64,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",61,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",65,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",65,null],[11,"next","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"count","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",65,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",66,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",66,null],[11,"next","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"count","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",66,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",67,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",67,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",68,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",68,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",69,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next","","",70,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next","","",71,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next","","",72,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"fmt","","",73,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"count","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",73,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"fmt","","",74,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"count","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",74,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"fmt","","",75,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",75,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"count","","",75,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",75,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",75,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",75,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",76,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",77,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",78,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",79,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",80,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"eq","core::str","",81,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",81,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",82,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",82,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",82,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",83,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",83,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"fmt","","",84,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",84,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",84,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"fmt","","",85,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"count","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",85,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"fmt","","",86,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",86,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",87,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",87,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",86,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",87,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",88,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",88,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"fmt","","",89,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",89,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",88,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",89,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",90,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",90,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"fmt","","",91,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",91,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"fmt","","",92,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",92,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",92,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"fmt","","",93,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",93,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",92,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",93,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",94,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",94,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"fmt","","",95,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",95,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",94,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",96,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",96,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"fmt","","",97,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"next","","",97,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"fmt","","",98,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","core::hash::sip","",99,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",99,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",99,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",99,null],[11,"finish","","",99,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",99,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",100,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",100,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",100,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",101,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",102,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",102,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",103,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",103,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",104,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",104,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",104,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",105,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",105,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",105,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",106,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",106,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",106,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"partial_cmp","core::fmt","",107,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[11,"eq","","",107,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",107,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",107,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",108,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",108,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",109,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",109,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",109,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",109,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",109,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",109,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",109,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",109,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",109,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",8,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",23,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",110,null],[10,"deref","","The method called to dereference a value",110,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",111,null],[12,"1","","",111,null],[11,"get","","",111,{"inputs":[{"name":"lazy"},{"name":"f"}],"output":{"name":"t"}}],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"__Deref"],[3,"Lazy"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",51,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"hash","core::num","",52,null],[11,"default","","",52,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::dec2flt","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",54,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"clone","","",55,{"inputs":[{"name":"tryfrominterror"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",55,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",56,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",57,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",57,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",58,null],[11,"get","","Dereferences the content.",58,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",58,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",59,null],[11,"clone","","",59,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",60,null],[11,"eq","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",60,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",61,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",61,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",62,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",62,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",63,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",63,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",64,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",64,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",65,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",65,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"fmt","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"hash","core::cmp","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",67,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",68,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",68,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",69,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",70,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",73,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",74,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",70,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",70,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",70,null],[11,"swap","","Stores a value into the bool, returning the old value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",71,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",71,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",71,null],[11,"swap","","Stores a value into the isize, returning the old value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize` if the current value is the same as the `current` value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",72,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",72,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",72,null],[11,"swap","","Stores a value into the usize, returning the old value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",73,null],[11,"load","","Loads a value from the pointer.",73,null],[11,"store","","Stores a value into the pointer.",73,null],[11,"swap","","Stores a value into the pointer, returning the old value.",73,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"fmt","","",72,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",75,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",75,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",75,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",75,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",75,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"clone","","",75,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",75,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",77,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",77,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"clone","","",77,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",77,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"deref","","",78,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",78,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",78,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",78,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",79,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",79,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",79,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",79,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",80,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",80,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",80,null],[11,"default","","",80,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",81,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"next","","",81,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"fmt","","",82,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"next","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",83,null],[11,"next","","",83,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"fmt","","",84,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",84,null],[11,"next","","",84,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"fmt","core::iter::range","",85,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",63,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",62,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",65,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter::range","",85,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","","",85,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","","",85,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","core::ops","",62,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"fmt","core::iter::sources","",86,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",86,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"fmt","","",87,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",87,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",87,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",87,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",88,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",88,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",88,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"fmt","core::iter","",89,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",89,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"fmt","","",90,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",90,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"fmt","","",91,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",91,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"fmt","","",92,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",92,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",92,{"inputs":[{"name":"chain"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"fmt","","",93,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"fmt","","",94,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",94,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"fmt","","",95,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"fmt","","",96,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"fmt","","",97,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"nth","","",97,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"fmt","","",98,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",98,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",99,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",99,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"clone","","",100,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"fmt","","",100,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",100,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"fmt","","",101,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",101,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",102,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",102,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"clone","","",103,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"fmt","","",103,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"clone","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"fmt","","",104,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"fmt","","",105,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",105,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",106,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"hash","core::option","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"fmt","","",107,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",108,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",109,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",110,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",111,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",112,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",112,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",112,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",112,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",112,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",112,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",112,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",112,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",112,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",112,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",112,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",112,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",112,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",112,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",112,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",112,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",112,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",112,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"fmt","","",113,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",114,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",115,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",115,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",112,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",116,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",116,null],[11,"next","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"count","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",116,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",117,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",117,null],[11,"next","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"count","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",117,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",118,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",118,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",119,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",119,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"fmt","","",120,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",120,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next","","",121,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next","","",122,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next","","",123,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"fmt","","",124,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"count","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",124,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"fmt","","",125,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"count","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",125,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"fmt","","",126,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"count","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",126,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",127,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",128,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",129,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",130,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",131,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"eq","core::str","",132,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",132,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",133,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",133,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",133,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",134,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next_back","","",134,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",134,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"fmt","","",135,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",135,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",135,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"fmt","","",136,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"count","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",136,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"fmt","","",137,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",137,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",138,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",138,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",137,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",139,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"fmt","","",140,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",140,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",139,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",140,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",141,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",141,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"fmt","","",142,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",142,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",142,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"fmt","","",143,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",143,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"fmt","","",144,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",144,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",144,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",143,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",144,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",145,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",145,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",145,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"fmt","","",146,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",146,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",145,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",147,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",147,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next_back","","",147,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"fmt","","",148,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"next","","",148,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"fmt","","",149,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","core::hash::sip","",150,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",150,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",150,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",150,null],[11,"finish","","",150,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",150,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",151,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",151,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",151,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",152,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",153,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",153,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",154,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",154,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",155,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",155,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",155,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",156,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",156,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",156,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",157,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",157,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",157,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"partial_cmp","core::fmt","",158,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[11,"eq","","",158,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",158,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",158,null],[11,"default","","",158,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",158,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",159,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",159,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",160,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",160,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",160,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",160,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",160,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",160,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",160,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",160,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",160,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",60,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",75,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",161,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",161,null],[11,"clone","libc","",48,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",49,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",162,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",163,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",50,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",164,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",165,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",166,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",167,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",168,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",169,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",170,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",171,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition&#39;s characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition&#39;s characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["enum_derive"] = {"doc":"This crate provides several macros for deriving some useful methods for unitary enums (*i.e.* enums where variants do not have payloads).","items":[[3,"ParseEnumError","enum_derive","This is the error type used for derived implementations of `FromStr` for unitary enums.",null,null],[11,"eq","","",0,{"inputs":[{"name":"parseenumerror"},{"name":"parseenumerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseenumerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"parseenumerror"}],"output":{"name":"parseenumerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseenumerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"parseenumerror"}],"output":{"name":"str"}}],[14,"IterVariants!","","",null,null],[14,"IterVariantNames!","","",null,null],[14,"NextVariant!","","",null,null],[14,"PrevVariant!","","",null,null],[14,"EnumDisplay!","","",null,null],[14,"EnumFromStr!","","",null,null]],"paths":[[3,"ParseEnumError"]]};
searchIndex["custom_derive"] = {"doc":"This crate provides a macro that enables the use of custom `derive` attributes.","items":[],"paths":[]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to\n[Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)\nrules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character&#39;s displayed width in columns, or `None` if the\ncharacter is a control character other than `&#39;\\x00&#39;`.",0,{"inputs":[{"name":"unicodewidthchar"}],"output":{"name":"option"}}],[10,"width_cjk","","Returns the character&#39;s displayed width in columns, or `None` if the\ncharacter is a control character other than `&#39;\\x00&#39;`.",0,{"inputs":[{"name":"unicodewidthchar"}],"output":{"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string&#39;s displayed width in columns.",1,{"inputs":[{"name":"unicodewidthstr"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string&#39;s displayed width in columns.",1,{"inputs":[{"name":"unicodewidthstr"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"vecmap"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator&#39;s element type is `usize`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator&#39;s element type is `&amp;&#39;r V`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r mut V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"vecmap"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"vecmap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",2,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",3,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"vecmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"vecmap"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"vecmap"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches!","matches","",null,null],[14,"_tt_as_expr_hack!","","Work around &quot;error: unexpected token: `an interpolated tt`&quot;, whatever that means.",null,null]],"paths":[]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to\naccess your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand.\nNote that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This\nsimplifies error handling in the calling code. Invalid type conversion also\nreturns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"yaml"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"yaml"}}],[11,"on_event","","",1,{"inputs":[{"name":"yamlloader"},{"name":"event"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"yaml"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"from","collections::string","",2,{"inputs":[{"name":"yaml"}],"output":{"name":"string"}}],[11,"to_string","yaml_rust::yaml","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"string"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",4,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",5,null],[13,"Plain","","",5,null],[13,"SingleQuoted","","",5,null],[13,"DoubleQuoted","","",5,null],[13,"Literal","","",5,null],[13,"Foled","","",5,null],[4,"TokenType","","",null,null],[13,"NoToken","","",6,null],[13,"StreamStart","","",6,null],[13,"StreamEnd","","",6,null],[13,"VersionDirective","","major, minor",6,null],[13,"TagDirective","","handle, prefix",6,null],[13,"DocumentStart","","",6,null],[13,"DocumentEnd","","",6,null],[13,"BlockSequenceStart","","",6,null],[13,"BlockMappingStart","","",6,null],[13,"BlockEnd","","",6,null],[13,"FlowSequenceStart","","",6,null],[13,"FlowSequenceEnd","","",6,null],[13,"FlowMappingStart","","",6,null],[13,"FlowMappingEnd","","",6,null],[13,"BlockEntry","","",6,null],[13,"FlowEntry","","",6,null],[13,"Key","","",6,null],[13,"Value","","",6,null],[13,"Alias","","",6,null],[13,"Anchor","","",6,null],[13,"Tag","","handle, suffix",6,null],[13,"Scalar","","",6,null],[6,"ScanResult","","",null,null],[11,"fmt","","",4,{"inputs":[{"name":"tencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"tencoding"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"tencoding"}],"output":{"name":"tencoding"}}],[11,"fmt","","",5,{"inputs":[{"name":"tscalarstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"tscalarstyle"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"tscalarstyle"}],"output":{"name":"tscalarstyle"}}],[11,"fmt","","",7,{"inputs":[{"name":"marker"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"marker"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"marker"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"marker"}],"output":{"name":"marker"}}],[11,"fmt","","",8,{"inputs":[{"name":"scanerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"scanerror"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"scanerror"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"scanerror"}],"output":{"name":"scanerror"}}],[11,"new","","",8,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",8,{"inputs":[{"name":"scanerror"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"scanerror"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"scanerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"tokentype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"fmt","","",3,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"fmt","","",9,{"inputs":[{"name":"scanner"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"scanresult"}}],[11,"next_token","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API,\nsee `EventReceiver` trait.",null,null],[13,"NoEvent","","Reserved for internal use",10,null],[13,"StreamStart","","",10,null],[13,"StreamEnd","","",10,null],[13,"DocumentStart","","",10,null],[13,"DocumentEnd","","",10,null],[13,"Alias","","Refer to an anchor ID",10,null],[13,"Scalar","","Value, style, anchor_id, tag",10,null],[13,"SequenceStart","","Anchor ID",10,null],[13,"SequenceEnd","","",10,null],[13,"MappingStart","","Anchor ID",10,null],[13,"MappingEnd","","",10,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",11,{"inputs":[{"name":"eventreceiver"},{"name":"event"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"fmt","","",12,{"inputs":[{"name":"parser"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",12,{"inputs":[{"name":"parser"},{"name":"r"},{"name":"bool"}],"output":{"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[6,"EmitResult","","",null,null],[11,"fmt","","",13,{"inputs":[{"name":"emiterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"emiterror"}],"output":{"name":"emiterror"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",14,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",14,{"inputs":[{"name":"yamlemitter"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"String"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `b`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the bytes (`b`) flag was enabled.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"literals"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"literals"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"literals"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"literals"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,{"inputs":[{"name":"lit"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"lit"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","collections::binary_heap","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",8,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",8,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",8,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",8,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",8,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",8,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",8,null],[11,"clone","","",9,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",9,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",10,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",8,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"drop","collections::btree::map","",12,null],[11,"clone","","",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",12,null],[11,"get","","Returns a reference to the value corresponding to the key.",12,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",12,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",12,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",12,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",12,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",12,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",12,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",13,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",13,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",14,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",15,null],[11,"next","","",15,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",16,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next_back","","",16,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",16,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",16,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",17,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",17,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",17,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",18,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"len","","",19,{"inputs":[{"name":"valuesmut"}],"output":{"name":"usize"}}],[11,"next_back","","",18,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",20,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",12,null],[11,"extend","","",12,null],[11,"hash","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",12,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",12,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",21,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",21,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry&#39;s key.",21,{"inputs":[{"name":"entry"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",22,{"inputs":[{"name":"vacantentry"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",22,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",23,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",23,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",23,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",23,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",23,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",23,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",24,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",24,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",24,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",24,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",24,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",24,null],[11,"contains","","Returns `true` if the set contains a value.",24,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",24,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",24,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",24,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",24,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",24,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",24,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",24,null],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",24,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",24,null],[11,"extend","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",24,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",25,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next_back","","",25,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",25,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",26,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"next_back","","",26,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",26,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"clone","","",27,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",27,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",27,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",28,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"clone","","",29,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",29,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"clone","","",30,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",30,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"clone","","",31,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",31,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"borrow","collections::borrow","",32,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",32,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",32,null],[11,"into_owned","","Extracts the owned data.",32,null],[11,"deref","","",32,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",32,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",32,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",32,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"as_ref","","",32,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",33,null],[11,"cmp","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",33,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",33,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",33,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",33,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",33,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",33,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",33,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",33,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",33,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",33,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",34,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",34,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"clone","collections::linked_list","",35,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",36,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",37,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",37,null],[11,"iter","","Provides a forward iterator.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",37,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",37,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",37,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",37,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",37,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"drop","","",37,null],[11,"next","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"next_back","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",38,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",38,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",37,null],[11,"extend","","",37,null],[11,"eq","","",37,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",37,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",37,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",37,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"make_place","","",39,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[11,"pointer","","",39,null],[11,"finalize","","",39,null],[11,"make_place","","",40,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[11,"pointer","","",40,null],[11,"finalize","","",40,null],[11,"start","core::ops","",41,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",42,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",43,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",43,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",44,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"next","","",44,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"borrow","collections::string","",45,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",46,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",47,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",47,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",47,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",47,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",47,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",47,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",47,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",47,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",48,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",48,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",48,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",48,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",48,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",48,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",48,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",48,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",49,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",49,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",49,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",49,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",49,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",49,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",49,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",49,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",50,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",50,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",50,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",50,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",50,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",50,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"cmp","collections::string","",45,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",45,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",45,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",45,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",45,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",45,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",45,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",45,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",45,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",45,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",45,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",45,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",45,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",45,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",45,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",45,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",45,null],[11,"push","","Appends the given `char` to the end of this `String`.",45,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",45,null],[11,"truncate","","Shortens this `String` to the specified length.",45,null],[11,"pop","","Removes the last character from the string buffer and returns it.",45,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",45,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",45,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",45,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",45,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",45,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",45,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",45,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",45,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",51,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",51,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",51,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",45,null],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",32,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",45,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",45,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"add","","",45,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",45,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",45,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",45,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",45,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",45,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",45,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",45,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",45,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",45,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",45,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",45,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",45,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"deref","","",45,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",45,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",53,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",45,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",45,null],[11,"from","","",45,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",32,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",32,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",45,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"write_str","","",45,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",45,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",54,null],[11,"next","","",54,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",7,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",32,null],[11,"from","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",32,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",55,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"count","","",55,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",55,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"drop","","",55,null],[11,"next","","",56,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",56,null],[11,"clone","collections::vec_deque","",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",57,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",57,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",57,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",57,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",57,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",57,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",57,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",57,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",57,null],[11,"iter","","Returns a front-to-back iterator.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",57,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",57,null],[11,"len","","Returns the number of elements in the `VecDeque`.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",57,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",57,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",57,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",57,null],[11,"push_back","","Appends an element to the back of a buffer",57,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",57,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",57,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",57,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",57,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",57,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",57,null],[11,"retain","","Retains only the elements specified by the predicate.",57,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",57,null],[11,"clone","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",59,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",61,null],[11,"next","","",61,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",57,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",57,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",57,null],[11,"index","","",57,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",57,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",57,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",57,null],[11,"extend","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",57,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",62,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",63,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",64,null],[11,"make_place","","",64,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",64,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",65,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",63,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",64,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",65,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",65,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",65,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",65,null],[11,"clone","","",65,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",65,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",65,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",65,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",65,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",65,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",65,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",65,null],[11,"from","","",65,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",65,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",65,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",65,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",65,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",65,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",65,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",65,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",65,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",65,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",65,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",65,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",65,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","regex_syntax","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",66,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"eq","","",67,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"byterange"}],"output":{"name":"byterange"}}],[11,"fmt","","",68,{"inputs":[{"name":"exprbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"new","","Create a new builder for configuring expression parsing.",68,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",68,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",68,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",68,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",68,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",68,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",68,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the Unicode flag can be used or not. By default, the flag is\nenabled but it cannot be toggled.",68,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",68,{"inputs":[{"name":"exprbuilder"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",68,{"inputs":[{"name":"exprbuilder"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"deref","","",66,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",66,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",66,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",66,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",66,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",66,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",66,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",67,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",67,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",67,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",67,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",67,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"deref","","",67,{"inputs":[{"name":"byteclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",67,{"inputs":[{"name":"byteclass"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",69,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",69,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",69,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",69,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["open"] = {"doc":"Use this library to open a path or URL using the program configured on the system.","items":[[5,"that","open","",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}]],"paths":[]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics. Currently includes\nHamming, Levenshtein, Jaro, and Jaro-Winkler.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector.\nReturns a vector of corresponding values between 0.0 and 1.0 (higher value\nmeans more similar).",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a\nvector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"strsimerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
