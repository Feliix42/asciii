dist: trusty
language: rust
services: docker
sudo: required

matrix:
  include:
    - os: linux
      env: TARGET=i686-unknown-linux-gnu
           DOCKER=quay.io/ascii/i686-unknown-linux-gnu:latest
    - os: linux
      env: TARGET=x86_64-unknown-linux-gnu
           DOCKER=quay.io/ascii/x86_64-unknown-linux-gnu:latest
    - os: osx
      env: TARGET=i686-apple-darwin
    - os: osx
      env: TARGET=x86_64-apple-darwin

    # Just testing for right cross compilers for these targets.
    - os: linux
      env: TARGET=i686-unknown-linux-musl
           DOCKER=quay.io/ascii/i686-unknown-linux-musl:latest
           SKIP_TESTS=1
    - os: linux
      env: TARGET=i686-pc-windows-gnu
           DOCKER=quay.io/ascii/i686-pc-windows-gnu:latest
           SKIP_TESTS=1
    - os: linux
      env: TARGET=x86_64-pc-windows-gnu
           DOCKER=quay.io/ascii/x86_64-pc-windows-gnu:latest
           SKIP_TESTS=1

install:
  - curl https://static.rust-lang.org/rustup.sh |
    sh -s -- --prefix=$HOME/rust --with-target=$TARGET

script:
  - if [ ! -z "$DOCKER" ]; then
      docker run
        --entrypoint bash
        -u `id -u`:`id -g`
        -v $HOME/rust:/travis-rust:ro
        -e RUST_BACKTRACE=1
        -e ASCIII_LOG=trace
        -w /buildslave
        -v `pwd`:/buildslave
        -v `pwd`/target:/buildslave/target
        -v /target:$HOME
        -e HOME=/target
        -e TARGET
        -e SKIP_TESTS
        -it $DOCKER
        ci/run-docker.sh;
    else
      PATH=$HOME/rust/bin:$PATH sh ci/run.sh;
    fi

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
  # - Paste the output down here
  api_key:
    secure: "cpwZPs76IJnoKGZs1QwyNo6P8tIjm7S+W9NmjJAyvKKDMR/Bz5rcC7ZH9gfJN1ymlh8zt38T5Zrrq6Ukc67c8ei+tNCUqWUi5pWSTN8jhNFvFpMppfbU7lkcuyHQdVV8pVvu4524FUuxpVby0ni3JdKjD8OM4IDD0UMjxHiP14A5U/V2kPNT769E/R2Vhq/xbTuvDk6WNcBLgODbbYNyE0XYmTVbWlusIpszJzGIks9FkfByT4BKmeaaxHjOgMRJ8270EL+7J2fFvMchNoRPTXqmfjDb9ex7UeMIeaH2WzcEGxuN/v060p8g7FnFy5IvV+YczKd28zegbu3vLBbNfO349prd15MZ9HY7KaWwX3MdGUFNojZnmnrmVDGK9pUsnlNoO6BhYXNleqG1m5gov8pw6vD+gz0QCU20oVtZZ7LIMHYq2CSv7lrcw+6c1Dg6fGwPs+4iAElWiKnvMbv2jlYN0RFM3hYwX/Tuw70FYD4joaXZNqpTLMvJ6DML8sXkjyZsex2OdcSZjWqF2yObOaVXhhoPDxsYRx3d+i5NiWN3ECBL8fLQGlDLzfstJp/A1sA5rrsaZL50WQrlHXH4Y2bZAbNsDf9IVrnzmxtJn4dvus78gng7pEz3siSEKVaWsbp+2CXYO/oiiIYtjCcVH10QPtnYLYZgEH9UYjiIqxY="

  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
